Search.setIndex({"docnames": ["_include/distributions-table", "_include/inference_data_opts-table", "_include/inference_io_inheritance_diagrams", "_include/models-table", "_include/psd_models-table", "_include/sampler_inheritance_diagrams", "_include/samplers-table", "_include/transforms-table", "_include/waveform-parameters", "apps", "banksim", "build_gh_pages", "building_bundled_executables", "catalog", "credit", "dataquality", "detector", "devs", "distributions", "docker", "documentation", "extend", "faithsim", "fft", "filter", "formats/hdf_format", "frame", "genindex", "gw150914", "hwinj", "index", "inference", "inference/examples/analytic", "inference/examples/bbh", "inference/examples/gw150914", "inference/examples/hierarchical", "inference/examples/lisa_smbhb_inj_pe", "inference/examples/lisa_smbhb_ldc_pe", "inference/examples/margtime", "inference/examples/relative", "inference/examples/sampler_platter", "inference/examples/single", "inference/io", "inference/models", "inference/sampler_api", "inference/viz", "install", "install_cuda", "install_lalsuite", "install_virtualenv", "modules", "noise", "psd", "pycbc", "pycbc.catalog", "pycbc.distributions", "pycbc.events", "pycbc.fft", "pycbc.filter", "pycbc.frame", "pycbc.inference", "pycbc.inference.io", "pycbc.inference.jump", "pycbc.inference.models", "pycbc.inference.sampler", "pycbc.inject", "pycbc.io", "pycbc.neutron_stars", "pycbc.noise", "pycbc.population", "pycbc.psd", "pycbc.results", "pycbc.strain", "pycbc.tmpltbank", "pycbc.types", "pycbc.vetoes", "pycbc.waveform", "pycbc.workflow", "pycbc_condition_strain", "release", "tmpltbank", "tutorials", "upload_to_gracedb", "waveform", "waveform_plugin", "workflow", "workflow/datafind", "workflow/hdf_coincidence", "workflow/initialization", "workflow/injections", "workflow/matched_filter", "workflow/pycbc_make_inference_inj_workflow", "workflow/pycbc_make_inference_workflow", "workflow/pycbc_make_offline_search_workflow", "workflow/pycbc_make_psd_estimation_workflow", "workflow/pygrb", "workflow/segments", "workflow/splittable", "workflow/template_bank"], "filenames": ["_include/distributions-table.rst", "_include/inference_data_opts-table.rst", "_include/inference_io_inheritance_diagrams.rst", "_include/models-table.rst", "_include/psd_models-table.rst", "_include/sampler_inheritance_diagrams.rst", "_include/samplers-table.rst", "_include/transforms-table.rst", "_include/waveform-parameters.rst", "apps.rst", "banksim.rst", "build_gh_pages.rst", "building_bundled_executables.rst", "catalog.rst", "credit.rst", "dataquality.rst", "detector.rst", "devs.rst", "distributions.rst", "docker.rst", "documentation.rst", "extend.rst", "faithsim.rst", "fft.rst", "filter.rst", "formats/hdf_format.rst", "frame.rst", "genindex.rst", "gw150914.rst", "hwinj.rst", "index.rst", "inference.rst", "inference/examples/analytic.rst", "inference/examples/bbh.rst", "inference/examples/gw150914.rst", "inference/examples/hierarchical.rst", "inference/examples/lisa_smbhb_inj_pe.rst", "inference/examples/lisa_smbhb_ldc_pe.rst", "inference/examples/margtime.rst", "inference/examples/relative.rst", "inference/examples/sampler_platter.rst", "inference/examples/single.rst", "inference/io.rst", "inference/models.rst", "inference/sampler_api.rst", "inference/viz.rst", "install.rst", "install_cuda.rst", "install_lalsuite.rst", "install_virtualenv.rst", "modules.rst", "noise.rst", "psd.rst", "pycbc.rst", "pycbc.catalog.rst", "pycbc.distributions.rst", "pycbc.events.rst", "pycbc.fft.rst", "pycbc.filter.rst", "pycbc.frame.rst", "pycbc.inference.rst", "pycbc.inference.io.rst", "pycbc.inference.jump.rst", "pycbc.inference.models.rst", "pycbc.inference.sampler.rst", "pycbc.inject.rst", "pycbc.io.rst", "pycbc.neutron_stars.rst", "pycbc.noise.rst", "pycbc.population.rst", "pycbc.psd.rst", "pycbc.results.rst", "pycbc.strain.rst", "pycbc.tmpltbank.rst", "pycbc.types.rst", "pycbc.vetoes.rst", "pycbc.waveform.rst", "pycbc.workflow.rst", "pycbc_condition_strain.rst", "release.rst", "tmpltbank.rst", "tutorials.rst", "upload_to_gracedb.rst", "waveform.rst", "waveform_plugin.rst", "workflow.rst", "workflow/datafind.rst", "workflow/hdf_coincidence.rst", "workflow/initialization.rst", "workflow/injections.rst", "workflow/matched_filter.rst", "workflow/pycbc_make_inference_inj_workflow.rst", "workflow/pycbc_make_inference_workflow.rst", "workflow/pycbc_make_offline_search_workflow.rst", "workflow/pycbc_make_psd_estimation_workflow.rst", "workflow/pygrb.rst", "workflow/segments.rst", "workflow/splittable.rst", "workflow/template_bank.rst"], "titles": ["&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "&lt;no title&gt;", "Applications and Workflows", "Calculating the Effectualness (Fitting Factor) of Template Banks", "Building Documentation for GitHub Pages", "Building Bundled Executables", "Catalog of Observed Gravitational-wave Mergers", "Use of PyCBC in Scientific Publications", "Query times of valid data, hardware injections, and more.", "Gravitational-wave Detectors", "Documentation for Developers", "Using PyCBC Distributions from PyCBC Inference", "Running PyCBC under Docker", "Documenting PyCBC code", "Extending PyCBC with external plugins", "Dag Generator for Doing Faithfulness Comparisons", "Performing FFTs in PyCBC", "Filtering", "HDF files within the PyCBC workflow", "Reading Gravitational-wave Frames", "Index", "Signal Processing with GW150914", "Hardware injection waveform generation", "PyCBC: Powering Gravitational-wave Astronomy", "PyCBC inference documentation (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc.inference</span></code>)", "Running on an analytic distribution", "Simulated BBH example", "GW150914 example with gaussian noise model", "Using the hierarchical model", "LISA SMBHB injection and parameter estimation", "LISA parameter estimation for simulated SMBHB from LDC", "Marginalized time model", "Using the relative model", "Trying out different samplers", "Using the single template model", "Inference IO", "Details of common Models in PyCBC Inference", "Sampler API", "Plotting the posteriors (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_inference_plot_posterior</span></code>)", "Installing PyCBC", "Instructions to add CUDA support (optional)", "Installing lalsuite for PyCBC", "Setting up virtualenv", "pycbc", "Generating Noise", "Handling PSDs", "pycbc package", "pycbc.catalog package", "pycbc.distributions package", "pycbc.events package", "pycbc.fft package", "pycbc.filter package", "pycbc.frame package", "pycbc.inference package", "pycbc.inference.io package", "pycbc.inference.jump package", "pycbc.inference.models package", "pycbc.inference.sampler package", "pycbc.inject package", "pycbc.io package", "pycbc.neutron_stars package", "pycbc.noise package", "pycbc.population package", "pycbc.psd package", "pycbc.results package", "pycbc.strain package", "pycbc.tmpltbank package", "pycbc.types package", "pycbc.vetoes package", "pycbc.waveform package", "pycbc.workflow package", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_condition_strain</span></code>: operations with strain data files", "Creating Releases of PyCBC", "PyCBC template bank generation documentation (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc.tmpltbank</span></code>)", "Library Examples and Interactive Tutorials", "Uploading triggers to gracedb", "Waveforms", "Making new waveform approximants available to PyCBC", "Workflow: the inspiral analysis workflow generator (<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc.workflow</span></code>)", "The workflow datafind and validation module", "HDF5 Based Coincidence Code", "Pycbc\u2019s workflow module configuration file(s) and command line interface", "The workflow injection generation module", "The workflow matched-filter module", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_inference_inj_workflow</span></code>: A parameter estimation workflow generator for injections", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_inference_workflow</span></code>: A parameter estimation workflow generator", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_offline_search_workflow</span></code>: A workflow to search for gravitational waves", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_psd_estimation_workflow</span></code>: A workflow generator for noise estimation", "<code class=\"docutils literal notranslate\"><span class=\"pre\">pycbc_make_offline_grb_workflow</span></code>: A GRB triggered CBC analysis workflow generator", "The workflow segment generation module", "The workflow table splitting module", "The workflow template bank generation module"], "terms": {"name": [0, 1, 3, 4, 6, 7, 10, 11, 12, 13, 15, 16, 19, 22, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 47, 48, 50, 52, 53, 54, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "class": [0, 3, 6, 7, 16, 20, 31, 44, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 76, 77, 80, 81, 86, 88, 89, 90, 92, 96, 97, 98], "arbitrari": [0, 31, 41, 50, 53, 56, 63, 65, 66, 73, 76, 77, 84], "pycbc": [0, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 22, 24, 26, 28, 29, 33, 34, 36, 37, 38, 40, 41, 42, 44, 45, 47, 49, 51, 52, 81, 82, 83, 87, 92, 93, 94, 95], "distribut": [0, 10, 29, 31, 33, 36, 37, 39, 41, 47, 50, 53, 56, 60, 62, 63, 64, 68, 69, 71, 77, 81, 91, 93], "cos_angl": [0, 31, 38, 41, 55], "angular": [0, 8, 31, 50, 53, 58, 60, 67, 76, 77], "cosangl": [0, 31, 53, 55], "extern": [0, 31, 40, 43, 44, 50, 53, 58, 76, 77], "external_func_fromfil": [0, 31, 55], "distributionfunctionfromfil": [0, 31, 53, 55], "fisher_ski": [0, 31, 55], "sky_loc": [0, 31, 50, 53], "fisherski": [0, 31, 53, 55], "fixed_sampl": [0, 31, 41, 55], "fixedsampl": [0, 31, 50, 53], "fromfil": [0, 31, 53, 55], "gaussian": [0, 1, 18, 31, 33, 35, 36, 40, 43, 50, 52, 53, 56, 63, 65, 75, 76, 80, 81, 90, 91, 92, 98], "independent_chip_chieff": [0, 31, 55], "spin": [0, 8, 10, 13, 14, 22, 29, 31, 33, 39, 41, 43, 50, 53, 56, 58, 63, 66, 67, 69, 73, 76, 77, 81, 87, 88, 89, 92, 93, 98], "independentchipchieff": [0, 31, 53, 55], "mchirp_from_uniform_mass1_mass2": [0, 31, 35, 55], "mass": [0, 8, 10, 13, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 50, 53, 56, 66, 67, 69, 72, 73, 76, 77, 80, 81, 88, 90, 92, 97, 98], "mchirpfromuniformmass1mass2": [0, 18, 31, 53, 55], "q_from_uniform_mass1_mass2": [0, 31, 35, 55], "qfromuniformmass1mass2": [0, 18, 31, 53, 55], "sin_angl": [0, 31, 33, 38, 39, 41, 55, 92], "sinangl": [0, 31, 53, 55], "uniform": [0, 10, 22, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 50, 53, 56, 63, 64, 66, 69, 81, 89, 91, 92, 93], "uniform_angl": [0, 31, 33, 38, 41, 55, 92], "uniformangl": [0, 31, 53, 55], "uniform_f0_tau": [0, 31, 55], "qnm": [0, 31, 50, 53, 76], "uniformf0tau": [0, 31, 53, 55], "uniform_log10": [0, 31, 55, 91], "uniform_log": [0, 31, 50, 53], "uniformlog10": [0, 31, 53, 55], "uniform_power_law": [0, 31, 55], "power_law": [0, 31, 50, 53], "uniformpowerlaw": [0, 31, 53, 55], "uniform_radiu": [0, 31, 33, 38, 39, 41, 55], "uniformradiu": [0, 31, 53, 55], "uniform_ski": [0, 31, 33, 35, 41, 55, 92], "uniformski": [0, 31, 53, 55], "uniform_solidangl": [0, 31, 33, 55, 92], "uniformsolidangl": [0, 18, 31, 53, 55], "syntax": [1, 12, 20, 31, 53, 55, 62, 63, 66, 76, 77, 90, 91, 93, 94], "descript": [1, 8, 25, 31, 37, 53, 66, 71, 73, 76, 77, 79, 80, 84, 85, 86, 89, 90, 92, 94, 97, 98], "instrument": [1, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 65, 78, 80, 81, 92, 96], "analyz": [1, 31, 33, 35, 40, 42, 56, 63, 66, 72, 75, 77, 90, 91, 92, 94, 95], "eg": [1, 29, 31, 46, 55, 61, 71, 73, 77], "h1": [1, 13, 15, 16, 25, 26, 28, 29, 31, 33, 34, 35, 38, 39, 41, 53, 54, 56, 59, 63, 66, 72, 74, 76, 77, 78, 80, 83, 86, 88, 92, 93, 94, 95, 96, 97, 98], "l1": [1, 13, 15, 16, 25, 28, 29, 31, 33, 34, 35, 38, 39, 41, 53, 54, 56, 59, 63, 72, 76, 77, 80, 83, 86, 88, 90, 92, 93, 94, 95, 96, 98], "trigger": [1, 9, 31, 33, 34, 35, 36, 37, 38, 50, 53, 58, 66, 69, 70, 71, 72, 75, 77, 79, 80, 85, 87, 92, 93, 96], "time": [1, 8, 10, 12, 13, 14, 22, 23, 25, 26, 28, 31, 33, 34, 35, 36, 37, 39, 40, 41, 43, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 97, 98], "trigger_tim": [1, 31, 33, 71, 92], "refer": [1, 8, 12, 16, 20, 24, 29, 31, 33, 43, 44, 53, 56, 58, 60, 63, 65, 66, 69, 70, 72, 75, 76, 77, 78, 80, 84, 85, 88, 90, 91, 93, 98], "gp": [1, 10, 13, 16, 22, 25, 28, 29, 31, 53, 56, 59, 63, 65, 68, 69, 70, 72, 74, 76, 77, 78, 80, 83, 89, 90, 95, 98], "geocent": [1, 31, 56], "from": [1, 10, 11, 12, 14, 15, 16, 19, 20, 23, 26, 28, 30, 31, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 97, 98], "which": [1, 8, 10, 12, 15, 17, 18, 23, 25, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "anlaysi": [1, 31], "psd": [1, 4, 10, 22, 24, 28, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 50, 51, 53, 56, 58, 60, 61, 63, 68, 72, 73, 74, 75, 76, 80, 81, 82, 83, 85, 90, 92, 93, 94, 96, 98], "start": [1, 8, 10, 12, 15, 19, 22, 25, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 46, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98], "end": [1, 8, 10, 15, 22, 23, 25, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 45, 53, 56, 57, 58, 59, 60, 61, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 94, 95, 96, 98], "option": [1, 10, 12, 19, 22, 29, 31, 33, 38, 40, 41, 43, 45, 46, 48, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 84, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "ar": [1, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98], "measur": [1, 10, 30, 31, 33, 53, 57, 58, 60, 65, 70, 72, 80, 90, 98], "The": [1, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 82, 83, 84, 85, 87, 88, 91, 92, 93, 94, 95], "integ": [1, 12, 23, 31, 53, 56, 57, 60, 61, 62, 63, 64, 70, 71, 72, 73, 74, 75, 76, 77, 80, 86, 87, 90, 98], "second": [1, 8, 11, 16, 18, 24, 26, 29, 31, 33, 45, 51, 52, 53, 54, 56, 57, 58, 59, 60, 63, 64, 65, 66, 67, 68, 69, 70, 72, 73, 74, 76, 77, 78, 79, 80, 86, 87, 88, 90, 93, 96, 98], "us": [1, 8, 10, 11, 15, 16, 20, 21, 22, 24, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 43, 44, 45, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 91, 92, 94, 95, 96], "default": [1, 8, 10, 12, 23, 31, 45, 46, 48, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 86, 88, 89, 90, 92, 93, 95, 98], "i": [1, 8, 10, 11, 12, 14, 16, 17, 18, 19, 20, 22, 23, 24, 25, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98], "0": [1, 8, 10, 12, 13, 15, 16, 18, 19, 22, 23, 24, 25, 26, 28, 29, 31, 33, 35, 36, 37, 38, 39, 40, 41, 46, 47, 49, 51, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 92, 93, 95, 96, 98], "e": [1, 9, 12, 19, 20, 25, 31, 33, 34, 35, 37, 38, 39, 41, 42, 43, 44, 48, 53, 55, 56, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74, 76, 77, 79, 80, 86, 88, 91, 92, 93, 94, 95, 96, 97, 98], "provid": [1, 9, 12, 16, 20, 23, 24, 25, 26, 29, 30, 31, 33, 35, 39, 41, 42, 43, 44, 51, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 85, 86, 88, 89, 90, 91, 92, 93, 95, 97, 98], "analysi": [1, 9, 12, 14, 17, 23, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 43, 46, 53, 58, 63, 69, 70, 71, 72, 75, 77, 80, 86, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98], "should": [1, 9, 10, 11, 12, 17, 20, 23, 25, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "ifo": [1, 13, 16, 25, 28, 29, 31, 38, 39, 41, 53, 54, 56, 58, 59, 61, 63, 65, 66, 69, 70, 71, 72, 74, 76, 77, 80, 85, 86, 88, 89, 90, 92, 93, 94, 95, 98], "respect": [1, 8, 10, 18, 31, 33, 40, 42, 53, 55, 63, 67, 69, 74, 76, 84, 92, 93, 96], "If": [1, 10, 11, 12, 14, 20, 23, 24, 26, 29, 30, 31, 32, 33, 34, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 83, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98], "invers": [1, 23, 29, 31, 33, 34, 35, 36, 38, 39, 41, 50, 53, 55, 56, 57, 60, 63, 64, 69, 70, 72, 73, 74, 75, 76, 80, 87, 90, 92, 93, 98], "length": [1, 10, 18, 22, 23, 25, 29, 31, 33, 34, 35, 36, 38, 39, 41, 44, 45, 52, 53, 56, 57, 58, 60, 61, 63, 64, 66, 68, 70, 71, 72, 74, 75, 76, 77, 80, 83, 88, 90, 92, 93, 94, 95, 98], "given": [1, 8, 10, 12, 16, 18, 25, 29, 31, 43, 44, 47, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "pad": [1, 18, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 58, 61, 63, 72, 76, 77, 78, 80, 90, 92, 93, 94, 95, 98], "half": [1, 31, 60, 65, 72, 74, 76, 80, 90, 98], "account": [1, 10, 11, 16, 22, 31, 33, 41, 43, 46, 48, 53, 55, 56, 58, 69, 72, 73, 74, 80, 91, 92, 93, 94, 95], "wrap": [1, 31, 53, 58, 61, 66, 76, 93], "around": [1, 28, 31, 33, 41, 53, 54, 55, 56, 58, 59, 63, 73, 74, 76, 77, 80, 81, 86, 92, 93], "effect": [1, 10, 13, 20, 31, 33, 40, 53, 56, 58, 61, 64, 66, 76, 80, 92, 93], "estim": [1, 9, 14, 21, 30, 31, 33, 34, 35, 38, 39, 41, 43, 44, 50, 53, 55, 56, 58, 60, 61, 63, 64, 69, 71, 72, 73, 74, 76, 77, 80, 81, 87, 90, 93, 98], "data": [1, 9, 12, 14, 17, 26, 28, 30, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 80, 81, 86, 88, 89, 90, 91, 92, 94, 96, 98], "condit": [1, 31, 42, 53, 55, 63, 64, 72, 74, 76, 80, 88, 90], "low": [1, 10, 14, 18, 22, 24, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 55, 58, 61, 63, 65, 66, 68, 69, 70, 74, 75, 76, 78, 80, 87, 88, 90, 92, 93, 94, 98], "freq": [1, 13, 31, 53, 58, 63, 72, 73, 74, 76, 80, 90, 98], "flow": [1, 24, 31, 36, 46, 51, 52, 58, 70, 73, 74, 76, 78, 80, 84, 90, 98], "frequenc": [1, 8, 10, 13, 14, 22, 23, 24, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 43, 52, 53, 55, 58, 61, 63, 65, 68, 70, 72, 73, 74, 75, 76, 78, 80, 81, 84, 90, 92, 93, 94, 97, 98], "cutoff": [1, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 53, 63, 65, 68, 70, 73, 74, 75, 76, 80, 90, 92, 93, 94, 97, 98], "need": [1, 8, 10, 11, 12, 18, 23, 26, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 71, 72, 73, 75, 76, 77, 79, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "when": [1, 8, 10, 12, 15, 18, 22, 23, 29, 31, 32, 33, 34, 35, 37, 38, 39, 41, 42, 44, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 83, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "creat": [1, 12, 17, 18, 19, 23, 29, 31, 32, 35, 36, 37, 38, 39, 40, 41, 42, 44, 45, 46, 48, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 73, 74, 76, 77, 80, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98], "fake": [1, 31, 33, 35, 36, 72, 77, 78, 80, 90, 91, 98], "strain": [1, 9, 13, 16, 24, 29, 31, 33, 34, 35, 36, 38, 39, 41, 50, 51, 52, 53, 54, 58, 59, 61, 63, 65, 70, 75, 76, 77, 80, 81, 83, 88, 90, 92, 93, 94, 98], "model": [1, 3, 21, 32, 33, 36, 37, 40, 42, 46, 48, 53, 56, 60, 61, 64, 69, 70, 72, 74, 76, 77, 78, 80, 85, 90, 91, 92, 93, 94, 98], "": [1, 8, 13, 14, 15, 18, 19, 20, 23, 24, 28, 29, 31, 32, 33, 34, 35, 36, 37, 39, 42, 44, 48, 51, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "select": [1, 10, 18, 30, 31, 43, 45, 53, 54, 56, 57, 58, 59, 66, 69, 71, 75, 76, 77, 80, 84, 90, 98], "method": [1, 10, 16, 29, 31, 33, 35, 42, 44, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 70, 72, 74, 75, 76, 77, 80, 81, 86, 88, 89, 90, 93, 94, 95, 97, 98], "gener": [1, 8, 9, 16, 17, 24, 26, 28, 30, 31, 33, 35, 36, 37, 38, 39, 41, 42, 44, 48, 50, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 67, 68, 70, 71, 72, 73, 74, 77, 81, 84, 86, 88, 97], "file": [1, 9, 11, 12, 17, 20, 28, 32, 34, 35, 36, 37, 38, 39, 41, 44, 45, 46, 53, 55, 56, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 85], "asd": [1, 10, 31, 70, 71, 77, 80, 90, 92, 98], "mutual": [1, 31, 80, 90, 98], "exclus": [1, 31, 77, 80, 90, 98], "get": [1, 12, 15, 16, 29, 31, 33, 34, 38, 44, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 83, 86, 90, 93, 95, 96, 98], "analyt": [1, 3, 4, 18, 31, 33, 40, 41, 50, 53, 55, 60, 67, 68, 75, 80, 81, 90, 98], "choos": [1, 8, 10, 18, 31, 33, 37, 39, 41, 52, 53, 56, 57, 60, 63, 66, 69, 76, 77, 80, 81, 83, 86, 89, 90, 92, 93, 97, 98], "ani": [1, 10, 11, 13, 14, 18, 20, 25, 30, 31, 35, 37, 38, 41, 42, 43, 44, 49, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 70, 71, 72, 73, 74, 75, 76, 77, 80, 84, 85, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97], "avail": [1, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 29, 30, 31, 32, 42, 44, 46, 47, 48, 49, 52, 53, 54, 56, 57, 59, 60, 63, 65, 66, 70, 71, 76, 77, 78, 80, 83, 86, 88, 90, 93, 94, 95, 97, 98], "extra": [1, 12, 31, 36, 46, 56, 61, 64, 66, 76, 77, 80, 90, 91, 93, 97, 98], "arg": [1, 31, 32, 36, 37, 38, 39, 41, 45, 53, 55, 56, 57, 60, 61, 63, 64, 66, 69, 72, 75, 76, 77, 80, 84, 90, 92, 98], "detector": [1, 10, 13, 14, 15, 18, 26, 29, 30, 31, 33, 35, 50, 56, 58, 59, 60, 61, 63, 65, 66, 70, 71, 72, 74, 75, 76, 77, 78, 81, 85, 87, 90, 92, 93, 94, 95, 96], "param": [1, 31, 33, 35, 36, 37, 53, 54, 55, 56, 57, 60, 61, 62, 63, 64, 66, 69, 71, 72, 73, 74, 76, 77, 80, 90, 91, 92, 98], "valu": [1, 10, 12, 18, 22, 23, 25, 29, 31, 33, 36, 43, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "argument": [1, 10, 12, 19, 22, 26, 31, 32, 33, 34, 38, 39, 40, 41, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 84, 86, 88, 89, 90, 91, 92, 93, 95, 97, 98], "pass": [1, 8, 12, 29, 31, 33, 34, 35, 38, 39, 41, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 84, 88, 90, 91, 92, 93, 94, 95, 98], "ascii": [1, 10, 22, 31, 53, 61, 64, 70, 74, 80, 90, 93, 98], "averag": [1, 31, 33, 53, 56, 61, 64, 69, 70, 72, 80, 90, 94, 95, 98], "mean": [1, 8, 18, 31, 33, 34, 35, 36, 38, 42, 44, 53, 55, 56, 58, 60, 63, 66, 69, 70, 74, 75, 76, 77, 80, 88, 90, 92, 93, 94, 96, 98], "median": [1, 29, 31, 33, 34, 35, 36, 38, 39, 41, 54, 56, 70, 71, 72, 80, 90, 92, 93, 94, 98], "segment": [1, 31, 33, 34, 35, 36, 38, 39, 41, 50, 53, 56, 58, 60, 63, 65, 70, 71, 72, 74, 75, 76, 78, 80, 86, 88, 90, 92, 93, 94, 95, 98], "requir": [1, 10, 12, 19, 22, 23, 31, 33, 35, 39, 40, 41, 42, 43, 44, 46, 47, 48, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 76, 77, 80, 84, 86, 87, 89, 90, 91, 92, 93, 95, 96, 97, 98], "stride": [1, 29, 31, 33, 34, 35, 36, 38, 39, 41, 57, 66, 70, 75, 80, 90, 92, 93, 94, 98], "separ": [1, 10, 20, 22, 31, 35, 43, 44, 52, 53, 55, 56, 60, 62, 63, 64, 66, 70, 72, 74, 76, 77, 80, 88, 90, 92, 93, 95, 96, 98], "between": [1, 8, 10, 12, 18, 19, 29, 31, 35, 43, 44, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 85, 86, 87, 90, 91, 92, 93, 95, 96, 97, 98], "consecut": [1, 31, 70, 74, 80, 90, 98], "num": [1, 18, 31, 53, 55, 56, 63, 66, 71, 74, 76, 77, 80, 90, 91, 93, 95, 97, 98], "onli": [1, 8, 10, 12, 18, 23, 25, 29, 31, 33, 34, 35, 38, 40, 41, 42, 44, 48, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98], "thi": [1, 8, 10, 11, 12, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "number": [1, 10, 14, 18, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 41, 44, 48, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98], "more": [1, 10, 22, 23, 29, 30, 31, 32, 33, 35, 40, 42, 43, 44, 46, 53, 55, 56, 57, 58, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 86, 88, 90, 91, 92, 93, 95, 96, 98], "than": [1, 10, 22, 31, 33, 40, 41, 42, 43, 44, 48, 49, 53, 55, 56, 60, 61, 62, 63, 64, 66, 70, 71, 72, 73, 74, 76, 77, 78, 80, 86, 88, 90, 91, 92, 93, 95, 96, 98], "make": [1, 10, 11, 16, 21, 22, 28, 31, 32, 33, 35, 43, 44, 46, 47, 48, 53, 55, 56, 58, 61, 63, 64, 65, 70, 71, 72, 73, 76, 77, 79, 80, 81, 85, 87, 88, 90, 91, 92, 93, 98], "excess": [1, 31, 80, 90, 98], "enough": [1, 31, 33, 42, 64, 72, 74, 76, 80, 90, 92, 98], "code": [1, 10, 11, 12, 13, 14, 15, 17, 18, 19, 24, 25, 28, 31, 33, 42, 44, 46, 51, 52, 53, 56, 57, 64, 66, 69, 70, 71, 72, 73, 75, 76, 77, 82, 83, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "fail": [1, 31, 36, 56, 61, 63, 73, 76, 77, 80, 87, 90, 91, 92, 98], "maximum": [1, 10, 29, 31, 39, 48, 53, 55, 56, 58, 60, 62, 63, 64, 67, 69, 70, 71, 72, 73, 74, 76, 77, 80, 90, 92, 93, 98], "impuls": [1, 31, 70, 78, 80, 90, 98], "respons": [1, 13, 16, 29, 31, 37, 53, 56, 58, 63, 65, 70, 71, 72, 74, 76, 77, 78, 80, 83, 86, 89, 90, 93, 95, 96, 97, 98], "overwhiten": [1, 31, 63, 72, 75, 80, 90, 98], "filter": [1, 10, 13, 22, 28, 29, 30, 31, 33, 34, 36, 38, 43, 50, 53, 63, 65, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 80, 81, 83, 92, 93, 97, 98], "invpsd": [1, 31, 72, 74, 80, 90, 98], "trunc": [1, 31, 80, 90, 98], "hann": [1, 31, 70, 74, 80, 90, 98], "what": [1, 10, 13, 16, 20, 23, 29, 31, 33, 35, 42, 44, 46, 53, 55, 56, 60, 61, 63, 64, 65, 66, 71, 76, 77, 78, 80, 81, 84, 85, 86, 88, 90, 91, 92, 93, 95, 96, 98], "truncat": [1, 31, 55, 63, 65, 66, 70, 74, 80, 90, 93, 98], "appli": [1, 10, 16, 22, 31, 33, 34, 38, 42, 44, 53, 55, 56, 58, 60, 61, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77, 78, 80, 81, 86, 88, 90, 91, 92, 93, 96, 98], "hard": [1, 31, 55, 70, 73, 74, 80, 89, 90, 92, 97, 98], "output": [1, 20, 23, 25, 26, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 46, 53, 57, 58, 59, 61, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98], "write": [1, 17, 29, 31, 42, 44, 53, 55, 56, 57, 60, 61, 63, 64, 65, 66, 71, 73, 76, 77, 78, 79, 80, 81, 84, 85, 86, 90, 91, 92, 93, 95, 98], "specifi": [1, 10, 12, 22, 29, 31, 33, 35, 44, 45, 46, 48, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 86, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98], "psdvar": [1, 31, 80, 90, 98], "calcul": [1, 9, 22, 24, 29, 30, 31, 33, 37, 39, 41, 43, 53, 55, 56, 57, 58, 60, 61, 63, 64, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 85, 86, 87, 90, 91, 92, 93, 96, 98], "variabl": [1, 18, 29, 31, 33, 35, 36, 37, 45, 47, 53, 55, 56, 58, 61, 63, 64, 66, 70, 71, 76, 77, 80, 86, 90, 92, 93, 95, 98], "short": [1, 31, 53, 58, 70, 77, 80, 87, 90, 95, 98], "outlier": [1, 31, 70, 80, 90, 98], "remov": [1, 11, 12, 20, 28, 31, 33, 41, 48, 53, 56, 61, 63, 66, 70, 71, 72, 73, 74, 76, 77, 78, 80, 86, 87, 88, 89, 90, 92, 93, 96, 98], "long": [1, 31, 33, 61, 64, 65, 70, 72, 76, 80, 88, 90, 92, 94, 95, 98], "durat": [1, 10, 22, 25, 28, 29, 31, 33, 36, 53, 54, 56, 58, 59, 62, 68, 70, 72, 73, 74, 76, 77, 78, 80, 83, 90, 92, 95, 98], "hertz": [1, 31, 72, 74, 80, 90, 98], "minimum": [1, 29, 31, 53, 55, 56, 60, 62, 63, 64, 69, 70, 71, 72, 73, 76, 80, 88, 90, 92, 93, 95, 98], "consid": [1, 30, 31, 33, 53, 56, 57, 58, 60, 61, 66, 70, 72, 73, 75, 76, 77, 80, 88, 90, 93, 95, 98], "bandpass": [1, 31, 70, 80, 90, 98], "high": [1, 10, 18, 24, 28, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 55, 56, 58, 63, 69, 72, 74, 75, 76, 78, 80, 90, 92, 93, 94, 98], "obtain": [1, 31, 33, 44, 55, 56, 61, 64, 69, 72, 73, 75, 76, 77, 78, 80, 86, 90, 93, 95, 98], "h": [1, 28, 29, 31, 32, 34, 38, 39, 41, 45, 55, 58, 61, 63, 65, 67, 72, 76, 77, 80, 86, 90, 93, 95, 97, 98], "t": [1, 12, 13, 15, 20, 21, 24, 29, 31, 36, 37, 38, 39, 41, 51, 52, 53, 58, 59, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 77, 80, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 97, 98], "These": [1, 11, 15, 16, 20, 22, 23, 25, 26, 29, 30, 31, 32, 33, 41, 42, 44, 47, 48, 53, 55, 57, 61, 63, 64, 65, 66, 73, 75, 76, 77, 78, 80, 82, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "either": [1, 10, 31, 40, 41, 42, 43, 46, 48, 52, 53, 55, 56, 57, 58, 59, 61, 63, 64, 65, 66, 71, 74, 75, 76, 77, 78, 80, 88, 89, 90, 91, 92, 93, 98], "read": [1, 9, 10, 17, 22, 28, 29, 30, 31, 33, 35, 42, 44, 48, 50, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 96, 98], "ie": [1, 29, 31, 66, 73, 77, 86, 88, 90, 93, 95, 96, 98], "group": [1, 10, 22, 31, 42, 53, 55, 56, 57, 58, 60, 61, 63, 66, 69, 71, 73, 74, 76, 77, 80, 82, 87, 88, 91, 92, 93, 94, 95, 96], "support": [1, 8, 10, 21, 31, 39, 40, 41, 42, 43, 44, 52, 53, 55, 57, 58, 60, 61, 63, 64, 65, 66, 67, 72, 73, 74, 76, 77, 78, 80, 86, 88, 94, 96], "multipl": [1, 12, 22, 23, 25, 31, 33, 34, 42, 43, 44, 48, 53, 55, 56, 60, 61, 63, 64, 66, 70, 73, 76, 77, 80, 81, 86, 87, 88, 89, 90, 92, 93, 95, 96, 97, 98], "simultan": [1, 11, 31], "highpass": [1, 31, 53, 58, 63, 74, 80, 81, 90, 98], "corrupt": [1, 28, 29, 31, 33, 58, 74, 78, 80, 90, 93, 98], "8": [1, 13, 24, 28, 29, 31, 33, 34, 35, 38, 39, 41, 53, 55, 56, 58, 62, 63, 66, 67, 70, 71, 73, 74, 76, 77, 79, 80, 90, 92, 93, 94, 95, 96, 98], "taper": [1, 29, 31, 33, 35, 65, 72, 74, 76, 80, 90, 98], "zero": [1, 23, 24, 29, 31, 53, 55, 56, 58, 63, 64, 66, 69, 70, 71, 72, 74, 75, 76, 77, 80, 83, 90, 93, 98], "suppli": [1, 31, 56, 58, 71, 73, 77, 80, 86, 89, 90, 95, 96, 97, 98], "window": [1, 10, 19, 31, 33, 56, 58, 65, 66, 70, 71, 72, 74, 76, 77, 80, 87, 88, 90, 93, 95, 98], "sampl": [1, 10, 22, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 84, 90, 91, 92, 93, 94, 97, 98], "rate": [1, 10, 22, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 50, 56, 57, 58, 61, 62, 63, 65, 68, 69, 70, 72, 74, 76, 77, 78, 80, 90, 92, 93, 94, 98], "hz": [1, 8, 13, 24, 31, 33, 34, 38, 51, 52, 53, 55, 56, 58, 70, 74, 76, 78, 80, 83, 84, 90, 98], "channel": [1, 26, 29, 31, 33, 34, 35, 36, 37, 38, 39, 41, 59, 65, 70, 72, 74, 76, 77, 78, 80, 88, 90, 92, 93, 94, 95, 96, 98], "contain": [1, 10, 11, 12, 19, 20, 22, 26, 29, 30, 31, 32, 33, 35, 36, 37, 38, 39, 41, 42, 43, 46, 53, 54, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "gravit": [1, 9, 14, 23, 31, 34, 38, 39, 41, 43, 53, 59, 63, 67, 69, 76, 77, 80, 81, 84, 85, 88, 89, 90, 92, 95, 98], "frame": [1, 12, 18, 20, 28, 29, 31, 32, 34, 36, 37, 38, 39, 41, 45, 50, 53, 63, 64, 65, 72, 76, 77, 80, 81, 85, 86, 88, 90, 92, 93, 94, 95, 96, 98], "cach": [1, 12, 29, 31, 53, 59, 63, 72, 76, 77, 80, 86, 90, 93, 95, 98], "frame_cach": [1, 31, 80, 90, 98], "locat": [1, 10, 22, 26, 29, 31, 33, 34, 35, 38, 41, 43, 46, 47, 53, 56, 57, 58, 59, 63, 64, 66, 71, 73, 74, 75, 76, 77, 80, 81, 83, 86, 89, 90, 92, 93, 94, 95, 96, 98], "frame_fil": [1, 26, 31, 59, 77, 80, 90, 98], "list": [1, 10, 12, 15, 16, 20, 22, 26, 29, 31, 33, 35, 44, 45, 48, 52, 53, 54, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 82, 83, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "hdf": [1, 12, 17, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 45, 50, 52, 53, 55, 56, 59, 60, 61, 63, 64, 65, 69, 71, 73, 74, 76, 77, 78, 80, 82, 87, 89, 90, 91, 93, 94, 98], "store": [1, 10, 22, 25, 31, 42, 48, 50, 53, 55, 56, 58, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 86, 88, 89, 90, 92, 93, 96, 97, 98], "hdf_store_fil": [1, 31], "seri": [1, 29, 31, 41, 43, 56, 58, 59, 61, 63, 65, 70, 71, 72, 74, 75, 76, 80, 81, 84, 90, 93, 98], "format": [1, 10, 16, 20, 25, 31, 37, 42, 52, 53, 54, 55, 56, 60, 61, 62, 63, 65, 66, 67, 69, 71, 73, 74, 76, 77, 78, 79, 80, 83, 84, 87, 88, 89, 90, 93, 96, 98], "type": [1, 15, 19, 23, 24, 26, 28, 29, 31, 34, 35, 43, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76, 77, 78, 80, 83, 84, 86, 87, 88, 90, 92, 93, 94, 95, 96, 97, 98], "frame_typ": [1, 29, 31, 59, 80, 90, 98], "replac": [1, 11, 19, 31, 34, 44, 48, 53, 63, 74, 77, 78, 80, 86, 88, 90, 92, 93, 94, 95, 96, 98], "datafind": [1, 31, 50, 53, 59, 80, 85, 88, 90, 93, 94, 95, 96, 97, 98], "siev": [1, 31, 59, 80, 90, 98], "frame_siev": [1, 31, 80, 90, 98], "where": [1, 11, 12, 15, 20, 23, 29, 31, 33, 42, 43, 44, 47, 48, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 69, 71, 73, 74, 75, 76, 77, 79, 80, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98], "url": [1, 12, 28, 29, 31, 59, 66, 77, 80, 84, 86, 88, 90, 93, 94, 95, 96, 98], "match": [1, 10, 12, 22, 25, 29, 31, 51, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 70, 71, 72, 73, 74, 75, 76, 77, 78, 81, 86, 87, 92, 93, 97, 98], "regular": [1, 11, 31, 50, 53, 59, 80, 86, 90, 93, 98], "express": [1, 31, 59, 80, 86, 90, 98], "choic": [1, 8, 10, 22, 31, 46, 53, 56, 57, 60, 67, 69, 70, 74, 76, 80, 86, 89, 90, 97, 98], "nois": [1, 9, 10, 24, 31, 33, 35, 36, 38, 39, 43, 50, 52, 53, 56, 58, 63, 69, 70, 78, 80, 81, 90, 91, 92, 98], "zeronois": [1, 31, 80, 90, 98], "seed": [1, 10, 18, 22, 24, 31, 32, 33, 34, 35, 36, 38, 39, 41, 51, 52, 55, 60, 61, 63, 64, 68, 72, 77, 78, 80, 90, 91, 92, 93, 97, 98], "color": [1, 15, 31, 32, 33, 36, 37, 39, 41, 50, 51, 52, 53, 68, 77, 80, 90, 92, 98], "fake_strain_flow": [1, 31, 80, 90, 98], "fake_strain_filter_dur": [1, 31, 80, 90, 98], "fake_strain_sample_r": [1, 31, 80, 90, 98], "inject": [1, 9, 10, 22, 30, 31, 35, 37, 43, 50, 53, 56, 60, 61, 63, 69, 71, 72, 74, 76, 80, 81, 88, 90, 93, 95, 96, 98], "parametersof": [1, 31, 80, 90, 98], "cbc": [1, 9, 10, 12, 15, 29, 31, 33, 53, 55, 65, 66, 69, 70, 76, 77, 80, 84, 85, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98], "signal": [1, 10, 14, 24, 30, 31, 33, 35, 36, 37, 39, 41, 43, 53, 56, 58, 63, 64, 65, 69, 71, 72, 76, 77, 80, 81, 84, 85, 89, 90, 91, 93, 95, 98], "ad": [1, 14, 31, 33, 34, 38, 42, 44, 47, 53, 55, 56, 60, 61, 63, 65, 66, 72, 73, 74, 76, 77, 79, 80, 82, 87, 88, 89, 90, 91, 93, 97, 98], "sgburst": [1, 31, 76, 77, 80, 90, 98], "sine": [1, 31, 55, 56, 65, 75, 76, 80, 90, 98], "burst": [1, 30, 31, 65, 76, 80, 90, 95, 98], "add": [1, 11, 12, 19, 22, 25, 31, 33, 36, 43, 46, 48, 49, 53, 55, 56, 57, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "scale": [1, 31, 53, 55, 56, 60, 62, 64, 65, 68, 69, 71, 73, 77, 80, 90, 98], "factor": [1, 9, 16, 31, 33, 43, 53, 55, 56, 57, 58, 60, 63, 64, 65, 69, 71, 72, 73, 75, 76, 77, 80, 87, 90, 92, 93, 98], "val": [1, 31, 56, 61, 64, 70, 71, 73], "divid": [1, 10, 23, 31, 33, 56, 58, 61, 72, 73, 80, 90, 98], "befor": [1, 12, 23, 31, 33, 34, 37, 38, 41, 47, 48, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 70, 72, 73, 74, 76, 77, 78, 80, 82, 88, 90, 91, 92, 93, 95, 97, 98], "typic": [1, 12, 19, 26, 31, 46, 53, 57, 58, 64, 69, 74, 76, 80, 90, 93, 98], "similar": [1, 20, 31, 33, 36, 42, 45, 53, 56, 57, 61, 65, 66, 73, 74, 77, 80, 88, 90, 91, 96, 97, 98], "f": [1, 8, 10, 22, 25, 29, 31, 33, 37, 38, 39, 41, 53, 55, 58, 63, 66, 69, 70, 71, 72, 73, 75, 76, 80, 83, 84, 88, 89, 90, 93, 98], "ref": [1, 12, 31, 80, 90, 98], "an": [1, 10, 12, 14, 16, 18, 20, 22, 23, 25, 26, 28, 29, 31, 33, 36, 40, 42, 43, 44, 45, 46, 48, 49, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "xml": [1, 10, 29, 31, 56, 65, 66, 70, 71, 73, 76, 77, 80, 82, 87, 88, 89, 90, 93, 94, 95, 97, 98], "final": [1, 20, 31, 33, 35, 42, 44, 46, 53, 55, 56, 60, 63, 64, 72, 73, 74, 76, 77, 80, 90, 93, 94, 96, 98], "overrid": [1, 19, 23, 31, 42, 44, 53, 61, 63, 64, 66, 74, 76, 77, 80, 90, 91, 92, 93, 95, 98], "f_final": [1, 8, 31, 36, 76, 80, 90, 98], "field": [1, 31, 53, 61, 63, 64, 65, 66, 71, 76, 80, 90, 96, 98], "gate": [1, 31, 50, 53, 63, 74, 76, 77, 78, 80, 90, 98], "text": [1, 20, 31, 42, 53, 61, 70, 71, 74, 79, 80, 90, 93, 98], "each": [1, 10, 14, 20, 22, 23, 25, 26, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "line": [1, 8, 12, 20, 31, 36, 37, 41, 45, 50, 53, 55, 56, 57, 60, 61, 63, 65, 71, 73, 74, 76, 77, 78, 85, 86, 89, 90, 91, 92, 93, 94, 95, 97, 98], "unit": [1, 16, 18, 29, 31, 53, 55, 56, 58, 63, 64, 67, 69, 70, 76, 80, 98], "gps_time": [1, 31, 53, 72, 80, 90, 98], "zeros_half_width": [1, 31, 80, 90, 98], "pad_half_width": [1, 31, 80, 90, 98], "autog": [1, 31, 77, 80, 90, 98], "threshold": [1, 29, 31, 53, 56, 58, 60, 63, 65, 69, 72, 73, 75, 76, 80, 87, 90, 93, 98], "sigma": [1, 31, 53, 55, 56, 58, 69, 73, 76, 77, 80, 90, 98], "find": [1, 12, 20, 31, 53, 55, 56, 59, 60, 63, 67, 69, 70, 72, 73, 74, 76, 77, 80, 81, 85, 86, 88, 90, 93, 94, 95, 98], "glitch": [1, 31, 70, 72, 78, 80, 90, 98], "produc": [1, 20, 25, 31, 42, 53, 55, 56, 66, 69, 70, 71, 73, 74, 75, 76, 77, 80, 86, 88, 90, 92, 93, 95, 96, 98], "deviat": [1, 18, 31, 35, 43, 53, 60, 69, 76, 80, 90, 98], "larger": [1, 31, 50, 53, 55, 56, 61, 63, 66, 72, 73, 76, 77, 80, 90, 92, 98], "whiten": [1, 13, 31, 53, 60, 63, 70, 72, 74, 80, 81, 90, 98], "max": [1, 10, 22, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 50, 53, 55, 58, 60, 61, 62, 63, 64, 69, 71, 74, 80, 83, 84, 87, 88, 89, 90, 92, 93, 94, 95, 98], "iter": [1, 31, 32, 33, 36, 37, 39, 44, 53, 56, 58, 60, 61, 62, 63, 64, 65, 71, 73, 77, 80, 90, 92, 98], "cluster": [1, 10, 22, 29, 30, 31, 33, 34, 48, 53, 56, 58, 66, 71, 72, 77, 80, 86, 90, 91, 92, 93, 95, 98], "detect": [1, 14, 30, 31, 33, 54, 56, 58, 71, 72, 76, 77, 80, 84, 88, 89, 90, 92, 93, 98], "width": [1, 31, 53, 60, 62, 63, 71, 73, 76, 80, 90, 98], "after": [1, 12, 23, 31, 32, 33, 34, 36, 37, 38, 39, 41, 48, 53, 55, 58, 63, 64, 65, 66, 69, 71, 73, 76, 77, 80, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "over": [1, 10, 31, 33, 35, 38, 39, 43, 53, 56, 58, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 87, 90, 92, 93, 94, 95, 98], "ignor": [1, 31, 33, 55, 56, 58, 60, 61, 63, 70, 75, 76, 77, 80, 86, 90, 91, 92, 95, 96, 98], "avoid": [1, 29, 31, 42, 43, 44, 66, 72, 73, 76, 80, 88, 90, 92, 98], "ring": [1, 31, 53, 56, 80, 90, 98], "paint": [1, 31, 72, 74, 80, 90, 98], "normal": [1, 31, 32, 40, 53, 55, 56, 58, 59, 60, 63, 64, 68, 69, 72, 73, 74, 75, 76, 77, 80, 85, 90, 93, 95, 96, 97, 98], "constant": [1, 31, 43, 53, 55, 58, 63, 68, 72, 74, 76, 80, 89, 90, 97, 98], "zpk": [1, 31, 50, 53, 80, 90, 98], "z": [1, 8, 12, 18, 31, 32, 33, 36, 37, 38, 39, 41, 45, 53, 58, 60, 63, 66, 67, 69, 70, 76, 79, 80, 90, 92, 98], "pole": [1, 31, 53, 55, 58, 72, 80, 83, 90, 98], "gain": [1, 10, 31, 43, 58, 72, 80, 90, 98], "A": [1, 8, 9, 10, 14, 15, 18, 23, 29, 31, 35, 37, 42, 43, 52, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 82, 84, 86, 87, 88, 89, 90, 96, 97, 98], "transfer": [1, 19, 31, 58, 72, 80, 90, 93, 98], "function": [1, 4, 8, 15, 16, 18, 20, 31, 35, 37, 40, 41, 42, 43, 44, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98], "p": [1, 18, 19, 31, 32, 37, 46, 48, 49, 53, 55, 56, 58, 60, 62, 63, 67, 69, 71, 76, 80, 90, 91, 93, 95, 98], "k": [1, 31, 53, 55, 56, 58, 60, 62, 63, 66, 69, 71, 80, 90, 93, 98], "centraltim": [1, 31], "halfdur": [1, 31], "taperdur": [1, 31], "one": [1, 12, 14, 19, 22, 23, 25, 29, 31, 33, 35, 36, 37, 42, 43, 44, 46, 49, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98], "first": [1, 8, 12, 18, 19, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 45, 46, 48, 49, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 85, 86, 88, 89, 90, 92, 93, 95, 96, 97, 98], "allow": [1, 8, 10, 16, 19, 23, 25, 29, 31, 35, 43, 45, 53, 55, 56, 62, 63, 64, 66, 70, 72, 73, 74, 76, 77, 80, 85, 86, 88, 90, 93, 98], "sharper": [1, 31], "sinc": [1, 11, 12, 18, 29, 31, 33, 34, 38, 42, 44, 48, 60, 61, 62, 63, 64, 66, 76, 89, 91, 92, 93, 96, 98], "blur": [1, 31], "comput": [1, 8, 19, 23, 31, 32, 33, 34, 37, 44, 46, 48, 52, 53, 55, 56, 57, 58, 60, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 89, 90, 92, 93, 96, 98], "prior": [1, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 53, 55, 56, 60, 61, 63, 64, 66, 69, 77, 91, 92, 93], "fft": [1, 24, 29, 31, 36, 50, 53, 70, 72, 75, 76, 81, 83, 90, 93], "ing": [1, 31, 58, 72], "quer": [1, 31], "qualiti": [1, 31, 58, 63, 72, 76, 85, 90, 92, 93, 95, 96], "dq": [1, 15, 31, 50, 56, 63, 85, 86, 92], "dq_segment_nam": [1, 31], "statu": [1, 26, 30, 31, 53, 57, 59, 63, 72, 91, 92, 93, 95], "flag": [1, 8, 10, 26, 31, 53, 58, 59, 63, 76, 77, 80, 81, 82, 86, 88, 92, 93], "queri": [1, 30, 31, 53, 54, 59, 63, 77, 80, 81, 85, 86, 90, 93, 96, 98], "sourc": [1, 10, 11, 12, 13, 15, 18, 24, 26, 28, 29, 30, 31, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 81, 83, 84, 86, 88, 89, 90, 92, 93, 96, 97, 98], "gwosc": [1, 15, 28, 31, 34, 38, 50, 53, 78, 92, 96], "dqsegdb": [1, 15, 31, 53], "look": [1, 31, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 73, 74, 75, 76, 77, 84, 85, 88, 89, 91, 92, 93, 96], "inform": [1, 10, 15, 16, 20, 22, 31, 32, 33, 36, 41, 42, 53, 54, 55, 56, 59, 60, 61, 66, 69, 70, 71, 73, 76, 77, 81, 86, 88, 89, 90, 92, 93, 95, 96, 97, 98], "try": [1, 28, 30, 31, 42, 44, 53, 61, 62, 63, 64, 65, 66, 73, 74, 76, 80, 81, 92, 93], "server": [1, 31, 53, 59, 63, 77, 81, 85, 86, 88, 92, 93, 96], "dq_server": [1, 31], "veto": [1, 24, 31, 50, 53, 71, 77, 88, 90, 94, 95], "defin": [1, 8, 31, 33, 36, 37, 42, 44, 53, 55, 56, 58, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 86, 88, 90, 91, 92, 94, 95], "veto_defin": [1, 31, 53, 77], "path": [1, 10, 11, 12, 18, 22, 25, 26, 29, 31, 34, 38, 47, 48, 49, 53, 55, 56, 59, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 74, 77, 80, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "themselv": [1, 31, 44, 53, 66, 77, 80, 86, 97], "set": [1, 8, 10, 11, 12, 18, 22, 23, 24, 26, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 43, 44, 45, 46, 47, 48, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 97, 98], "cpnest_fil": [2, 42], "infer": [2, 3, 5, 6, 9, 30, 33, 34, 38, 40, 41, 44, 45, 50, 53, 55, 74, 77, 81, 84], "io": [2, 11, 29, 31, 44, 50, 53, 55, 60, 63, 64, 65], "cpnest": [2, 5, 6, 31, 42, 44, 61, 64], "cpnestfil": [2, 42], "base_nested_sampl": [2, 42, 53, 60], "basenestedsamplerfil": [2, 42, 60, 61], "base_sampl": [2, 42, 53, 60], "basesamplerfil": [2, 42, 60, 61], "base_hdf": [2, 42, 53, 60], "baseinferencefil": [2, 42, 60, 61, 63, 64], "dynesty_fil": [2, 42, 61], "dynesti": [2, 5, 6, 31, 35, 36, 37, 38, 41, 42, 44, 53, 60, 77], "dynestyfil": [2, 42, 60, 61], "commonnestedmetadataio": [2, 42, 60, 61], "emcee_fil": [2, 42, 61], "emce": [2, 5, 6, 31, 32, 42, 44, 53, 60, 92], "emceefil": [2, 42, 60, 61], "base_mcmc": [2, 5, 42, 44, 53, 60], "ensemblemcmcmetadataio": [2, 42, 60, 61], "commonmcmcmetadataio": [2, 42, 60, 61], "emcee_pt_fil": [2, 42, 61], "emcee_pt": [2, 5, 6, 31, 33, 34, 39, 40, 42, 44, 53, 60], "emceeptfil": [2, 42, 60, 61, 64], "base_multitemp": [2, 5, 42, 44, 53, 60], "commonmultitemperedmetadataio": [2, 42, 60, 61], "epsie_fil": [2, 42, 61], "epsi": [2, 5, 6, 31, 42, 44, 53, 60, 62], "epsiefil": [2, 42, 60, 61], "mcmcmetadataio": [2, 42, 60, 61], "multinest_fil": [2, 42, 61], "multinest": [2, 5, 6, 31, 42, 44, 53, 60], "multinestfil": [2, 42, 60, 61], "posterior_fil": [2, 42, 61, 63, 77], "posterior": [2, 32, 33, 36, 37, 38, 39, 41, 53, 60, 63, 64, 69, 71, 77, 91, 92], "posteriorfil": [2, 42, 60, 61], "ptemcee_fil": [2, 42, 61], "ptemce": [2, 5, 6, 31, 42, 44, 53, 60], "ptemceefil": [2, 42, 60, 61, 64], "ultranest_fil": [2, 42, 61], "ultranest": [2, 5, 6, 31, 42, 44, 53, 60], "ultranestfil": [2, 42, 60, 61], "brute_lisa_sky_modes_margin": [3, 31, 43, 63], "brute_marg": [3, 31, 53, 60], "brutelisaskymodesmargin": [3, 31, 60, 63], "brute_parallel_gaussian_margin": [3, 31, 63], "bruteparallelgaussianmargin": [3, 31, 60, 63], "gated_gaussian_margpol": [3, 31, 63], "gated_gaussian_nois": [3, 31, 53, 60], "gatedgaussianmargpol": [3, 31, 60, 63], "gatedgaussiannois": [3, 31, 60, 63], "gaussian_nois": [3, 31, 33, 38, 43, 53, 60], "gaussiannois": [3, 31, 33, 43, 60, 63], "hierarch": [3, 31, 43, 53, 60, 77], "hierarchicalmodel": [3, 31, 35, 43, 60, 63], "marginalized_hmpolphas": [3, 31, 43, 63], "marginalized_gaussian_nois": [3, 31, 43, 53, 60], "marginalizedhmpolphas": [3, 31, 43, 60, 63], "marginalized_phas": [3, 31, 33, 43, 63, 91, 92], "marginalizedphasegaussiannois": [3, 31, 33, 43, 60, 63], "marginalized_polar": [3, 31, 43, 63], "marginalizedpolar": [3, 31, 43, 60, 63], "marginalized_tim": [3, 31, 38, 43, 63], "marginalizedtim": [3, 31, 38, 43, 60, 63], "multi_sign": [3, 31, 43, 63], "multisignalmodel": [3, 31, 43, 60, 63], "rel": [3, 12, 16, 31, 35, 36, 37, 41, 53, 56, 60, 63, 67, 69, 71, 73, 74, 75, 76, 90, 93], "relbin": [3, 31, 43, 53, 60, 92], "relative_tim": [3, 31, 43, 63], "relativetim": [3, 31, 43, 60, 63], "relative_time_dom": [3, 31, 43, 63], "relativetimedom": [3, 31, 60, 63], "single_templ": [3, 31, 41, 43, 53, 60], "singletempl": [3, 31, 41, 43, 60, 63], "test_eggbox": [3, 31, 63], "testeggbox": [3, 31, 60, 63], "test_norm": [3, 31, 32, 40, 63], "testnorm": [3, 31, 32, 60, 63], "test_posterior": [3, 31, 63], "testposterior": [3, 31, 60, 63], "test_prior": [3, 31, 63], "testprior": [3, 31, 60, 63], "test_rosenbrock": [3, 31, 63], "testrosenbrock": [3, 31, 60, 63], "test_volcano": [3, 31, 63], "testvolcano": [3, 31, 60, 63], "advbnsoptimizedsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advdesignsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advearlyhighsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advearlylowsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advlatehighsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advlatelowsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advmidhighsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advmidlowsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "advo3lowt1800545": [4, 31, 53, 70, 80, 90, 98], "advo4intermediatet1800545": [4, 31, 53, 70, 80, 90, 98], "advo4t1800545": [4, 31, 53, 70, 80, 90, 98], "advvirgo": [4, 31, 53, 70, 80, 90, 98], "cosmicexplorerp1600143": [4, 31, 53, 70, 80, 90, 98], "cosmicexplorerpessimisticp1600143": [4, 31, 53, 70, 80, 90, 98], "cosmicexplorerwidebandp1600143": [4, 31, 53, 70, 80, 90, 98], "einsteintelescopep1600143": [4, 31, 53, 70, 80, 90, 98], "geohf": [4, 31, 53, 70, 80, 90, 98], "geo": [4, 31, 53, 70, 80, 90, 98], "kagra128mpct1800545": [4, 31, 53, 70, 80, 90, 98], "kagra25mpct1800545": [4, 31, 53, 70, 80, 90, 98], "kagra80mpct1800545": [4, 31, 53, 70, 80, 90, 98], "kagradesignsensitivityt1600593": [4, 31, 53, 70, 80, 90, 98], "kagraearlysensitivityt1600593": [4, 31, 53, 70, 80, 90, 98], "kagralatesensitivityt1600593": [4, 31, 53, 70, 80, 90, 98], "kagramidsensitivityt1600593": [4, 31, 53, 70, 80, 90, 98], "kagraopeningsensitivityt1600593": [4, 31, 53, 70, 80, 90, 98], "kagra": [4, 16, 31, 53, 70, 80, 90, 98], "tama": [4, 31, 53, 70, 80, 90, 98], "virgo": [4, 14, 15, 16, 30, 31, 53, 54, 70, 78, 80, 90, 92, 96, 98], "aligo140mpct1800545": [4, 31, 53, 70, 80, 90, 98], "aligo175mpct1800545": [4, 31, 53, 70, 80, 90, 98], "aligoaplusdesignsensitivityt1800042": [4, 31, 53, 70, 80, 90, 98], "aligoadvo3lowt1800545": [4, 31, 53, 70, 80, 90, 98], "aligoadvo4intermediatet1800545": [4, 31, 53, 70, 80, 90, 98], "aligoadvo4t1800545": [4, 31, 53, 70, 78, 80, 90, 98], "aligobhbh20deggwinc": [4, 31, 53, 70, 80, 90, 98], "aligobhbh20deg": [4, 31, 53, 70, 80, 90, 98], "aligobnsoptimizedsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligodesignsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligodesignsensitivityt1800044": [4, 31, 53, 70, 80, 90, 98], "aligoearlyhighsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligoearlylowsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligohighfrequencygwinc": [4, 31, 53, 70, 80, 90, 98], "aligohighfrequ": [4, 31, 53, 70, 80, 90, 98], "aligokagra128mpct1800545": [4, 31, 53, 70, 80, 90, 98], "aligokagra25mpct1800545": [4, 31, 53, 70, 80, 90, 98], "aligokagra80mpct1800545": [4, 31, 53, 70, 80, 90, 98], "aligolatehighsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligolatelowsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligomidhighsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligomidlowsensitivityp1200087": [4, 31, 53, 70, 80, 90, 98], "aligonsnsoptgwinc": [4, 31, 53, 70, 80, 90, 98], "aligonsnsopt": [4, 31, 53, 70, 80, 90, 98], "aligonosrmhighpow": [4, 31, 53, 70, 80, 90, 98], "aligonosrmlowpowergwinc": [4, 31, 53, 70, 80, 90, 98], "aligonosrmlowpow": [4, 31, 53, 70, 80, 90, 98], "aligoo3lowt1800545": [4, 31, 53, 70, 80, 90, 98], "aligoquantumbhbh20deg": [4, 31, 53, 70, 80, 90, 98], "aligoquantumhighfrequ": [4, 31, 53, 70, 80, 90, 98], "aligoquantumnsnsopt": [4, 31, 53, 70, 80, 90, 98], "aligoquantumnosrmhighpow": [4, 31, 53, 70, 80, 90, 98], "aligoquantumnosrmlowpow": [4, 31, 53, 70, 80, 90, 98], "aligoquantumzerodethighpow": [4, 31, 53, 70, 80, 90, 98], "aligoquantumzerodetlowpow": [4, 31, 53, 70, 80, 90, 98], "aligotherm": [4, 31, 53, 70, 80, 90, 98], "aligozerodethighpowergwinc": [4, 31, 53, 70, 80, 90, 98], "aligozerodethighpow": [4, 22, 24, 31, 51, 52, 53, 63, 70, 80, 83, 90, 94, 98], "aligozerodetlowpowergwinc": [4, 31, 53, 70, 80, 90, 98], "aligozerodetlowpow": [4, 31, 52, 53, 70, 80, 90, 98], "aligoaligo140mpct1800545": [4, 31, 53, 70, 80, 90, 98], "aligoaligo175mpct1800545": [4, 31, 53, 70, 80, 90, 98], "aligoaligodesignsensitivityt1800044": [4, 31, 33, 35, 53, 70, 80, 90, 98], "aligoaligoo3lowt1800545": [4, 31, 53, 70, 80, 90, 98], "analytical_psd_lisa_tdi_1p5_a": [4, 31, 36, 53, 70, 80, 90, 98], "analytical_spac": [4, 31, 50, 53, 80], "analytical_psd_lisa_tdi_1p5_t": [4, 31, 36, 53, 70, 80, 90, 98], "analytical_psd_lisa_tdi_1p5_xyz": [4, 31, 53, 70, 80, 90, 98], "analytical_psd_lisa_tdi_2p0_xyz": [4, 31, 53, 70, 80, 90, 98], "eligomodel": [4, 31, 53, 70, 80, 90, 98], "eligoshot": [4, 31, 53, 70, 80, 90, 98], "flat_un": [4, 31, 53, 70, 80, 90, 98], "iligomodel": [4, 10, 31, 53, 70, 80, 90, 98], "iligosrd": [4, 31, 53, 70, 80, 90, 98], "iligoseism": [4, 31, 53, 70, 80, 90, 98], "iligoshot": [4, 31, 53, 70, 80, 90, 98], "iligotherm": [4, 31, 53, 70, 80, 90, 98], "sh_transformed_psd_lisa_tdi_xyz": [4, 31, 53, 70, 80, 90, 98], "sampler": [5, 6, 32, 33, 34, 35, 36, 37, 38, 39, 53, 55, 60, 61, 62, 63, 66, 69, 77, 91, 92], "cpnestsampl": [5, 6, 31, 44], "base": [5, 8, 14, 24, 26, 31, 42, 44, 53, 54, 55, 56, 57, 58, 60, 61, 62, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 81, 84, 85, 88, 89, 93, 95], "basesampl": [5, 44, 60, 64], "dummi": [5, 6, 31, 41, 44, 53, 60, 66], "dummysampl": [5, 6, 31, 44, 60, 64], "dynestysampl": [5, 6, 31, 44, 60, 64], "emceeensemblesampl": [5, 6, 31, 42, 44, 60, 64], "ensemblesupport": [5, 44, 60, 64], "basemcmc": [5, 44, 60, 64], "emceeptsampl": [5, 6, 31, 44, 60, 64], "multitemperedsupport": [5, 44, 60, 64], "epsiesampl": [5, 6, 31, 44, 60, 64], "multinestsampl": [5, 6, 31, 44, 60, 64], "ptemceesampl": [5, 6, 31, 44, 60, 64], "ultranestsampl": [5, 6, 31, 44, 60, 64], "align_total_spin": [7, 31, 53, 95], "transform": [7, 18, 23, 33, 34, 35, 36, 37, 38, 39, 50, 55, 57, 58, 63, 64, 70, 73, 74, 76, 77, 85, 90, 92], "aligntotalspin": [7, 31, 50, 53], "aligned_mass_spin_to_cartesian_spin": [7, 31, 53], "alignedmassspintocartesianspin": [7, 31, 50, 53], "cartesian_spin_1_to_spherical_spin_1": [7, 31, 53], "cartesianspin1tosphericalspin1": [7, 31, 50, 53], "cartesian_spin_2_to_spherical_spin_2": [7, 31, 53], "cartesianspin2tosphericalspin2": [7, 31, 50, 53], "cartesian_spin_to_aligned_mass_spin": [7, 31, 53], "cartesianspintoalignedmassspin": [7, 31, 50, 53], "cartesian_spin_to_chi_p": [7, 31, 53], "cartesianspintochip": [7, 31, 50, 53], "cartesian_spin_to_precession_mass_spin": [7, 31, 53], "cartesianspintoprecessionmassspin": [7, 31, 50, 53], "cartesian_to_spher": [7, 31, 50, 53], "cartesiantospher": [7, 31, 50, 53], "chirp_distance_to_dist": [7, 31, 53], "chirpdistancetodist": [7, 31, 50, 53], "custom": [7, 20, 31, 33, 35, 36, 37, 41, 47, 53, 55, 61, 62, 63, 76, 92, 95], "customtransform": [7, 31, 50, 53], "distance_to_chirp_dist": [7, 31, 53], "distancetochirpdist": [7, 31, 50, 53], "distance_to_redshift": [7, 31, 53], "distancetoredshift": [7, 31, 50, 53], "expon": [7, 31, 50, 53, 63, 90, 98], "lambda_from_multiple_tov_fil": [7, 31, 53], "lambdafrommultipletovfil": [7, 31, 50, 53], "lambda_from_tov_fil": [7, 31, 53], "lambdafromtovfil": [7, 31, 50, 53], "log": [7, 10, 13, 19, 22, 29, 31, 32, 41, 42, 49, 50, 53, 55, 56, 60, 61, 63, 64, 66, 69, 72, 73, 74, 77, 84, 90, 92, 93], "logist": [7, 31, 50, 53], "logit": [7, 31, 50, 53], "mass1_mass2_to_mchirp_eta": [7, 31, 50, 53], "mass1mass2tomchirpeta": [7, 31, 50, 53], "mass1_mass2_to_mchirp_q": [7, 31, 33, 53, 92], "mass1mass2tomchirpq": [7, 31, 50, 53], "mchirp_eta_to_mass1_mass2": [7, 31, 39, 50, 53], "mchirpetatomass1mass2": [7, 31, 50, 53], "mchirp_q_to_mass1_mass2": [7, 31, 36, 37, 50, 53], "mchirpqtomass1mass2": [7, 31, 50, 53], "precession_mass_spin_to_cartesian_spin": [7, 31, 53], "precessionmassspintocartesianspin": [7, 31, 50, 53], "spherical_spin_1_to_cartesian_spin_1": [7, 31, 53], "sphericalspin1tocartesianspin1": [7, 31, 50, 53], "spherical_spin_2_to_cartesian_spin_2": [7, 31, 53], "sphericalspin2tocartesianspin2": [7, 31, 50, 53], "spherical_to_cartesian": [7, 18, 31, 33, 50, 53, 92], "sphericaltocartesian": [7, 31, 50, 53], "paramet": [8, 10, 14, 18, 21, 29, 30, 32, 33, 35, 38, 39, 42, 45, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 80, 84, 86, 87, 88, 89, 90, 93, 96, 97, 98], "mass1": [8, 10, 16, 22, 24, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 45, 53, 55, 60, 63, 66, 69, 73, 76, 77, 80, 81, 83, 88, 89, 90, 92, 93, 94, 98], "compon": [8, 10, 29, 31, 33, 38, 48, 53, 55, 56, 58, 63, 66, 69, 73, 76, 77, 80, 98], "object": [8, 12, 14, 18, 26, 31, 33, 44, 53, 54, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 86, 88, 90, 98], "binari": [8, 18, 29, 30, 31, 33, 35, 36, 37, 53, 54, 56, 66, 69, 76, 80, 82, 85, 92, 93, 95, 98], "solar": [8, 18, 29, 31, 33, 53, 67, 76, 80, 98], "mass2": [8, 10, 16, 22, 24, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 45, 53, 55, 60, 63, 66, 69, 73, 76, 77, 80, 81, 83, 88, 89, 90, 92, 93, 94, 98], "spin1x": [8, 31, 33, 53, 66, 76, 77, 92], "x": [8, 12, 18, 31, 32, 33, 40, 42, 53, 55, 56, 58, 60, 61, 63, 64, 66, 67, 69, 70, 71, 73, 76, 77, 79, 88, 90, 92, 94, 96], "dimensionless": [8, 31, 53, 66, 67, 69, 76], "spin1i": [8, 31, 33, 53, 66, 76, 77, 92], "y": [8, 12, 18, 29, 31, 32, 33, 53, 55, 58, 63, 66, 67, 70, 71, 76, 79, 92], "spin1z": [8, 31, 33, 36, 37, 39, 41, 53, 63, 66, 69, 73, 76, 77, 83, 92], "spin2x": [8, 31, 33, 53, 66, 76, 77, 92], "spin2i": [8, 31, 33, 53, 66, 76, 77, 92], "spin2z": [8, 31, 33, 36, 37, 53, 63, 66, 69, 73, 76, 83, 92], "eccentr": [8, 31, 76], "lambda1": [8, 31, 53, 66, 73, 76], "tidal": [8, 10, 31, 53, 76], "deform": [8, 10, 31, 53, 76], "1": [8, 10, 13, 15, 16, 18, 19, 20, 22, 23, 24, 25, 26, 28, 29, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98], "lambda2": [8, 31, 53, 66, 73, 76], "2": [8, 10, 13, 15, 16, 18, 22, 23, 24, 25, 28, 29, 31, 32, 34, 35, 36, 37, 38, 41, 45, 47, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 83, 84, 87, 88, 89, 90, 92, 93, 96, 98], "dquad_mon1": [8, 31, 76], "quadrupol": [8, 31, 53, 76], "monopol": [8, 31, 53, 76], "m_1": [8, 31, 53, 55, 71, 76], "5": [8, 10, 13, 16, 18, 22, 24, 28, 29, 31, 33, 38, 39, 41, 46, 47, 53, 55, 56, 58, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 83, 87, 88, 90, 93, 95, 98], "dquad_mon2": [8, 31, 76], "m_2": [8, 31, 53, 55, 71, 76], "lambda_octu1": [8, 31, 76], "octupolar": [8, 31, 76], "lambda_octu2": [8, 31, 76], "quadfmode1": [8, 31, 76], "quadrupolar": [8, 31, 76], "mode": [8, 12, 29, 31, 33, 37, 38, 43, 53, 58, 61, 63, 66, 69, 71, 74, 76, 90, 93, 98], "quadfmode2": [8, 31, 76], "octufmode1": [8, 31, 76], "octufmode2": [8, 31, 76], "dchi0": [8, 31, 76], "0pn": [8, 31, 76], "testinggr": [8, 31, 76], "dchi1": [8, 31, 76], "5pn": [8, 31, 53, 73, 76, 80, 93, 98], "dchi2": [8, 31, 76], "1pn": [8, 31, 73, 76, 80, 98], "dchi3": [8, 31, 76], "dchi4": [8, 31, 76], "2pn": [8, 31, 53, 73, 76, 80, 98], "dchi5": [8, 31, 76], "dchi5l": [8, 31, 76], "logrithm": [8, 31, 76], "dchi6": [8, 31, 76], "3pn": [8, 31, 53, 73, 76, 80, 98], "dchi6l": [8, 31, 76], "dchi7": [8, 31, 76], "3": [8, 10, 13, 18, 28, 31, 39, 40, 41, 46, 47, 52, 53, 55, 56, 57, 61, 63, 64, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 83, 84, 88, 89, 90, 91, 92, 93, 95, 96, 98], "dalpha1": [8, 31, 76], "merger": [8, 14, 28, 31, 33, 35, 39, 41, 43, 53, 54, 69, 76, 80, 81, 83, 84, 92], "ringdown": [8, 29, 31, 33, 50, 53, 65], "dalpha2": [8, 31, 76], "dalpha3": [8, 31, 76], "dalpha4": [8, 31, 76], "dalpha5": [8, 31, 76], "dbeta1": [8, 31, 76], "intermedi": [8, 31, 63, 72, 76, 77, 80, 90, 92, 93], "dbeta2": [8, 31, 76], "dbeta3": [8, 31, 76], "distanc": [8, 10, 16, 18, 22, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 50, 53, 63, 65, 66, 69, 71, 72, 73, 76, 80, 87, 89, 91, 92, 93], "luminos": [8, 31, 53, 66, 69, 76, 92], "mpc": [8, 31, 53, 66, 69, 76, 92], "coa_phas": [8, 25, 31, 33, 36, 37, 38, 41, 43, 45, 56, 66, 76, 83, 92], "coales": [8, 31, 76], "phase": [8, 10, 24, 25, 28, 31, 33, 38, 43, 53, 56, 57, 58, 63, 65, 72, 73, 74, 75, 76, 81, 90, 92, 93], "rad": [8, 31, 53, 55, 76, 77], "inclin": [8, 10, 16, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 53, 56, 63, 66, 67, 76, 77, 83, 91, 92, 93], "angl": [8, 18, 31, 33, 35, 41, 43, 53, 55, 56, 63, 66, 67, 70, 72, 76, 92], "orbit": [8, 31, 43, 53, 58, 63, 67, 69, 73, 76, 80, 98], "momentum": [8, 31, 53, 67, 76], "l": [8, 10, 19, 22, 29, 31, 34, 38, 39, 41, 44, 53, 55, 63, 66, 76, 77, 86, 89, 93], "sight": [8, 31, 53, 76], "long_asc_nod": [8, 31, 76], "longitud": [8, 16, 31, 53, 76], "ascend": [8, 31, 73, 76], "node": [8, 10, 31, 48, 53, 64, 76, 77, 80, 85, 86, 88, 89, 93, 95], "axi": [8, 18, 31, 45, 53, 58, 66, 71, 76, 93], "mean_per_ano": [8, 31, 76], "anomali": [8, 31, 76], "periastron": [8, 31, 76], "delta_t": [8, 16, 23, 24, 26, 28, 31, 51, 52, 53, 57, 58, 65, 68, 70, 72, 74, 76, 83, 84], "step": [8, 10, 12, 22, 29, 31, 32, 42, 44, 45, 56, 58, 60, 64, 68, 70, 72, 74, 76, 77, 80, 84, 89, 92, 93, 98], "waveform": [8, 9, 10, 12, 16, 21, 22, 24, 28, 30, 33, 35, 36, 37, 38, 39, 41, 48, 50, 53, 55, 58, 60, 61, 63, 65, 66, 69, 71, 72, 74, 75, 80, 81, 85, 89, 90, 92, 93, 98], "f_lower": [8, 16, 24, 28, 31, 33, 35, 36, 38, 39, 41, 53, 56, 63, 65, 66, 76, 83, 84, 92], "approxim": [8, 10, 12, 13, 16, 21, 22, 24, 25, 28, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 53, 55, 56, 63, 65, 66, 69, 70, 73, 74, 75, 76, 80, 83, 90, 92, 93, 94, 95, 98], "string": [8, 19, 31, 48, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 86, 88, 89, 90, 93, 95, 96, 97, 98], "indic": [8, 10, 31, 53, 56, 57, 58, 60, 61, 63, 64, 66, 69, 70, 73, 74, 75, 76, 77, 80, 88, 90, 93, 95], "chosen": [8, 31, 53, 63, 67, 68, 70, 73, 74, 76, 77, 80], "f_ref": [8, 31, 33, 35, 36, 53, 76, 92], "phase_ord": [8, 31, 53, 65, 76, 83], "pn": [8, 10, 22, 31, 53, 63, 73, 76, 80, 83, 88, 90, 93, 98], "order": [8, 10, 20, 22, 29, 31, 33, 36, 38, 39, 43, 44, 45, 48, 53, 55, 56, 58, 60, 62, 63, 65, 66, 69, 70, 71, 73, 74, 76, 77, 78, 80, 83, 88, 90, 91, 92, 93, 95, 96, 98], "all": [8, 10, 11, 12, 14, 16, 18, 19, 20, 22, 25, 26, 29, 31, 33, 35, 36, 37, 42, 43, 44, 45, 48, 49, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "implement": [8, 14, 24, 30, 31, 43, 44, 48, 56, 57, 58, 61, 63, 64, 65, 66, 76, 77, 80, 83, 86, 87, 88, 92, 93], "spin_ord": [8, 31, 53, 76], "correct": [8, 10, 23, 29, 31, 34, 43, 46, 49, 53, 56, 60, 63, 64, 66, 69, 72, 73, 76, 79, 80, 93, 98], "tidal_ord": [8, 31, 76], "amplitude_ord": [8, 31, 76], "amplitud": [8, 10, 29, 31, 33, 34, 38, 53, 56, 58, 65, 70, 72, 73, 76, 81], "eccentricity_ord": [8, 31, 76], "frame_axi": [8, 31, 76], "among": [8, 31, 43, 76, 77], "orbital_l": [8, 31, 76], "view": [8, 16, 31, 53, 66, 74, 76, 80, 93], "total_j": [8, 31, 76], "modes_choic": [8, 31, 76], "turn": [8, 31, 35, 44, 58, 62, 63, 64, 65, 71, 76, 80, 92], "side_band": [8, 31, 76], "sideband": [8, 31, 76], "mode_arrai": [8, 31, 37, 76], "m": [8, 10, 11, 13, 22, 29, 31, 33, 53, 55, 58, 60, 63, 66, 67, 70, 72, 76, 80, 83, 89, 93, 98], "includ": [8, 10, 12, 14, 19, 20, 22, 29, 30, 31, 33, 35, 41, 42, 43, 46, 48, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 69, 71, 72, 73, 74, 76, 77, 80, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98], "featur": [8, 25, 31, 35, 41, 44, 46, 47, 53, 66, 74, 76, 77, 80, 88, 93, 95], "By": [8, 23, 31, 32, 37, 38, 39, 41, 44, 45, 53, 55, 59, 62, 63, 64, 66, 72, 74, 76, 77, 84, 90, 91, 98], "none": [8, 29, 31, 43, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 86, 88, 89, 90, 93, 96, 97, 98], "let": [8, 29, 31, 44, 56, 63, 73, 74, 76, 77, 80, 84, 88, 92, 95, 96], "lalsimul": [8, 12, 31, 33, 34, 48, 53, 70, 76, 81, 93], "behaviour": [8, 31, 53, 74, 76, 77, 86], "exampl": [8, 10, 11, 12, 13, 15, 16, 19, 20, 23, 24, 28, 29, 30, 32, 36, 37, 39, 40, 42, 43, 45, 48, 49, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 66, 71, 74, 76, 77, 78, 79, 83, 84, 87, 89, 90, 93, 94, 95, 97, 98], "numrel_data": [8, 31, 76], "nr": [8, 31, 76], "delta_f": [8, 23, 24, 28, 31, 51, 52, 53, 57, 58, 63, 70, 72, 74, 75, 76, 80, 83, 84, 98], "made": [8, 10, 22, 31, 35, 44, 53, 55, 56, 59, 60, 63, 66, 71, 76, 77, 79, 80, 86, 87, 90, 92, 93, 98], "f_final_func": [8, 31, 76], "tc": [8, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 53, 63, 65, 66, 76, 92], "coalesc": [8, 30, 31, 33, 35, 38, 39, 41, 53, 63, 69, 71, 76, 77, 80, 85, 92, 93, 95], "ra": [8, 16, 29, 31, 33, 35, 38, 39, 41, 43, 45, 53, 55, 60, 62, 63, 66, 71, 76, 91, 92, 95], "right": [8, 31, 33, 44, 53, 55, 56, 58, 63, 71, 74, 75, 76, 78, 83, 90, 91, 92, 96], "ascens": [8, 31, 53, 55, 76, 83], "dec": [8, 16, 29, 31, 33, 35, 38, 39, 41, 43, 45, 53, 55, 56, 63, 66, 71, 76, 91, 92, 95], "declin": [8, 16, 31, 53, 55, 76, 83], "polar": [8, 18, 29, 31, 33, 35, 36, 37, 38, 39, 41, 43, 45, 53, 55, 56, 58, 63, 65, 66, 67, 70, 76, 83, 84, 91, 92], "eclipticlatitud": [8, 31, 36, 37], "wrt": [8, 31], "ssb": [8, 31, 36], "coord": [8, 31, 53], "eclipticlongitud": [8, 31, 36, 37], "user": [9, 10, 12, 20, 23, 25, 29, 33, 44, 46, 48, 49, 52, 53, 65, 67, 69, 76, 77, 80, 88, 90, 93, 95, 98], "who": [9, 17, 35, 42, 53, 77], "interest": [9, 17, 26, 28, 30, 31, 56, 77], "tool": [9, 10, 12, 26, 29, 30, 31, 46, 53, 56, 60, 66, 76, 78, 85, 93, 95], "variou": [9, 31, 43, 53, 56, 57, 58, 63, 70, 71, 73, 74, 76, 77, 80, 86, 88, 90, 92, 94, 95, 96, 98], "other": [9, 11, 12, 20, 23, 25, 29, 30, 31, 37, 40, 41, 42, 43, 44, 49, 53, 54, 55, 56, 57, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 76, 77, 80, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "task": [9, 15, 53, 93, 94], "g": [9, 12, 19, 20, 25, 26, 31, 34, 42, 43, 44, 48, 53, 55, 56, 60, 61, 63, 64, 65, 66, 69, 72, 73, 74, 76, 77, 79, 80, 86, 88, 92, 93, 95, 96, 97, 98], "templat": [9, 12, 22, 25, 28, 29, 30, 31, 37, 43, 48, 53, 56, 57, 58, 63, 65, 66, 69, 70, 71, 72, 73, 75, 76, 77, 87, 88, 90, 93, 94, 95, 97], "bank": [9, 12, 25, 29, 30, 48, 50, 53, 56, 58, 65, 66, 69, 71, 73, 75, 77, 87, 88, 90, 93, 94, 95, 97], "hardwar": [9, 30, 53, 72, 81, 96], "test": [9, 10, 12, 16, 26, 31, 32, 33, 37, 38, 39, 40, 41, 53, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 72, 73, 74, 75, 77, 80, 82, 84, 85, 86, 88, 90, 91, 92, 93, 96, 98], "document": [9, 12, 16, 19, 30, 34, 38, 40, 44, 55, 63, 64, 66, 69, 73, 74, 76, 77, 81, 82, 86, 87, 89, 90, 91, 96, 97, 98], "pycbc_make_psd_estimation_workflow": 9, "pycbc_make_offline_search_workflow": 9, "search": [9, 10, 21, 25, 48, 53, 55, 56, 66, 71, 74, 75, 76, 77, 78, 80, 84, 85, 86, 87, 89, 90, 94, 95, 96], "wave": [9, 14, 23, 31, 34, 38, 39, 41, 43, 53, 59, 63, 66, 69, 76, 77, 81, 84, 85, 88, 89, 90, 92, 95, 98], "pycbc_make_offline_grb_workflow": 9, "grb": [9, 30, 43, 56, 69, 71], "tmpltbank": [9, 50, 53, 74, 85, 88, 90, 93, 95, 97], "effectu": 9, "fit": [9, 40, 43, 53, 56, 58, 67, 69, 74, 76, 77, 80, 92, 93], "dag": [9, 10, 77, 80, 86], "do": [9, 10, 11, 12, 14, 19, 23, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 46, 47, 48, 49, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98], "faith": 9, "comparison": [9, 18, 70, 74, 80, 87], "upload": [9, 53, 66, 71], "gracedb": [9, 66, 71], "pycbc_condition_strain": [9, 77], "oper": [9, 12, 31, 57, 65, 66, 74, 77, 90, 97], "page": [10, 12, 14, 17, 18, 20, 22, 29, 30, 31, 40, 43, 48, 71, 74, 77, 79, 80, 82, 85, 86, 87, 88, 93, 95, 96], "describ": [10, 20, 22, 24, 29, 31, 33, 47, 48, 53, 55, 57, 63, 72, 73, 74, 76, 77, 80, 82, 86, 88, 89, 90, 92, 93, 96, 97, 98], "how": [10, 15, 16, 17, 18, 20, 23, 24, 28, 30, 31, 32, 35, 36, 37, 43, 45, 46, 48, 52, 53, 56, 57, 60, 61, 63, 70, 73, 76, 77, 78, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98], "banksim": [10, 22, 80], "facil": 10, "within": [10, 12, 17, 22, 26, 30, 44, 52, 53, 55, 56, 57, 60, 63, 65, 66, 70, 71, 72, 73, 74, 76, 77, 80, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "maxim": [10, 56, 58, 63, 64, 73, 74, 75, 76, 90], "purpos": [10, 16, 31, 35, 42, 53, 61, 63, 72, 80, 82, 88, 93, 96], "investig": [10, 80], "construct": [10, 25, 55, 58, 61, 63, 64, 71, 73, 77, 80, 85, 88, 89, 90, 93, 96, 97, 98], "new": [10, 12, 17, 21, 31, 33, 42, 43, 44, 46, 53, 55, 56, 58, 61, 64, 65, 66, 70, 71, 72, 73, 74, 76, 77, 79, 80, 88, 89, 90, 92, 95, 96, 97, 98], "well": [10, 12, 23, 31, 55, 56, 61, 63, 65, 66, 71, 73, 80, 88, 91, 93, 94], "act": [10, 31, 33, 53, 60, 61, 63, 64, 77, 86, 87], "saniti": [10, 72, 73, 77, 86], "check": [10, 11, 12, 18, 31, 32, 33, 49, 52, 53, 55, 56, 57, 60, 61, 63, 64, 65, 72, 73, 74, 76, 77, 80, 85, 86, 88, 90, 92, 93, 94, 95, 96], "methodologi": 10, "therefor": [10, 12, 29, 33, 35, 42, 52, 53, 55, 63, 76, 77, 80, 88, 91, 92, 93, 95, 98], "run": [10, 11, 12, 14, 22, 23, 26, 31, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 47, 48, 49, 53, 55, 59, 60, 61, 63, 64, 69, 71, 73, 75, 76, 77, 78, 80, 83, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 98], "same": [10, 18, 20, 22, 23, 25, 29, 31, 32, 33, 34, 35, 36, 38, 43, 44, 45, 48, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 68, 69, 71, 72, 73, 74, 75, 76, 77, 80, 83, 88, 90, 91, 92, 93, 94, 95, 98], "rang": [10, 18, 37, 41, 52, 53, 55, 56, 58, 60, 63, 69, 70, 72, 73, 74, 77, 78, 80, 88, 90, 92, 96, 98], "sensit": [10, 14, 33, 35, 50, 56, 58, 69, 70, 71, 90, 92], "curv": [10, 33, 53, 69, 70], "here": [10, 15, 18, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 44, 47, 53, 55, 56, 57, 58, 61, 63, 64, 65, 66, 69, 70, 73, 74, 76, 77, 80, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "mai": [10, 12, 16, 24, 25, 28, 30, 31, 35, 41, 42, 43, 44, 45, 46, 47, 48, 49, 53, 55, 57, 58, 60, 61, 63, 64, 65, 66, 69, 73, 74, 76, 77, 80, 84, 86, 87, 88, 90, 91, 92, 93, 95, 96, 98], "optim": [10, 23, 38, 40, 43, 53, 56, 57, 58, 60, 63, 76, 77, 80, 89, 90, 93], "exhaust": 10, "confid": [10, 34, 38, 53, 69, 71, 92], "recov": [10, 33, 41, 56, 77, 91, 93, 95], "design": [10, 31, 33, 35, 38, 43, 56, 58, 66, 77, 80, 85, 86, 88, 90, 96, 98], "accept": [10, 31, 53, 55, 60, 61, 64, 66, 73, 77, 80, 92], "up": [10, 11, 22, 29, 31, 33, 35, 37, 38, 39, 40, 41, 43, 46, 48, 53, 56, 57, 58, 61, 63, 64, 70, 71, 73, 75, 76, 77, 80, 85, 86, 88, 89, 90, 91, 92, 94, 96, 97, 98], "singl": [10, 14, 18, 22, 26, 29, 31, 42, 43, 44, 50, 53, 55, 57, 58, 59, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 86, 87, 89, 90, 91, 92, 93, 96, 98], "below": [10, 12, 14, 15, 17, 18, 22, 24, 29, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 52, 55, 56, 58, 64, 66, 70, 73, 74, 75, 76, 77, 80, 81, 84, 85, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "inspinj": [10, 22, 77, 88, 89], "lower": [10, 22, 29, 33, 50, 53, 54, 55, 56, 58, 63, 69, 73, 75, 76, 80, 89, 90, 92, 93, 98], "15": [10, 13, 18, 22, 28, 31, 33, 34, 35, 36, 38, 39, 41, 53, 67, 69, 70, 72, 78, 80, 82, 87, 90, 92, 94, 98], "distr": [10, 22, 29, 56, 89, 93], "fix": [10, 29, 31, 33, 39, 41, 42, 43, 44, 46, 52, 53, 55, 56, 61, 63, 64, 66, 69, 77, 87, 95, 97], "inc": [10, 16, 71], "min": [10, 18, 22, 29, 31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 50, 53, 55, 56, 60, 62, 63, 71, 74, 80, 87, 88, 89, 90, 92, 93, 94, 95, 98], "componentmass": [10, 22, 89, 93], "disabl": [10, 22, 48, 59, 88, 89, 90, 93, 98], "milkywai": [10, 22], "1000": [10, 22, 24, 29, 31, 33, 38, 40, 41, 52, 53, 55, 56, 62, 63, 64, 71, 76, 80, 87, 89, 92, 93], "random": [10, 18, 22, 29, 33, 42, 53, 55, 61, 63, 64, 66, 68, 73, 77, 80, 89, 91, 93, 97, 98], "mtotal": [10, 12, 22, 53, 60, 62, 66, 73, 80, 87, 89, 90, 93], "4": [10, 12, 13, 15, 18, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 52, 53, 55, 56, 63, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 79, 80, 83, 88, 90, 92, 93, 94, 96, 98], "spintaylort4": [10, 29, 83, 95], "align": [10, 14, 22, 50, 53, 57, 58, 69, 73, 76], "enabl": [10, 22, 23, 29, 38, 41, 43, 48, 53, 63, 66, 67, 71, 80, 86, 88, 90, 91, 92, 93, 97, 98], "18": [10, 31, 33, 35, 53], "spin1": [10, 22, 29, 37, 53, 80], "05": [10, 12, 18, 58, 80, 95], "spin2": [10, 22, 29, 37, 53, 80], "6": [10, 13, 15, 18, 33, 34, 35, 38, 47, 49, 53, 55, 56, 63, 66, 67, 69, 70, 71, 73, 76, 77, 80, 83, 84, 88, 89, 90, 92, 93], "d": [10, 16, 21, 22, 29, 31, 43, 45, 49, 53, 55, 56, 58, 60, 63, 66, 71, 72, 73, 89, 93], "1000000000": [10, 16, 22, 53, 80, 96], "1000010000": 10, "interv": [10, 22, 29, 31, 33, 40, 45, 53, 55, 56, 61, 64, 69, 70, 71, 74, 76, 77, 87, 89, 90, 92, 93], "execut": [10, 17, 22, 23, 29, 31, 45, 46, 48, 53, 56, 57, 63, 65, 71, 72, 73, 77, 80, 84, 85, 93, 94], "home": [10, 12, 19, 20, 22, 47, 49, 77, 80, 88, 89, 93, 97, 98], "ahnitz": [10, 22, 93], "local": [10, 12, 19, 46, 47, 48, 49, 53, 58, 59, 66, 69, 77, 80, 86, 88, 90, 93, 95, 96, 98], "bin": [10, 18, 19, 20, 22, 25, 29, 32, 33, 34, 36, 37, 46, 47, 48, 49, 50, 53, 56, 60, 63, 69, 72, 73, 75, 76, 77, 80, 87, 88, 90, 93, 97], "pycbc_banksim": [10, 80], "usr1": [10, 22, 93], "gpu": [10, 13, 16, 23, 47, 74, 76, 80, 83, 90, 93, 95, 97, 98], "per": [10, 22, 29, 31, 33, 40, 53, 56, 64, 69, 70, 77, 80, 86, 92, 94, 97, 98], "job": [10, 12, 22, 33, 34, 77, 80, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "50": [10, 18, 31, 38, 41, 52, 55, 58, 63, 71, 72, 80, 84, 92, 93], "100": [10, 18, 22, 31, 32, 33, 36, 38, 39, 40, 41, 45, 53, 55, 56, 58, 63, 66, 69, 73, 76, 77, 80, 83, 84, 90, 91, 93, 94], "taylorf2": [10, 22, 39, 41, 53, 66, 73, 76, 80, 83, 90, 98], "7": [10, 13, 16, 19, 46, 47, 49, 53, 55, 66, 67, 70, 71, 73, 74, 76, 77, 79, 80, 82, 83, 84, 90, 91, 92, 93], "40": [10, 28, 29, 53, 66, 70, 80, 83, 87, 90, 93, 98], "30": [10, 16, 22, 24, 29, 38, 39, 41, 48, 51, 52, 55, 63, 66, 72, 74, 76, 80, 83, 88, 89, 90, 92, 93, 98], "4096": [10, 16, 22, 24, 29, 34, 38, 51, 52, 54, 63, 70, 72, 76, 80, 83, 84, 90, 92, 93, 94, 95, 98], "256": [10, 29, 33, 34, 35, 38, 65, 80, 92, 93, 94, 95, 98], "mchirp": [10, 13, 31, 33, 36, 37, 39, 53, 55, 56, 62, 63, 66, 69, 76, 81, 87, 90, 92, 93, 95, 97], "10": [10, 12, 15, 16, 18, 29, 32, 33, 34, 35, 36, 39, 40, 41, 45, 53, 55, 56, 58, 62, 63, 64, 65, 66, 68, 69, 70, 71, 72, 76, 77, 78, 80, 83, 84, 87, 88, 90, 91, 92, 93, 94, 98], "There": [10, 15, 22, 29, 31, 40, 43, 45, 53, 65, 66, 77, 80, 84, 86, 87, 88, 93, 95, 96, 98], "four": [10, 14, 22, 33, 66, 78, 93], "section": [10, 14, 22, 29, 31, 32, 33, 35, 36, 41, 49, 53, 55, 58, 60, 62, 63, 64, 71, 72, 74, 77, 78, 80, 84, 85, 87, 91, 92, 93, 94, 96], "must": [10, 12, 20, 22, 23, 29, 31, 33, 34, 35, 38, 42, 44, 48, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 77, 80, 84, 86, 88, 89, 90, 91, 92, 93, 96, 97, 98], "present": [10, 15, 22, 23, 25, 56, 63, 64, 66, 70, 72, 73, 74, 76, 77, 80, 86, 88, 90, 92, 93, 95, 97, 98], "paramat": [10, 22], "fed": [10, 22, 92, 95], "directli": [10, 20, 22, 25, 29, 30, 41, 53, 56, 63, 64, 71, 73, 74, 76, 77, 80, 84, 88, 89, 90, 95, 96, 97, 98], "lalapps_inspinj": [10, 22, 48, 77, 88, 93, 95], "program": [10, 22, 31, 42, 53, 57, 60, 61, 73, 80, 84, 90, 92, 93, 94, 95, 97, 98], "restrict": [10, 22, 43, 56, 58, 63, 69, 80, 82, 86, 87], "can": [10, 11, 12, 13, 14, 16, 18, 19, 22, 23, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "along": [10, 16, 22, 26, 31, 33, 45, 53, 58, 60, 61, 63, 64, 66, 74, 76, 77, 91, 92], "note": [10, 12, 16, 22, 23, 26, 28, 29, 30, 31, 33, 35, 36, 37, 38, 40, 41, 44, 48, 49, 53, 55, 57, 58, 59, 60, 61, 63, 64, 66, 67, 68, 69, 70, 71, 73, 74, 76, 77, 78, 79, 80, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97], "howev": [10, 12, 20, 22, 23, 31, 33, 38, 42, 43, 44, 47, 53, 60, 63, 66, 72, 76, 77, 80, 84, 88, 89, 90, 91, 92, 93], "doe": [10, 20, 22, 43, 48, 53, 56, 57, 58, 60, 61, 62, 63, 64, 66, 71, 73, 74, 75, 76, 77, 80, 85, 86, 87, 90, 92, 93, 94, 96, 98], "determin": [10, 22, 29, 31, 33, 35, 42, 44, 48, 49, 53, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 71, 73, 74, 76, 77, 78, 80, 81, 85, 86, 87, 90, 91, 92, 93, 95, 98], "actual": [10, 22, 35, 38, 53, 57, 64, 65, 66, 73, 74, 76, 77, 80, 86, 88, 90, 92, 93], "compar": [10, 22, 31, 42, 43, 56, 60, 66, 74, 75, 77, 83, 86, 90, 98], "That": [10, 22, 42, 44, 64, 74, 77, 92, 93, 96], "script": [10, 17, 22, 36, 37, 38, 41, 46, 47, 48, 55, 71, 77, 80, 81, 88, 90, 91, 92, 93, 95, 97, 98], "copi": [10, 11, 20, 22, 26, 31, 34, 35, 46, 48, 50, 53, 60, 61, 63, 65, 66, 72, 74, 76, 77, 80, 86, 88, 91, 93], "folder": [10, 22, 64, 69, 95], "version": [10, 11, 12, 14, 19, 22, 28, 35, 46, 47, 49, 50, 56, 57, 58, 61, 64, 66, 70, 76, 77, 79, 80, 82, 84, 87, 88, 90, 93, 95, 97, 98], "ha": [10, 11, 16, 20, 22, 29, 31, 33, 34, 35, 38, 43, 44, 46, 49, 53, 55, 56, 58, 60, 61, 63, 64, 65, 66, 68, 70, 71, 73, 74, 76, 77, 78, 80, 81, 82, 84, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98], "directori": [10, 11, 12, 19, 20, 22, 34, 38, 45, 46, 47, 48, 49, 53, 55, 71, 76, 77, 80, 86, 88, 89, 90, 91, 92, 93, 94, 97, 98], "condor": [10, 22, 80, 92, 93, 94, 95], "It": [10, 12, 19, 23, 29, 30, 31, 32, 33, 37, 38, 39, 41, 43, 44, 45, 53, 56, 57, 58, 60, 61, 62, 63, 64, 66, 70, 73, 74, 76, 77, 80, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "sngl": [10, 56, 77], "sim": 10, "inspir": [10, 14, 17, 53, 56, 58, 74, 75, 77, 80, 87, 88, 93, 95, 98], "tabl": [10, 25, 29, 31, 53, 56, 61, 65, 66, 71, 73, 76, 77, 80, 82, 86, 91, 92, 93, 96, 98], "its": [10, 14, 20, 31, 41, 42, 43, 44, 46, 53, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 70, 71, 73, 74, 75, 76, 77, 80, 88, 90, 91, 93, 94, 95, 96, 97, 98], "suggest": [10, 90, 91, 92], "split": [10, 22, 31, 33, 37, 57, 60, 66, 70, 74, 76, 77, 80, 87, 88, 92, 93], "smaller": [10, 22, 50, 53, 55, 56, 63, 66, 72, 73, 74, 80, 87, 90, 93, 98], "piec": [10, 43, 95, 97], "satisfi": [10, 12, 31, 33, 42, 44, 55, 64, 66], "direct": [10, 16, 20, 30, 53, 57, 73, 75, 88, 90, 93], "memori": [10, 31, 56, 57, 58, 64, 66, 72, 74, 75, 76, 77, 80, 87, 88, 90, 92, 93, 95], "pregener": [10, 77, 86, 89, 93, 95, 98], "begin": [10, 12, 29, 33, 34, 38, 45, 53, 55, 58, 59, 60, 61, 63, 64, 71, 72, 74, 76, 80, 90, 93], "caus": [10, 31, 33, 34, 53, 58, 61, 63, 66, 77, 78, 80, 86, 90, 91, 92, 93, 96], "portion": [10, 22, 43, 58, 72, 74, 76, 78, 90], "proport": [10, 22, 53, 60, 69, 73, 80, 87, 98], "so": [10, 11, 12, 14, 18, 20, 23, 24, 29, 31, 33, 34, 38, 41, 42, 43, 44, 46, 48, 49, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 72, 73, 74, 76, 77, 80, 82, 84, 86, 88, 90, 91, 92, 93, 96], "acceler": [10, 46, 47, 70, 90], "process": [10, 12, 16, 29, 37, 38, 42, 44, 48, 49, 53, 58, 60, 64, 66, 69, 73, 76, 77, 80, 81, 82, 83, 84, 86, 87, 90, 92, 93, 94, 96], "treat": [10, 35, 43, 58, 60, 63, 91, 92, 93], "unreli": 10, "As": [10, 23, 29, 31, 33, 42, 44, 47, 53, 55, 56, 60, 61, 76, 77, 80, 86, 88, 91, 92, 95, 96, 97, 98], "automat": [10, 20, 22, 43, 63, 72, 74, 77, 78, 80, 84, 88, 89, 90, 91, 92, 96, 98], "twice": [10, 58, 72, 73, 88, 92], "kept": [10, 29, 31, 44, 74, 77, 93], "thei": [10, 23, 29, 31, 33, 35, 44, 52, 53, 55, 57, 60, 61, 63, 64, 66, 70, 72, 73, 74, 76, 77, 78, 80, 87, 88, 91, 92, 93, 94, 96, 98], "equivel": 10, "sugar": [10, 56, 93], "atla": [10, 34, 91, 92, 93], "simul": [10, 22, 31, 34, 35, 36, 38, 65, 69, 73, 76, 77, 89, 90, 91, 94, 96], "ldg": [10, 22, 48, 80, 86, 91, 92, 93], "choosen": [10, 22], "accord": [10, 22, 53, 56, 69, 74, 89, 90, 96, 97, 98], "web": [10, 19, 22, 66, 93], "correspond": [10, 22, 25, 26, 31, 33, 37, 44, 48, 53, 55, 56, 58, 59, 60, 61, 63, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 86, 88, 89, 90, 91, 92, 93, 95, 96, 98], "sent": [10, 22, 66, 77, 80, 86, 88, 89, 90, 97, 98], "notabl": 10, "exept": [10, 57], "paramt": [10, 22, 55], "relev": [10, 14, 22, 35, 42, 61, 66, 73, 74, 80, 88, 95], "buffer": [10, 56, 61, 65, 72, 76, 90, 95], "greater": [10, 22, 31, 49, 56, 60, 61, 70, 71, 73], "longest": [10, 22, 33, 66, 92], "onc": [10, 12, 19, 22, 23, 31, 46, 48, 49, 53, 57, 61, 70, 73, 77, 80, 86, 88, 91, 92, 93, 94, 95], "been": [10, 22, 34, 38, 44, 46, 49, 55, 56, 58, 60, 61, 63, 64, 65, 66, 70, 73, 74, 76, 77, 80, 82, 84, 86, 88, 89, 90, 92, 93, 96, 98], "workspac": [10, 22], "place": [10, 12, 22, 25, 31, 33, 41, 49, 53, 55, 58, 63, 64, 66, 71, 72, 73, 74, 77, 80, 82, 88, 91, 93, 94, 95, 97, 98], "follow": [10, 11, 12, 20, 22, 25, 26, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 44, 46, 48, 49, 53, 55, 60, 63, 64, 65, 66, 71, 72, 73, 77, 78, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "command": [10, 11, 12, 19, 20, 22, 23, 31, 45, 46, 47, 48, 49, 53, 55, 56, 57, 60, 61, 63, 65, 72, 73, 74, 77, 78, 85, 86, 89, 90, 91, 92, 93, 95, 97, 98], "submit": [10, 22, 77, 80, 91, 92], "pycbc_make_banksim": 10, "conf": [10, 16, 22, 86], "your_ini_fil": [10, 22], "ini": [10, 32, 33, 34, 35, 36, 37, 38, 39, 41, 55, 70, 74, 77, 80, 81, 87, 89, 91, 92, 93, 94, 98], "shell": [10, 12, 19, 22, 47, 48, 49, 53, 77, 93], "sh": [10, 12, 22, 32, 33, 34, 36, 37, 46, 48, 63, 91, 92], "main": [10, 11, 22, 36, 42, 44, 46, 53, 80, 91, 93, 95], "call": [10, 11, 23, 29, 31, 32, 35, 37, 38, 39, 41, 44, 45, 48, 52, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 83, 84, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98], "dat": 10, "space": [10, 12, 23, 29, 31, 33, 41, 43, 52, 53, 55, 56, 60, 61, 63, 64, 69, 70, 73, 74, 76, 77, 80, 87, 90, 92, 93, 95, 98], "earli": 10, "incomplet": 10, "partial_result": 10, "some": [10, 12, 16, 18, 20, 22, 23, 24, 28, 29, 33, 40, 42, 43, 44, 46, 47, 48, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 66, 69, 71, 72, 73, 76, 77, 81, 82, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "basic": [10, 22, 29, 31, 33, 40, 53, 60, 66, 71, 73, 74, 76, 77, 78, 80, 87, 92, 94], "plot": [10, 18, 22, 24, 31, 32, 36, 37, 38, 39, 40, 41, 50, 51, 52, 53, 60, 61, 66, 69, 74, 81, 84, 85, 91, 92, 93, 94], "also": [10, 12, 13, 16, 18, 19, 22, 23, 24, 29, 30, 31, 33, 35, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 48, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 71, 72, 73, 74, 76, 77, 80, 82, 84, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 98], "pycbc_banksim_plot": 10, "To": [10, 11, 12, 14, 19, 23, 29, 31, 32, 33, 34, 35, 36, 37, 39, 41, 44, 46, 48, 53, 55, 56, 58, 61, 63, 64, 66, 71, 74, 76, 77, 79, 80, 82, 84, 87, 88, 91, 92, 93, 95, 96], "uberbank": [10, 80], "ligo": [10, 12, 14, 15, 24, 26, 28, 29, 30, 33, 34, 36, 39, 41, 42, 46, 48, 49, 53, 54, 66, 69, 71, 72, 77, 80, 82, 86, 87, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98], "we": [10, 11, 14, 15, 16, 18, 23, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 52, 53, 55, 56, 58, 59, 60, 63, 64, 65, 66, 69, 72, 73, 75, 76, 77, 80, 81, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "bn": [10, 13, 69, 80, 92], "nsbh": [10, 69, 80, 92], "bbh": [10, 31, 34, 38, 69, 80, 92], "region": [10, 28, 43, 53, 55, 58, 63, 64, 71, 74, 80, 90], "overlap": [10, 29, 33, 52, 53, 58, 63, 65, 70, 73, 74, 75, 76, 77, 80, 86, 88, 90, 93], "For": [10, 12, 20, 23, 29, 32, 33, 35, 38, 39, 41, 42, 43, 44, 45, 46, 53, 55, 56, 58, 59, 60, 61, 63, 64, 65, 66, 70, 71, 72, 73, 74, 76, 77, 78, 79, 80, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98], "technic": [10, 53, 69, 70], "reason": [10, 23, 29, 33, 43, 44, 53, 57, 58, 63, 66, 69, 70, 72, 91, 92, 97], "conveni": [10, 23, 25, 31, 53, 61, 63, 64, 66, 73, 74, 76, 77], "total": [10, 29, 33, 53, 55, 56, 57, 63, 64, 66, 69, 72, 73, 75, 77, 80, 87, 88, 90, 93, 95, 98], "abov": [10, 11, 19, 29, 31, 33, 35, 42, 44, 46, 48, 53, 55, 56, 58, 60, 63, 65, 66, 70, 71, 73, 76, 77, 79, 80, 84, 85, 86, 88, 90, 91, 92, 93, 95, 96, 98], "propos": [10, 62, 64, 76, 80], "flat": [10, 18, 53, 69, 80], "n": [10, 23, 48, 53, 55, 56, 58, 62, 63, 66, 67, 70, 71, 72, 73, 74, 75, 76, 77, 80, 88, 93, 97, 98], "bh": [10, 53, 66, 67, 73, 80, 88, 98], "99": [10, 33, 76, 80, 92], "limit": [10, 12, 31, 33, 53, 55, 56, 58, 66, 71, 76, 80, 88, 92, 93, 98], "In": [10, 11, 12, 18, 20, 23, 29, 31, 33, 35, 36, 37, 39, 41, 42, 43, 44, 45, 48, 49, 53, 55, 56, 58, 60, 61, 63, 64, 65, 66, 69, 70, 71, 73, 74, 75, 76, 80, 81, 84, 88, 89, 90, 91, 92, 93, 94, 96, 97], "addit": [10, 12, 14, 15, 29, 31, 33, 34, 35, 38, 39, 40, 41, 42, 43, 44, 47, 53, 55, 56, 58, 60, 63, 65, 66, 71, 72, 73, 74, 76, 77, 80, 81, 84, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "magnitud": [10, 18, 31, 53, 66, 67, 72, 76, 80], "000": [10, 31, 92, 93], "much": [10, 18, 20, 29, 30, 33, 42, 43, 57, 76, 80, 83, 93, 96], "less": [10, 31, 49, 53, 55, 56, 63, 64, 73, 76, 80, 90], "seobnrv2": [10, 29, 48, 80, 83], "even": [10, 12, 33, 35, 53, 55, 58, 60, 63, 65, 66, 74, 76, 88, 89, 92, 96], "though": [10, 33, 42, 73, 76, 77, 80, 91, 96, 98], "seobnrv2_rom_doublespin": [10, 66, 76, 80, 83], "recoveri": [10, 91], "becaus": [10, 33, 36, 43, 44, 55, 60, 62, 63, 64, 65, 80, 91, 92, 93, 96], "believ": 10, "accur": [10, 18, 39, 55, 58, 76, 80], "rom": [10, 12], "verifi": [10, 53, 57, 70, 72, 73, 80, 86], "instruct": [10, 12, 17, 30, 46, 48, 49, 79, 80, 88, 92, 93, 95, 96], "dchirp": 10, "150000": [10, 93], "25": [10, 22, 24, 28, 29, 33, 39, 53, 55, 56, 63, 70, 71, 72, 74, 80, 88, 95, 98], "1000250000": 10, "alex": [10, 22, 57, 65, 84, 87], "nielsen": 10, "pysparedir": 10, "o1": [10, 16, 69, 80, 91, 92, 93], "pycbcofflin": [10, 93], "aligned_spin": 10, "template_bank": [10, 77, 88, 93, 98], "titosbank": 10, "hyperbank_parallel_phenomd2": 10, "gz": [10, 12, 29, 49, 76, 77, 80, 90, 97], "10000": [10, 18, 29, 35, 40, 41, 55, 63, 69, 80, 93], "scheme": [10, 12, 23, 29, 38, 50, 57, 59, 74, 76, 77, 80, 83, 86, 88, 90, 93], "mkl": [10, 12, 23, 36, 38, 50, 53, 90, 93], "h1l1": [10, 66, 80, 82, 94, 95, 96], "er7_harm_mean_asd": 10, "1116700672": 10, "1630208": 10, "highmass": 10, "16384": [10, 22, 26, 29, 41, 68, 78, 80, 98], "1024": [10, 22, 28, 35, 39, 52, 80], "you": [10, 11, 12, 14, 15, 19, 20, 21, 23, 24, 26, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 57, 58, 61, 63, 65, 66, 68, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98], "chang": [10, 11, 12, 23, 25, 32, 33, 34, 35, 36, 38, 39, 41, 44, 45, 46, 47, 48, 53, 55, 57, 61, 63, 66, 69, 70, 71, 72, 73, 74, 76, 79, 80, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98], "your": [10, 11, 12, 19, 21, 23, 26, 29, 30, 33, 34, 35, 39, 40, 41, 42, 43, 44, 46, 47, 49, 53, 57, 70, 72, 73, 74, 80, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 95], "suitabl": [10, 53, 76, 77, 80, 86, 90, 95], "possibli": [10, 48, 56, 63, 64], "whatev": [10, 43, 61, 66, 71, 73, 76, 77, 80, 86, 93, 96], "processing_schem": [10, 90], "best": [10, 42, 56, 92, 93], "work": [10, 12, 23, 32, 34, 44, 46, 48, 53, 56, 58, 60, 61, 63, 64, 66, 73, 77, 80, 84, 86, 87, 88, 90, 92, 93, 95, 96, 98], "opt": [10, 12, 19, 46, 48, 50, 56, 57, 60, 61, 62, 63, 65, 70, 71, 72, 73, 74, 77, 88], "intel": [10, 12, 93], "2015": [10, 47, 80, 82, 92], "9895": 10, "highli": 10, "25hz": 10, "30hz": 10, "give": [10, 14, 15, 16, 31, 33, 38, 39, 41, 42, 44, 53, 55, 56, 57, 58, 61, 63, 64, 65, 66, 70, 71, 72, 73, 74, 76, 77, 80, 81, 85, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "burn": [10, 31, 33, 39, 40, 45, 60, 61, 64, 92], "sky": [10, 16, 29, 33, 35, 38, 41, 43, 53, 55, 58, 63, 70, 71, 75, 77, 81, 83, 92, 93, 95], "uniformli": [10, 18, 29, 53, 63, 74], "arcco": 10, "although": [10, 12, 33, 63, 80, 92, 93, 96], "matter": [10, 20, 32, 80, 92], "stochast": [10, 73], "placement": [10, 73], "like": [10, 12, 15, 21, 29, 31, 33, 35, 38, 40, 42, 43, 47, 53, 55, 56, 58, 60, 61, 63, 64, 66, 69, 74, 77, 78, 80, 84, 88, 89, 91, 92, 93, 95, 96, 97, 98], "sbank": [10, 53, 98], "abl": [10, 29, 31, 42, 43, 44, 47, 52, 80, 82, 84, 86, 92, 95, 96], "guarante": [10, 42, 58], "point": [10, 20, 32, 34, 36, 37, 38, 39, 41, 42, 44, 45, 48, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 86, 90, 91, 92, 93, 94, 95, 96, 98], "cover": [10, 18, 53, 56, 70, 73, 77, 80, 86, 90, 98], "better": [10, 53, 64, 69, 76, 80, 92, 97], "97": [10, 73, 80, 98], "success": [10, 12, 53, 62, 90, 93], "further": [10, 31, 42, 43, 55, 56, 74, 80, 97], "might": [10, 58, 63, 66, 72, 73, 76, 77, 78, 80, 85, 88, 90, 93, 95, 96], "95": [10, 71, 80], "particular": [10, 35, 53, 54, 55, 56, 58, 59, 64, 65, 66, 70, 72, 77, 78, 88, 89, 93], "part": [10, 12, 49, 53, 55, 62, 63, 65, 66, 72, 73, 74, 76, 77, 80, 85, 86, 89, 90, 93, 96, 97, 98], "three": [10, 29, 33, 35, 37, 55, 69, 70, 71, 74, 87, 93, 95, 96], "while": [10, 26, 31, 36, 37, 43, 44, 53, 60, 63, 66, 71, 73, 76, 80, 83, 85, 92, 93], "successfulli": [10, 91, 92, 93], "possibl": [10, 14, 20, 31, 33, 35, 40, 41, 43, 53, 54, 55, 56, 58, 61, 63, 66, 69, 71, 75, 76, 77, 80, 85, 87, 88, 89, 90, 92, 95, 96, 98], "due": [10, 33, 43, 53, 69, 70, 76, 93], "differ": [10, 12, 18, 23, 26, 31, 33, 34, 35, 36, 38, 41, 42, 43, 44, 45, 47, 48, 53, 55, 56, 58, 60, 61, 63, 64, 65, 66, 72, 73, 76, 77, 78, 80, 84, 86, 87, 88, 89, 90, 91, 92, 93, 96, 97, 98], "sensitivit": 10, "two": [10, 11, 15, 22, 23, 28, 29, 31, 33, 35, 39, 41, 42, 52, 53, 55, 56, 57, 58, 60, 63, 65, 66, 70, 71, 73, 74, 75, 76, 77, 80, 83, 84, 87, 88, 90, 91, 92, 93, 94, 96], "precess": [10, 33, 53, 63, 69, 75, 77, 80, 92], "disrupt": 10, "etc": [10, 12, 21, 29, 30, 39, 41, 42, 43, 48, 53, 56, 64, 66, 69, 76, 77, 80, 87, 88, 90, 93, 95], "level": [10, 11, 31, 42, 44, 48, 53, 55, 57, 61, 63, 64, 65, 66, 70, 76, 77, 79, 80, 85, 88, 90, 92, 93, 94, 95], "wa": [10, 29, 30, 31, 33, 34, 35, 42, 45, 53, 55, 58, 60, 61, 62, 63, 64, 66, 70, 71, 73, 74, 76, 77, 80, 82, 86, 88, 90, 91, 93, 95, 96], "coverag": [10, 53, 77, 80], "70": [10, 73, 80, 88, 98], "anti": 10, "spars": [10, 56, 90], "size": [10, 18, 23, 31, 41, 53, 55, 56, 57, 58, 60, 63, 66, 71, 73, 74, 76, 77, 80, 87, 90, 93, 95], "too": [10, 49, 55, 56, 58, 66, 77, 80, 89, 90, 92, 93, 95, 97, 98], "tight": 10, "particularli": [10, 80], "problem": [10, 40, 43, 77, 80, 86, 93], "higher": [10, 33, 38, 41, 43, 46, 53, 55, 63, 69, 73, 76, 80, 93], "speed": [10, 33, 37, 39, 41, 43, 48, 73, 76, 80, 90, 92, 98], "sped": 10, "reduc": [10, 24, 33, 34, 48, 53, 55, 56, 58, 65, 71, 72, 74, 80, 93, 95], "instead": [10, 15, 18, 23, 29, 31, 33, 34, 42, 48, 53, 55, 58, 61, 63, 64, 66, 71, 73, 74, 76, 77, 80, 84, 91, 93, 96, 98], "tighten": 10, "being": [10, 12, 31, 53, 55, 56, 60, 61, 63, 64, 65, 66, 73, 74, 75, 76, 77, 80, 84, 86, 88, 89, 90, 93, 94, 95, 96, 97, 98], "develop": [10, 11, 12, 14, 20, 25, 80, 84, 87, 88, 89, 90, 95, 97, 98], "dynam": [10, 12, 56, 72, 80, 90, 93, 98], "replic": [10, 26], "switch": [10, 53, 66, 76, 77, 96], "exist": [10, 12, 22, 23, 25, 26, 29, 31, 49, 53, 55, 56, 57, 58, 61, 63, 64, 65, 66, 69, 71, 73, 74, 76, 77, 80, 86, 87, 88, 93, 94, 95, 97], "current": [10, 12, 19, 20, 23, 25, 26, 31, 33, 34, 36, 42, 44, 46, 47, 48, 53, 54, 55, 56, 57, 60, 61, 63, 64, 65, 66, 69, 70, 72, 73, 74, 75, 76, 77, 80, 83, 86, 88, 89, 90, 93, 94, 96, 97, 98], "master": [10, 11, 19, 48, 53, 55, 64, 69, 71, 79, 93, 95], "built": [11, 12, 16, 20, 43, 52, 55, 70, 76, 77], "branch": [11, 12, 19, 46, 48, 79, 93], "repositori": [11, 12, 19, 20, 42, 44, 46, 48, 79, 93], "gh": 11, "have": [11, 12, 20, 21, 23, 24, 26, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 46, 48, 49, 52, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 71, 73, 74, 76, 77, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98], "alreadi": [11, 23, 30, 48, 49, 53, 56, 58, 60, 61, 63, 65, 66, 70, 73, 74, 76, 77, 80, 84, 88, 89, 98], "git": [11, 12, 19, 20, 46, 48, 53, 69, 77, 79, 88, 95, 96], "checkout": [11, 12, 48, 79], "orphan": 11, "rm": [11, 48, 93], "rf": [11, 48, 69, 76], "clean": [11, 12, 46, 73, 93], "dxf": 11, "touch": [11, 87], "nojekyl": 11, "mkdir": [11, 48, 49, 95], "latest": [11, 12, 14, 19, 34, 38, 48, 56, 77, 80, 92, 93, 96], "commit": [11, 12, 79], "origin": [11, 24, 53, 55, 56, 61, 63, 72, 73, 74, 76, 77, 86, 93], "upstream": 11, "just": [11, 15, 26, 29, 32, 33, 34, 35, 36, 37, 38, 41, 42, 44, 48, 49, 53, 55, 56, 60, 61, 63, 64, 65, 66, 71, 73, 74, 76, 77, 79, 80, 84, 91, 92, 93, 96], "gwastro": [11, 42, 44, 46, 55, 84], "instal": [11, 12, 19, 20, 32, 37, 53, 66, 77, 82, 92, 93, 95], "cannot": [11, 42, 53, 56, 58, 63, 64, 66, 74, 76, 77, 80, 93, 97], "out": [11, 12, 23, 28, 29, 30, 31, 44, 53, 56, 57, 58, 60, 61, 63, 64, 66, 69, 72, 73, 74, 76, 77, 80, 85, 88, 91, 92, 93, 95, 96], "anoth": [11, 12, 18, 29, 42, 53, 61, 63, 65, 66, 74, 77, 88, 93], "insid": [11, 19, 48, 53, 57, 77, 93], "assum": [11, 29, 33, 34, 35, 36, 38, 43, 47, 48, 53, 55, 56, 60, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 76, 77, 80, 87, 91, 92, 93, 98], "cd": [11, 46, 48, 91, 92, 93, 95], "repo": [11, 12], "clone": [11, 12, 46, 48], "com": [11, 12, 46, 55, 64, 66, 73, 84, 88, 93, 95], "usernam": [11, 12], "_gh": 11, "now": [11, 12, 18, 29, 32, 33, 34, 35, 36, 37, 38, 39, 41, 47, 48, 49, 55, 56, 63, 74, 77, 80, 86, 87, 88, 90, 93, 95, 96, 97], "flush": 11, "content": [11, 23, 28, 50, 80, 85], "realli": [11, 53, 80], "under": [11, 24, 35, 46, 48, 53, 56, 59, 63, 73, 76, 80, 82, 83, 87, 88, 93], "control": [11, 53, 55, 80, 87, 90, 93, 94, 95, 98], "publish": [11, 42, 79, 93], "last": [11, 26, 31, 32, 33, 36, 37, 39, 44, 53, 56, 60, 61, 63, 64, 66, 73, 76, 77, 79, 80, 90, 91, 92, 93], "put": [11, 33, 55, 56, 57, 66, 71, 76, 77, 80, 86, 88, 92, 93, 97], "back": [11, 16, 53, 55, 56, 57, 61, 64, 72, 78, 79, 80, 88, 90, 93, 98], "top": [11, 20, 31, 48, 55, 61, 63, 65, 66, 76, 77, 85, 88, 93, 96], "python": [11, 12, 13, 14, 16, 28, 29, 31, 44, 46, 47, 48, 49, 53, 55, 56, 57, 61, 64, 66, 73, 74, 77, 81, 83, 84, 88, 90, 92, 97], "setup": [11, 31, 35, 46, 49, 53, 63, 64, 77, 79, 80, 84, 93], "py": [11, 13, 16, 18, 42, 44, 46, 53, 55, 56, 64, 65, 74, 76, 77, 79, 83, 84, 88, 90], "build_gh_pag": 11, "updat": [11, 12, 23, 33, 42, 53, 56, 60, 63, 64, 66, 69, 70, 74, 76, 77, 79, 86, 90], "http": [11, 12, 24, 28, 29, 34, 37, 38, 39, 41, 48, 49, 53, 55, 56, 57, 58, 63, 64, 66, 67, 69, 72, 73, 74, 75, 76, 77, 80, 83, 84, 86, 88, 89, 90, 92, 93, 94, 95, 96, 97, 98], "html": [11, 20, 34, 38, 46, 71, 77, 80, 86, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "Be": [11, 77, 80, 86, 93, 96], "care": [11, 23, 58, 66, 76, 77, 78, 80, 93, 96], "wrong": [11, 80], "delet": [11, 12, 31, 45, 61, 65, 77, 80, 88, 90, 93, 95], "accid": [11, 66], "reset": [11, 63, 68, 72], "undo": 11, "weav": 12, "still": [12, 31, 33, 41, 66, 80, 89, 91, 92], "most": [12, 33, 36, 42, 43, 45, 46, 47, 53, 57, 60, 63, 66, 67, 71, 76, 77, 80, 86, 88, 91, 93, 95, 97, 98], "applic": [12, 23, 30, 36, 66, 74, 80, 86, 98], "standard": [12, 18, 31, 33, 46, 53, 55, 56, 57, 60, 61, 66, 69, 71, 73, 74, 77, 80, 84, 86, 87, 88, 90, 91, 92, 93], "runtim": [12, 33, 34, 46, 77, 86, 95], "librari": [12, 30, 40, 47, 49, 53, 66, 71, 77, 86, 93], "environ": [12, 19, 46, 47, 49, 61, 63, 77, 86, 88, 90, 92, 93, 95], "compat": [12, 19, 58, 63, 66, 84, 90, 98], "glibc": 12, "gcc": 12, "pycbc_inspir": [12, 20, 25, 56, 77, 93], "compil": [12, 53, 57], "full": [12, 17, 29, 30, 31, 38, 39, 53, 55, 57, 63, 66, 73, 74, 76, 77, 80, 86, 87, 88, 89, 90, 91, 93, 94, 96], "open": [12, 29, 34, 37, 53, 55, 59, 60, 61, 63, 64, 66, 71, 72, 73, 76, 82, 84], "scienc": [12, 29, 34, 59, 77, 84, 85, 86, 88, 90, 94, 95, 96, 98], "grid": [12, 26, 28, 34, 43, 48, 49, 52, 63, 71, 76, 77, 80, 91, 92, 98], "access": [12, 16, 17, 23, 25, 26, 29, 30, 31, 46, 52, 53, 56, 64, 66, 74, 76, 77, 81, 84, 86, 88, 90, 93, 96], "osg": [12, 48, 77, 93], "mani": [12, 15, 22, 23, 29, 31, 35, 40, 53, 57, 61, 63, 64, 73, 76, 77, 80, 82, 87, 88, 92, 93, 95, 97], "machin": [12, 48, 77, 86, 93, 95], "einstein": [12, 93], "stricter": 12, "varieti": [12, 78], "system": [12, 14, 20, 23, 33, 46, 47, 48, 49, 53, 55, 63, 67, 69, 73, 76, 80, 87, 88, 90, 93], "both": [12, 29, 31, 33, 35, 43, 44, 53, 55, 57, 61, 62, 63, 64, 66, 71, 73, 74, 75, 76, 77, 86, 88, 90, 92, 93, 95, 96, 98], "pyinstal": [12, 17], "c": [12, 13, 19, 29, 31, 35, 49, 53, 55, 66, 72, 73, 75, 77, 88, 89, 90, 98], "interpert": 12, "pre": [12, 53, 55, 57, 63, 65, 76, 77, 80, 82, 88, 90, 93, 98], "pycbc_build_eah": 12, "self": [12, 53, 55, 56, 58, 60, 61, 63, 66, 73, 74, 76, 77, 84], "complet": [12, 33, 43, 74, 76, 77, 80, 84, 85, 86, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "static": [12, 29, 33, 35, 36, 41, 53, 55, 56, 57, 61, 63, 64, 65, 69, 75, 76, 77], "link": [12, 20, 37, 46, 53, 57, 70, 71, 77, 80, 85, 88, 90, 93, 95, 98], "linux": [12, 19, 49, 77], "backward": [12, 57], "forward": [12, 19, 53, 57, 90], "lowest": [12, 33, 76], "common": [12, 15, 31, 35, 42, 44, 46, 53, 55, 61, 63, 64, 71, 73, 74, 75, 76, 77, 78, 80, 88, 93, 95, 97], "denomin": [12, 53], "platform": [12, 19, 46], "rhel6": 12, "executal": 12, "rhel7": 12, "debian": 12, "wheezi": 12, "jessi": 12, "older": [12, 49, 79], "etch": 12, "softwar": [12, 19, 30, 42, 48, 80, 89, 90, 93, 95, 98], "fftw": [12, 23, 36, 46, 48, 50, 53, 90], "download": [12, 19, 28, 32, 33, 34, 35, 36, 37, 38, 39, 41, 48, 78, 88, 91, 92, 93, 94, 95], "without": [12, 16, 25, 31, 48, 49, 52, 53, 55, 56, 61, 63, 66, 71, 73, 74, 76, 77, 80, 82, 83, 88, 90, 93, 95], "virtual": [12, 46, 47, 49, 61, 66], "deactiv": [12, 47, 48, 49, 71], "leav": [12, 47, 63, 88, 92, 93], "einsteinathom": 12, "forc": [12, 32, 33, 34, 35, 36, 37, 38, 39, 41, 43, 61, 63, 76, 84, 92], "debian4": 12, "help": [12, 20, 29, 30, 31, 33, 45, 61, 63, 66, 71, 72, 73, 74, 76, 78, 80, 88, 90, 93, 94, 95, 97, 98], "tue": 12, "jun": 12, "20": [12, 13, 28, 31, 33, 34, 35, 38, 45, 53, 55, 56, 62, 63, 64, 66, 70, 71, 72, 76, 82, 84, 90, 92, 93], "04": [12, 29], "utc": 12, "2023": 12, "print": [12, 13, 16, 18, 19, 23, 29, 37, 49, 52, 53, 55, 61, 63, 71, 76, 77, 80, 83, 86, 90, 92, 97], "env": [12, 46, 48, 49, 90, 93], "dump": [12, 20, 31, 33, 53, 61, 64, 66, 77, 85, 88], "messg": 12, "exit": [12, 33, 53, 61, 64, 77, 80, 90, 91, 92, 93, 95, 97, 98], "perform": [12, 24, 29, 31, 33, 35, 41, 43, 45, 49, 56, 57, 58, 60, 64, 65, 66, 73, 75, 76, 77, 80, 81, 85, 86, 87, 89, 90, 91, 92, 93, 95, 98], "take": [12, 16, 18, 26, 28, 29, 31, 32, 35, 37, 38, 39, 41, 42, 45, 46, 53, 55, 56, 57, 59, 60, 63, 64, 66, 69, 71, 73, 74, 76, 77, 79, 80, 83, 84, 86, 88, 90, 93, 94, 95, 97], "quit": [12, 63], "tarbal": [12, 84], "precompil": 12, "lalsuit": [12, 19, 46, 53, 80, 89, 90, 93, 95, 98], "scipi": [12, 20, 55, 56, 58, 63, 69, 71, 76], "scratch": [12, 19, 76, 85, 93], "sundai": 12, "tag": [12, 19, 31, 48, 53, 55, 62, 66, 71, 74, 77, 79, 80, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "bless": 12, "github": [12, 17, 19, 20, 46, 48, 55, 64, 84, 88, 93, 95], "reliabl": [12, 73, 80], "conjunct": [12, 90], "remot": [12, 77, 86, 93, 95], "don": [12, 39, 41, 53, 58, 61, 63, 64, 66, 72, 73, 74, 76, 77, 80, 86, 87, 90, 93, 96], "bema": 12, "einsteinathome_test": 12, "cleanup": [12, 32, 45, 83], "keep": [12, 20, 33, 44, 55, 61, 63, 68, 87, 90, 92, 93], "later": [12, 18, 35, 56, 60, 73, 77, 80, 85, 86, 88, 93, 96], "inspect": [12, 29, 44, 91], "lib": [12, 49, 53], "tar": [12, 49], "again": [12, 45, 49, 57, 63, 72, 77, 91, 93, 94, 95], "lal": [12, 29, 48, 50, 53, 58, 73, 74, 76, 77, 86], "verbos": [12, 29, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 53, 80, 90, 92, 97, 98], "show": [12, 13, 15, 18, 24, 28, 29, 32, 36, 37, 38, 39, 40, 41, 46, 51, 52, 53, 71, 77, 78, 80, 83, 84, 90, 91, 92, 93, 95, 97, 98], "import": [12, 13, 15, 16, 18, 23, 24, 25, 26, 28, 29, 31, 37, 40, 49, 51, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 73, 76, 77, 80, 83, 84, 88, 89, 90, 93, 96], "silent": [12, 37, 38, 39, 41], "brint": 12, "messag": [12, 20, 53, 73, 76, 80, 88, 90, 93, 95, 97, 98], "unless": [12, 31, 45, 61, 77, 79, 80, 84, 85, 90], "error": [12, 33, 34, 37, 38, 39, 41, 53, 54, 55, 56, 57, 60, 61, 63, 64, 66, 69, 71, 74, 76, 77, 78, 84, 88, 90, 92, 93, 95], "fetch": [12, 56, 93], "specif": [12, 14, 16, 29, 33, 35, 42, 43, 48, 53, 54, 55, 56, 60, 61, 63, 65, 66, 69, 73, 76, 77, 78, 80, 81, 85, 86, 88, 89, 90, 92, 93, 95, 96, 98], "pars": [12, 53, 55, 56, 57, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 88, 93, 95], "spell": 12, "dist": [12, 33, 36, 53, 55, 63, 69, 73, 87, 93], "pycbc_inspiral_osg": 12, "pycbc_inspiral_osg_vx": 12, "form": [12, 22, 53, 56, 60, 63, 67, 77, 80, 84, 93, 95, 98], "vx": [12, 79], "know": [12, 23, 33, 39, 41, 53, 63, 72, 73, 77, 80, 86, 90, 91, 92, 93, 96], "about": [12, 15, 16, 23, 31, 32, 37, 39, 41, 42, 53, 54, 55, 58, 59, 61, 63, 66, 69, 70, 71, 73, 76, 77, 80, 81, 84, 86, 90, 93, 95, 96, 97, 98], "minim": [12, 53, 73, 76, 80, 84, 98], "hash": [12, 76, 77, 79], "a2a5a476d33f169b8749e2840c306a48df63c936": 12, "b68832784969a47fe2658abffb3888ee06cd1be4": 12, "them": [12, 29, 31, 33, 35, 41, 44, 53, 55, 56, 58, 63, 64, 65, 66, 69, 73, 76, 77, 78, 79, 80, 81, 84, 86, 88, 91, 92, 93, 95], "composer_xe_2015": 12, "090": 12, "oasi": [12, 46, 48, 93], "opensciencegrid": [12, 46, 48, 93], "org": [12, 24, 28, 34, 37, 38, 39, 41, 46, 48, 49, 53, 56, 57, 58, 63, 69, 72, 74, 75, 76, 77, 80, 83, 84, 87, 88, 89, 90, 92, 93, 94, 95, 96, 98], "sw": [12, 46, 48, 93], "share": [12, 35, 43, 48, 53, 57, 61, 63, 77, 80, 88, 91, 92, 93, 95], "would": [12, 15, 16, 21, 23, 29, 31, 33, 34, 35, 41, 42, 44, 47, 53, 55, 57, 61, 64, 66, 73, 74, 76, 77, 78, 80, 84, 88, 89, 90, 92, 93, 95, 96, 98], "own": [12, 20, 21, 31, 33, 36, 43, 44, 46, 48, 61, 63, 88, 91, 92, 93], "mention": [12, 42, 44, 92, 93, 96], "case": [12, 18, 23, 29, 31, 33, 39, 41, 43, 48, 53, 55, 56, 58, 60, 62, 63, 64, 65, 66, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 86, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "soumide1102": 12, "comp_wave_in_search": 12, "tell": [12, 23, 29, 31, 35, 46, 84, 86, 88, 89, 90, 91, 92, 93, 96, 97, 98], "ensur": [12, 31, 53, 55, 56, 61, 63, 68, 72, 74, 76, 77, 79, 80, 82, 87, 88, 90, 92, 93, 98], "necessari": [12, 31, 33, 34, 38, 53, 56, 61, 65, 70, 71, 72, 73, 76, 77, 80, 82, 86, 91, 92, 93, 96], "spatmplt": [12, 63, 90, 93, 94], "seobnrv4_rom": [12, 83], "els": [12, 55, 58, 63, 66, 71, 74, 75, 76, 77, 90], "compress": [12, 50, 53, 90, 98], "soumi": 12, "de": 12, "project": [12, 18, 53, 56, 65, 81, 93], "seobnrrom": 12, "proj": 12, "testbank_tf2v4rom": 12, "a3a5a476d33f169b8749e2840c306a48df63c936": 12, "grow": [13, 31, 33], "through": [13, 14, 15, 23, 26, 30, 42, 44, 46, 47, 52, 56, 57, 58, 60, 64, 69, 71, 74, 77, 80, 81, 85, 86, 88, 93, 94], "packag": [13, 31, 37, 40, 46, 47, 48, 49, 50, 80, 82, 84, 85, 93, 95], "gwtc": [13, 34, 38, 54], "No": [13, 16, 31, 53, 57, 58, 63, 69, 73, 75, 76, 80, 83, 87, 90, 92, 93, 97, 98], "cupi": [13, 16, 80, 83, 90, 93, 95, 97, 98], "phenomhm": [13, 16, 80, 83, 90, 93, 95, 97, 98], "modul": [13, 14, 15, 16, 17, 18, 26, 29, 31, 33, 36, 42, 44, 50, 83, 84, 87, 93, 95], "interpol": [13, 16, 28, 43, 52, 53, 58, 63, 69, 70, 73, 74, 76, 77, 80, 83, 88, 90, 93, 95, 97, 98], "dict_kei": 13, "gw190930_133541": 13, "v1": [13, 16, 19, 39, 41, 54, 59, 73, 74, 75, 77, 78, 79, 80, 83, 86, 88, 92, 93, 96, 98], "gw190929_012149": 13, "gw190924_021846": 13, "gw190915_235702": 13, "gw190910_112807": 13, "gw190909_114149": 13, "gw190828_065509": 13, "gw190828_063405": 13, "gw190814": 13, "v2": [13, 73], "gw190803_022701": 13, "gw190731_140936": 13, "gw190728_064510": 13, "gw190727_060333": 13, "gw190720_000836": 13, "gw190719_215514": 13, "gw190708_232457": 13, "gw190707_093326": 13, "gw190706_222641": 13, "gw190701_203306": 13, "gw190630_185205": 13, "gw190620_030421": 13, "gw190602_175927": 13, "gw190527_092055": 13, "gw190521_074359": 13, "gw190521": 13, "v3": [13, 34, 38, 73, 84], "gw190519_153544": 13, "gw190517_055101": 13, "gw190514_065416": 13, "gw190513_205428": 13, "gw190512_180714": 13, "gw190503_185404": 13, "gw190426_152155": 13, "gw190425": 13, "gw190424_180648": 13, "gw190421_213856": 13, "gw190413_134308": 13, "gw190413_052954": 13, "gw190412": 13, "gw190408_181802": 13, "1253885759": 13, "1253755327": 13, "1253326744": 13, "1252627040": 13, "1252150105": 13, "1252064527": 13, "1251010527": 13, "9": [13, 15, 53, 60, 66, 70, 77, 80, 83, 87, 93], "1251009263": 13, "1249852257": 13, "1248834439": 13, "1248617394": 13, "1248331528": 13, "1248242632": 13, "1247616534": 13, "1247608532": 13, "1246663515": 13, "1246527224": 13, "1246487219": 13, "1246048404": 13, "1245955943": 13, "1245035079": 13, "1243533585": 13, "1242984073": 13, "1242459857": 13, "1242442967": 13, "1242315362": 13, "1242107479": 13, "1241852074": 13, "1241816086": 13, "1241719652": 13, "1240944862": 13, "1240327333": 13, "1240215503": 13, "1240164426": 13, "1239917954": 13, "1239198206": 13, "1239168612": 13, "1239082262": 13, "1238782700": 13, "matplotlib": [13, 15, 18, 20, 24, 28, 51, 52, 71, 83, 84], "pyplot": [13, 15, 18, 24, 28, 51, 52, 53, 71, 83, 84], "pp": [13, 15, 24, 28, 51, 52, 77, 83, 84, 91], "elow": [13, 53], "ehigh": [13, 53], "median1d": [13, 53, 54], "return_error": [13, 54], "true": [13, 18, 36, 37, 38, 40, 41, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 84, 86, 88, 89, 93, 96], "chi_eff": [13, 50, 53, 55, 66, 76, 91, 92], "errorbar": 13, "xerr": 13, "fmt": [13, 53, 71], "o": [13, 17, 31, 37, 38, 39, 41, 53, 60, 61, 63, 77, 80, 86, 92, 97, 98], "markers": 13, "xlabel": [13, 15, 18, 24, 28, 51, 52, 71, 83, 84], "chirp": [13, 18, 29, 31, 36, 37, 39, 53, 55, 56, 65, 66, 69, 73, 76, 80, 84, 90, 92, 97, 98], "xscale": [13, 84], "ylabel": [13, 18, 24, 28, 51, 71, 83], "png": [13, 15, 18, 24, 28, 32, 36, 37, 38, 39, 41, 45, 51, 52, 71, 77, 83, 84, 93], "hire": [13, 15, 18, 24, 28, 51, 52, 83, 84], "pdf": [13, 15, 18, 24, 28, 51, 52, 53, 55, 56, 60, 63, 64, 67, 69, 71, 83, 84], "easili": [13, 63, 69, 77, 80, 86, 88, 95], "gw170817": [13, 39, 41], "fig": [13, 18, 53, 71], "ax": [13, 18, 53, 71, 73], "subplot": [13, 18, 71], "sharex": [13, 71], "sharei": 13, "zip": 13, "sca": 13, "titl": [13, 18, 55, 63, 66, 71, 77, 79, 92, 93, 94], "retreiv": [13, 61, 77], "time_slic": [13, 53, 74], "white": [13, 68, 71, 77], "power": [13, 24, 25, 55, 56, 57, 58, 69, 70, 71, 72, 73, 74, 75, 76, 78, 80, 90, 92, 98], "qtransform": [13, 50, 53, 74], "01": [13, 36, 37, 53, 62, 64, 73, 80, 88, 98], "logfstep": [13, 74], "200": [13, 18, 31, 33, 36, 40, 41, 55, 72, 80, 87, 92, 93], "qrang": [13, 58, 74], "110": 13, "frang": [13, 53, 58, 74], "512": [13, 33, 70, 72, 90, 93], "pcolormesh": 13, "vmax": [13, 41, 71], "yscale": 13, "ask": [14, 53, 80, 89, 90, 95, 97, 98], "citat": 14, "doi": [14, 56], "bibtex": 14, "kei": [14, 16, 20, 25, 42, 53, 55, 56, 61, 63, 64, 65, 66, 69, 71, 72, 73, 74, 76, 77, 80, 81, 84, 86, 88, 89, 90, 93, 95, 98], "releas": [14, 17, 19, 30, 46, 48, 59, 93], "avali": 14, "zenodo": [14, 37], "found": [14, 29, 30, 33, 49, 53, 55, 56, 58, 61, 62, 63, 64, 69, 70, 73, 74, 76, 77, 80, 82, 85, 86, 87, 88, 89, 90, 92, 93, 94, 95], "pleas": [14, 20, 28, 30, 36, 37, 55, 65, 69, 73, 74, 76, 80, 81, 82, 85, 88, 89, 90, 91, 92, 93, 95, 97, 98], "closest": [14, 70, 73, 77, 80, 98], "larg": [14, 24, 31, 33, 34, 38, 55, 57, 65, 66, 69, 72, 73, 80, 88, 92, 93], "proper": [14, 53, 58, 90, 93], "credit": 14, "appropri": [14, 20, 34, 37, 46, 47, 48, 53, 56, 57, 61, 63, 67, 70, 71, 73, 76, 77, 78, 79, 80, 86, 91, 92, 93, 96, 97], "deriv": [14, 31, 53, 55, 56, 58, 61, 63, 67, 69, 74, 76, 91, 92], "those": [14, 23, 36, 42, 44, 53, 56, 61, 63, 66, 71, 74, 76, 77, 80, 86, 88, 90, 92, 93, 95], "paper": [14, 53, 56, 70, 75, 94, 98], "toolkit": [14, 53], "findchirp": [14, 56, 72, 75, 90, 94], "chi": [14, 24, 53, 56, 63, 67, 71, 73, 75, 80, 90], "squar": [14, 18, 56, 63, 70, 71, 73, 74, 75, 80, 90, 98], "discrimin": [14, 24], "understand": [14, 31, 58, 71, 72, 88, 93, 95], "improv": [14, 20, 23, 30, 63, 74, 90, 98], "neutron": [14, 31, 35, 53, 67, 73, 80], "star": [14, 31, 35, 53, 67, 69, 73, 80], "black": [14, 33, 35, 36, 37, 53, 71, 76, 80, 92], "hole": [14, 33, 35, 36, 37, 53, 76, 80, 92], "advanc": [14, 24, 33, 37, 53, 56, 60, 64, 72, 76, 80, 82, 95, 96], "ground": [14, 26, 70], "offlin": [14, 56, 58, 77, 93, 95], "pipelin": [14, 48, 77, 86, 87, 88, 89, 93, 95], "addition": [14, 66, 76, 77, 80, 93], "latenc": [14, 69], "live": [14, 20, 25, 50, 53, 56, 64, 69, 74, 92, 93], "rapid": [14, 58, 76], "realtim": 14, "third": [14, 54, 66, 70, 72, 74, 80, 93], "observ": [14, 16, 35, 63, 69, 70, 80, 81, 95], "state": [15, 31, 35, 42, 53, 55, 56, 61, 63, 64, 66, 67, 69, 73, 88, 93, 96], "resourc": [15, 30, 92, 93], "lvc": [15, 69, 85, 96], "proprietari": 15, "outlin": [15, 95], "few": [15, 23, 33, 38, 45, 53, 56, 58, 63, 65, 66, 72, 74, 76, 77, 88, 93, 96], "activ": [15, 46, 47, 48, 53, 56, 66, 71, 73, 77, 80, 87, 88, 96, 98], "result": [15, 30, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 50, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 66, 67, 69, 70, 72, 73, 74, 76, 77, 78, 80, 82, 88, 90, 93, 95, 96], "ifo_color": [15, 53, 71], "start_tim": [15, 16, 25, 29, 53, 59, 66, 68, 72, 74, 83], "1126051217": [15, 80], "end_tim": [15, 25, 29, 53, 56, 59, 65, 66, 68, 72, 73, 74, 77, 83], "100000": [15, 18, 53, 80, 93], "hanford": [15, 16, 59, 81, 95], "hseg": 15, "query_flag": [15, 50, 53, 63], "livingston": [15, 95], "lseg": 15, "figur": [15, 18, 23, 53, 61, 64, 71, 76, 84, 92], "figsiz": [15, 18], "seg": [15, 53, 56, 66, 77, 90, 95], "axvspan": 15, "ymin": [15, 71], "ymax": [15, 71], "10000000": 15, "cbc_hw_inj": 15, "blue": [15, 18, 92], "quier": 15, "raw": [15, 52, 58, 61, 64, 66, 70, 74, 96], "h1_data": 15, "negat": 15, "no_cbc_hw_inj": 15, "isn": [15, 20, 63, 65, 88], "similarli": [15, 63, 94], "cbc_cat2_veto": 15, "cbc_cat2": 15, "advers": 15, "affect": [15, 16, 33, 34, 38, 57, 58, 66, 72, 76, 93], "orient": [16, 33, 53], "posit": [16, 32, 33, 36, 37, 38, 39, 41, 53, 55, 56, 63, 64, 70, 72, 73, 74, 76, 80, 95], "get_available_detector": [16, 50, 53], "abbrevi": 16, "longer": [16, 23, 31, 53, 55, 56, 70, 74, 77, 80, 90, 91, 92, 96, 98], "physic": [16, 35, 56, 59, 63, 67, 73, 76, 77, 80, 84, 93, 98], "studi": [16, 30, 53], "abv": 16, "long_nam": 16, "radian": [16, 53, 55, 67, 72, 76, 83], "latitud": [16, 53], "loc": [16, 53, 83], "tama_300": 16, "t1": [16, 53, 56], "6226733601781139": 16, "435363594690946": 16, "virgo_citf": 16, "v0": 16, "7615118398044829": 16, "1833380521285067": 16, "geo_600": 16, "g1": [16, 26], "9118498274833728": 16, "17116780434996115": 16, "lho_2k": 16, "h2": [16, 63, 76, 77, 86, 88], "810795263791696": 16, "08405676916594": 16, "lho_4k": 16, "llo_4k": 16, "5334231350225018": 16, "5843093707829257": 16, "lio_4k": 16, "i1": 16, "24841853018214574": 16, "3340133249409996": 16, "cit_40": 16, "c1": 16, "5963790053711457": 16, "061757445380561": 16, "et1_t1400308": 16, "e1": [16, 63], "et2_t1400308": 16, "e2": [16, 57, 63], "7629930799052169": 16, "18405858870223898": 16, "et3_t1400308": 16, "e3": 16, "7627046325725655": 16, "18192996730110464": 16, "et0_t1400308": 16, "e0": 16, "k1": [16, 53, 77], "6355068496865413": 16, "396441015339088": 16, "aciga": 16, "u1": 16, "5707963267948966": [16, 55], "allegro_320": 16, "a1": [16, 69], "5307987920242562": 16, "5913706849572118": 16, "auriga": 16, "7915649933828905": 16, "2085377567924929": 16, "explor": [16, 41, 43, 80, 93], "x1": [16, 86], "8107054375131121": 16, "10821041362369214": 16, "nautilu": 16, "n1": [16, 57], "7299645670603321": 16, "2211768494583896": 16, "niob": 16, "b1": [16, 79], "5573418077694188": 16, "0213821620185053": 16, "ifo1": [16, 77], "ifo2": [16, 77], "dt": [16, 69, 74, 76, 84, 92], "light_travel_time_to_detector": [16, 50, 53], "010012846152223925": 16, "027287979933844225": 16, "026448341016726495": 16, "astropi": [16, 53, 66, 74], "util": [16, 18, 31, 33, 42, 50, 53, 56, 58, 61, 63, 64, 65, 66, 67, 70, 71, 74, 77, 83, 88, 97, 98], "ier": 16, "sure": [16, 18, 35, 46, 47, 48, 77, 79, 87, 92, 93], "internet": 16, "connect": [16, 19, 29, 66, 93], "auto_download": 16, "fals": [16, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 88, 90, 93, 98], "right_ascens": [16, 53, 83], "see": [16, 19, 23, 29, 30, 31, 32, 33, 34, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 52, 53, 55, 56, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 84, 85, 86, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98], "time_delay_from_earth_cent": [16, 50, 53], "geocentr": [16, 29, 53, 56, 76], "dref": 16, "gw": [16, 30, 31, 46, 53, 54, 63, 70, 81, 84, 90], "100000000": [16, 53], "time_delay_from_detector": [16, 50, 53], "st": [16, 58], "delai": [16, 24, 41, 53, 56, 58, 69, 74], "002444164315968924": 16, "014733669722672925": 16, "get_td_waveform": [16, 43, 53, 76, 83, 84], "pol": [16, 37, 53, 76], "calcual": 16, "fp": [16, 31, 60, 61, 63, 64, 66, 76], "fc": [16, 63, 72], "weight": [16, 25, 43, 53, 56, 58, 60, 61, 63, 64, 68, 70, 71, 74, 76, 80], "antenna_pattern": [16, 50, 53], "u": [16, 29, 30, 43, 55, 58, 66, 73, 74, 77, 80, 86, 88, 90, 93, 98], "hp": [16, 24, 28, 53, 63, 65, 76, 83, 84], "hc": [16, 24, 28, 53, 63, 65, 76, 83, 84], "imrphenomd": [16, 24, 28, 35, 37, 38, 63, 66, 83, 90], "400": [16, 77], "ht": [16, 58], "rotat": [16, 43, 53, 55, 58, 67, 71, 73, 74], "earth": [16, 43, 53, 58, 95], "project_wav": [16, 50, 53, 83], "ant": 16, "3854854760833507": 16, "7059872046149985": 16, "build": [17, 20, 30, 63, 66, 71, 79, 80, 88, 93, 94], "stand": [17, 87], "alon": [17, 64, 87, 88], "bundl": [17, 26], "explain": [17, 19, 29, 46, 80, 93, 96], "storag": [17, 55, 58, 74, 77, 80, 93, 95], "workflow": [17, 50, 53, 55, 61, 71, 74, 76], "scientif": [17, 42, 71, 84], "aim": [18, 73, 77, 90, 97], "demonstr": [18, 32, 38, 39, 41, 52, 91], "simpl": [18, 23, 35, 37, 40, 42, 44, 53, 55, 56, 58, 72, 74, 76, 77, 80, 93, 96], "standalon": [18, 55, 80], "learn": [18, 40, 43], "draw": [18, 33, 41, 53, 55, 63, 64, 69, 71, 91], "comov": [18, 53, 91, 92], "volum": [18, 19, 29, 33, 38, 39, 41, 53, 55, 64, 69, 91, 92], "numpi": [18, 20, 23, 24, 26, 29, 31, 37, 47, 53, 55, 56, 57, 58, 60, 61, 62, 63, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 80, 84, 90, 98], "np": [18, 23, 37, 53, 55, 56, 66, 72], "plt": [18, 37], "draw_samples_from_config": [18, 53, 55], "config_path": [18, 55, 71], "pycbc_bbh_prior": [18, 55], "random_se": [18, 55, 80, 97, 98], "randint": [18, 55], "32": [18, 28, 33, 41, 51, 54, 55, 76, 90, 92], "fieldnam": [18, 53, 55, 66, 76], "certain": [18, 31, 48, 52, 55, 69, 88, 93], "1000000": [18, 63, 80], "n_bin": 18, "nrow": 18, "ncol": 18, "ax1": 18, "ax2": 18, "ax3": 18, "ax4": 18, "ax5": 18, "ax6": 18, "hist": [18, 60], "srcmass1": [18, 35, 38, 53, 91, 92], "srcmass2": [18, 35, 38, 91, 92], "comoving_volum": [18, 91, 92], "redshift": [18, 35, 38, 50, 53, 69, 91, 92], "set_titl": [18, 53], "tight_layout": 18, "popul": [18, 29, 50, 53, 66, 73, 76, 77, 93], "mass1_distribut": 18, "mass1_sampl": 18, "rv": [18, 53, 55, 69], "varianc": [18, 55, 58, 60, 62, 63, 68, 70], "input": [18, 23, 29, 31, 32, 33, 35, 36, 37, 38, 39, 41, 45, 53, 56, 57, 58, 60, 61, 63, 64, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 86, 88, 90, 92, 93, 95, 96, 97, 98], "mass2_gaussian": 18, "mass2_mean": 18, "mass2_var": 18, "mass2_sampl": 18, "pair": [18, 53, 56, 61, 69, 76, 86, 89, 95], "togeth": [18, 20, 31, 63, 76, 77, 80, 81, 88, 90, 92, 93, 95, 96], "apart": [18, 35, 40], "two_mass_distribut": 18, "mass3": 18, "mass4": 18, "two_mass_sampl": 18, "histogram": [18, 45, 56, 60, 69, 71, 77], "ax0": 18, "ratio": [18, 24, 31, 36, 37, 39, 42, 50, 53, 55, 56, 58, 61, 63, 64, 66, 67, 69, 71, 73, 76, 77, 80, 90, 92, 98], "drawn": [18, 32, 36, 37, 41, 53, 55, 63, 69, 71, 88, 91], "boundari": [18, 41, 50, 55, 58, 62, 69, 76, 77, 80, 87], "row": [18, 29, 53, 55, 57, 65, 66, 71, 73, 75, 76], "convert": [18, 24, 31, 33, 50, 53, 55, 56, 58, 61, 62, 63, 64, 65, 66, 69, 70, 72, 73, 74, 76, 77, 86, 87, 88, 89, 92], "margin": [18, 31, 32, 33, 36, 37, 43, 45, 54, 60, 63, 64, 71, 77, 92], "probabl": [18, 31, 46, 53, 55, 56, 58, 60, 63, 69, 70, 77, 80, 90, 93, 96, 98], "densiti": [18, 43, 45, 53, 55, 56, 58, 60, 63, 69, 70, 71, 74, 75, 77, 78, 92], "convers": [18, 31, 37, 50, 55, 63, 73, 74], "minmc": [18, 55], "maxmc": [18, 55], "60": [18, 26, 39, 41, 55, 80, 87, 93, 95], "mc_distribut": 18, "mc": [18, 53, 55, 71], "symmetr": [18, 24, 39, 53, 56, 58, 66, 67, 73, 74, 80, 90, 98], "minq": [18, 55], "maxq": [18, 55], "q_distribut": 18, "n_size": 18, "mc_sampl": 18, "q_sampl": 18, "mass1_from_mchirp_q": [18, 35, 36, 37, 50, 53], "mass2_from_mchirp_q": [18, 35, 36, 37, 50, 53], "1d": [18, 42, 54, 55, 60, 61, 71, 77], "consist": [18, 23, 25, 53, 55, 58, 60, 63, 70, 72, 73, 74, 80, 85, 90, 92], "expect": [18, 30, 33, 36, 37, 53, 55, 56, 60, 63, 66, 69, 71, 74, 76, 77, 78, 80, 85, 86, 87, 92, 93, 96], "formula": [18, 53, 73, 80, 98], "xq": 18, "linspac": [18, 53, 63], "yq": 18, "xmc": 18, "ymc": 18, "221": [18, 76], "hist2d": 18, "cmap": [18, 71, 92], "colorbar": [18, 71], "fraction": [18, 55, 56, 58, 61, 64, 69, 73, 76, 77, 87, 90], "label": [18, 22, 24, 28, 35, 52, 53, 56, 60, 61, 63, 66, 67, 71, 74, 76, 77, 83, 88, 91, 92, 95], "222": [18, 76], "223": [18, 76], "norm": [18, 53, 55, 58, 73, 74, 75], "m_c": 18, "propto": [18, 55, 63], "legend": [18, 24, 28, 52, 83], "224": [18, 71], "equal": [18, 29, 31, 53, 55, 56, 60, 61, 63, 66, 73, 74, 75, 76, 77, 80, 86, 93, 97, 98], "surfac": [18, 80, 98], "sphere": [18, 53, 55], "coordin": [18, 31, 33, 36, 37, 50, 55, 64, 67, 73, 80, 92, 95], "co": [18, 37, 53, 63, 66, 67, 76], "bound": [18, 33, 35, 40, 41, 50, 53, 58, 60, 62, 63, 64, 70, 71, 80, 92, 98], "pi": [18, 35, 45, 53, 55, 62, 63, 67, 70, 76, 83, 84], "theta_low": 18, "theta_high": 18, "azimuth": [18, 33, 35, 53, 55, 66, 76, 92], "goe": [18, 20, 53, 63, 74, 76, 77, 86], "phi_low": 18, "phi_high": 18, "solid": [18, 53, 55, 71], "theta": [18, 53, 55, 63, 76], "polar_bound": [18, 55], "theta_lower_bound": 18, "theta_upper_bound": 18, "phi": [18, 53, 55, 58, 63, 72, 76], "azimuthal_": 18, "phi_lower_bound": 18, "phi_upper_bound": 18, "uniform_solid_angle_distribut": 18, "azimuthal_bound": [18, 55], "want": [18, 23, 24, 26, 29, 31, 33, 35, 41, 45, 48, 49, 53, 54, 55, 56, 60, 61, 64, 65, 68, 70, 71, 72, 73, 75, 77, 84, 86, 88, 89, 90, 91, 92, 93, 96, 97, 98], "50000": [18, 80], "solid_angle_sampl": 18, "500000": 18, "spin_mag": 18, "ndarrai": [18, 53, 54, 55, 56, 58, 61, 63, 66, 68, 69, 70, 74, 75, 76], "shape": [18, 33, 42, 53, 60, 61, 64, 66, 74], "dtype": [18, 23, 53, 55, 56, 57, 58, 63, 64, 66, 72, 74, 76], "float": [18, 23, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 90], "spheric": [18, 33, 53, 55, 63, 67, 76, 92], "cartesian": [18, 33, 53, 63, 73, 80, 92], "spinx": [18, 53], "spini": [18, 53], "spinz": [18, 69], "dimens": [18, 32, 53, 55, 60, 61, 63, 64, 66, 71, 73, 74, 77, 92], "3rd": [18, 73], "3d": [18, 60, 80], "across": [18, 31, 33, 42, 44, 55, 56, 61, 63, 80, 88], "add_subplot": [18, 53], "111": [18, 53], "scatter": [18, 32, 36, 37, 38, 39, 41, 45, 60, 71, 77, 92], "set_xlabel": 18, "set_ylabel": 18, "set_zlabel": 18, "easiest": 19, "wai": [19, 20, 23, 29, 33, 44, 48, 53, 55, 58, 60, 65, 66, 73, 76, 77, 80, 86, 88, 89, 90, 93, 94, 95, 96, 98], "our": [19, 29, 30, 33, 34, 35, 36, 38, 43, 55, 80, 84, 95], "commun": [19, 30, 37, 63], "edit": [19, 48, 56, 66, 80, 82, 92, 93, 95], "mac": [19, 53], "desktop": 19, "ce": 19, "graphic": 19, "pull": [19, 44, 46, 63, 66, 73, 93], "el8": [19, 93], "depend": [19, 31, 35, 42, 43, 46, 48, 53, 55, 60, 61, 63, 64, 66, 72, 74, 76, 77, 78, 80, 82, 90, 92, 93], "root": [19, 53, 55, 67, 70, 73, 76, 77, 80, 90, 98], "filesystem": [19, 48, 91, 92, 93], "login": 19, "bash": [19, 36], "One": [19, 31, 52, 64, 66, 77, 80, 88, 93, 95], "port": [19, 59, 79], "8888": 19, "pycbc_test": 19, "su": 19, "browser": [19, 30, 93], "ip": 19, "imag": [19, 29, 37, 53, 71, 72, 74, 76, 84, 93], "address": [19, 57], "screen": [19, 61, 63], "host": [19, 86, 93, 95], "adddress": 19, "127": [19, 24, 51, 52], "public": [19, 39, 41, 53, 59, 69, 72, 78, 84, 88, 91, 92, 93], "privat": 19, "push": [19, 71, 72, 79, 80], "v": [19, 39, 41, 53, 55, 63, 73, 77, 79, 80, 84, 86, 87, 90, 93, 97, 98], "mount": [19, 48], "detail": [19, 20, 22, 23, 30, 31, 33, 34, 37, 38, 40, 42, 46, 53, 55, 57, 58, 61, 62, 63, 64, 65, 66, 69, 70, 71, 73, 76, 77, 78, 80, 85, 88, 90, 91, 92, 94, 96, 97, 98], "veri": [20, 31, 40, 48, 58, 60, 76, 80, 88, 91], "inadequ": 20, "contact": [20, 22, 48, 49, 80, 82, 87, 93], "team": [20, 84], "yourself": 20, "layer": 20, "websit": 20, "nice": [20, 57, 73, 93], "tutori": [20, 30, 43, 44], "restructuredtext": 20, "overview": [20, 77, 93, 96], "doc": [20, 33, 46, 73, 77, 80, 86, 88, 89, 90, 93, 96, 97, 98], "intern": [20, 29, 55, 56, 57, 58, 59, 63, 64, 65, 66, 74, 75, 76, 77, 86, 96], "index": [20, 25, 31, 37, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 74, 75, 76], "rst": [20, 84], "block": [20, 44, 53, 60, 63, 68, 72, 80, 96], "toctre": 20, "maxdepth": 20, "entri": [20, 29, 55, 56, 66, 70, 71, 73, 74, 77, 80, 86, 88, 92, 95, 98], "readabl": 20, "upon": [20, 35, 43, 55, 63, 66, 80, 91, 92], "docstr": [20, 53, 66, 76], "abstract": [20, 42, 44, 60, 61, 63, 64, 72, 76, 77, 80], "person": [20, 80], "tast": 20, "littl": [20, 23, 31, 33, 34, 38, 77, 80, 86, 90, 96, 98], "style": [20, 53, 65, 66, 69, 71, 77], "guid": [20, 70], "member": [20, 30, 57], "ideal": [20, 57, 58, 74], "languag": [20, 84], "accompani": [20, 80], "got": 20, "recommend": [20, 29, 33, 36, 37, 43, 46, 48, 58, 60, 63, 66, 85, 86, 88, 91, 93, 97, 98], "via": [20, 33, 42, 46, 47, 53, 56, 57, 58, 60, 66, 67, 76, 77, 82, 90, 92, 93, 95, 98], "doesn": [21, 36, 37, 53, 61, 72, 74, 76, 77, 80, 88, 92], "Or": [21, 23, 37, 55, 74, 96], "mayb": [21, 77, 86], "plug": [21, 80], "archictectur": 21, "faithsim": 22, "imrphenomb": [22, 83], "1000001000": 22, "123434": 22, "src": [22, 28, 45, 47, 48, 89, 97, 98], "pc10": 22, "pycbc_faithsim": 22, "flatimrc": 22, "waveform1": 22, "14": [22, 37, 53, 55, 56, 93], "waveform2": 22, "imrphenomc": [22, 83], "flatf2": 22, "flatseobnrv1": 22, "seobnrv1": [22, 83], "flateobnrv2": 22, "eobnrv2": [22, 29, 53, 83], "8192": [22, 41], "flateobnrv2hm": 22, "eobnrv2hm": [22, 83], "flatt1": 22, "taylort1": [22, 83], "flatt2": 22, "taylort2": [22, 83], "flatt3": 22, "taylort3": [22, 83], "flattrd": 22, "phenspintaylorrd": [22, 83], "flatt4": 22, "taylort4": [22, 76, 83], "xxx": 22, "user_str": 22, "independ": [22, 31, 33, 44, 53, 55, 60, 61, 63, 64, 69, 73, 74, 80, 85, 86, 90, 91, 92, 93, 98], "pycbc_make_faithsim": 22, "whitespac": [22, 76], "pycbc_faithsim_plot": 22, "nitz": [22, 56, 84, 87], "reli": [23, 57, 64, 69], "fast": [23, 53, 57, 66, 76, 93], "fourier": [23, 57, 58, 70, 74, 76, 83], "often": [23, 40, 43, 60, 80, 88, 96], "domin": [23, 33, 38, 43, 53, 63, 73, 80, 98], "cost": [23, 58, 73, 80, 90, 93], "analys": [23, 31, 70, 75, 77, 80, 85, 86, 88, 90, 95, 96, 97, 98], "balanc": [23, 80], "effici": [23, 40, 43, 53, 64, 72, 75, 80, 95], "eas": [23, 73], "meet": [23, 56, 85], "easi": [23, 30, 33, 42, 66, 80], "involv": [23, 66, 75, 77, 80, 92, 93], "routin": [23, 63, 64, 73, 80], "offer": [23, 42, 44, 53], "cuda": [23, 53, 83, 90], "interfac": [23, 43, 44, 53, 56, 57, 66, 74, 85, 86, 90, 93, 96], "arrai": [23, 24, 38, 42, 50, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 75, 76], "done": [23, 31, 32, 33, 35, 37, 38, 39, 41, 42, 43, 44, 53, 55, 58, 61, 63, 64, 65, 66, 73, 76, 77, 80, 86, 88, 89, 91, 92, 93, 94, 95, 96, 97, 98], "input_arrai": 23, "output_arrai": 23, "ifft": [23, 53, 57, 58, 72, 75, 83], "complex": [23, 25, 28, 56, 57, 58, 63, 72, 74, 75, 76, 80, 96], "real": [23, 33, 34, 53, 58, 72, 74, 76, 84], "precis": [23, 53, 55, 57, 58, 70, 72, 74, 76, 77, 80, 90, 93, 98], "doubl": [23, 53, 56, 57, 67, 70, 72, 74, 76, 90, 92, 93], "worth": [23, 65, 93], "becom": [23, 76, 77, 80, 88, 96, 97], "complic": [23, 55], "inarr": 23, "ones": [23, 26, 40, 52, 53, 55, 63, 70, 73, 74, 76, 77, 80, 86, 88, 93, 98], "64": [23, 29, 74, 76, 78, 90, 93, 94], "complex64": [23, 56, 57, 74], "outarr": 23, "float32": [23, 56, 57, 65, 66, 70, 72, 74, 75, 76], "33": [23, 56, 76], "timeseri": [23, 24, 26, 28, 50, 53, 54, 56, 57, 58, 59, 63, 65, 68, 70, 71, 72, 75, 76, 83, 84], "frequencyseri": [23, 50, 53, 57, 58, 61, 63, 68, 70, 71, 72, 73, 75, 76, 84], "except": [23, 28, 31, 35, 55, 56, 59, 61, 63, 66, 70, 76, 77, 80, 90, 98], "float64": [23, 60, 65, 70, 72, 74, 76], "to_frequencyseri": [23, 24, 28, 53, 74, 84], "complex128": [23, 74], "to_timeseri": [23, 28, 53, 74], "signific": [23, 50, 53, 58, 71, 74, 87], "perfomm": 23, "fft_class": [23, 72], "_delta_t": 23, "IF": [23, 89], "_delta_f": 23, "ifft_class": 23, "idea": [23, 78, 80, 82, 88], "reassign": [23, 56], "backend_support": [23, 50, 53], "get_backend_nam": [23, 53, 57], "set_backend": [23, 53, 57], "get_backend": [23, 53, 57], "16": [24, 26, 29, 33, 39, 41, 48, 51, 52, 53, 56, 78, 80, 90, 93, 94, 98], "flen": [24, 51, 52, 70, 75, 83], "int": [24, 28, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 83, 86, 90, 98], "2048": [24, 29, 33, 34, 35, 38, 39, 41, 51, 52, 55, 58, 59, 63, 70, 76, 78, 80, 90, 92, 94, 97, 98], "tsampl": [24, 51, 52], "noise_from_psd": [24, 51, 52, 53, 68, 80], "sample_tim": [24, 28, 51, 53, 72, 74, 83, 84], "suppress": [24, 58, 74], "lowpass_fir": [24, 28, 53, 58, 74], "algorithm": [24, 30, 31, 56, 58, 60, 64, 66, 80], "written": [24, 26, 29, 31, 61, 63, 64, 65, 66, 73, 74, 76, 77, 80, 86, 90, 91, 92, 93, 95, 97], "tap": 24, "resort": 24, "hood": 24, "resampl": [24, 34, 50, 53, 65, 71, 74, 78, 90, 93, 98], "coeff": [24, 56, 58, 74], "ts_filter": 24, "lfilter": 24, "coeffici": [24, 53, 55, 56, 58, 73, 74, 76], "compens": 24, "ts_filtered2": 24, "fir_zero_filt": [24, 53, 58, 74], "stild": [24, 57, 58, 61, 75], "get_fd_waveform": [24, 28, 43, 53, 76, 83], "resiz": [24, 28, 53, 56, 61, 63, 66, 74, 76, 83], "len": [24, 28, 53, 55, 63, 64, 66, 70, 76, 83, 84], "matched_filt": [24, 28, 50, 53, 58, 85, 93], "low_frequency_cutoff": [24, 28, 52, 58, 60, 63, 68, 70, 72, 74, 75, 76, 83, 90], "ab": [24, 28, 56, 58, 63, 71, 74, 75, 76, 77], "arxiv": [24, 53, 56, 58, 63, 69, 70, 75, 76, 77], "gr": [24, 53, 70, 76], "qc": [24, 53, 70], "0405045": 24, "known": [24, 52, 53, 56, 60, 74, 77, 90, 93, 95], "allen": [24, 56, 75, 93], "num_bin": [24, 25, 56, 75], "power_chisq": [24, 53, 75], "2_r": 24, "aid": [25, 28, 55, 63], "canon": 25, "definit": [25, 42, 44, 53, 55, 56, 63, 65, 66, 94, 95, 96], "alwai": [25, 53, 56, 58, 61, 62, 66, 73, 76, 79, 80, 86, 93, 96, 98], "itself": [25, 42, 44, 58, 63, 64, 74, 93], "prefix": [25, 31, 32, 45, 48, 49, 53, 55, 59, 70, 72, 74, 76, 97], "futur": [25, 29, 53, 73, 77, 87, 90, 92], "date": 25, "snr": [25, 28, 29, 30, 36, 37, 38, 39, 41, 45, 53, 56, 57, 58, 63, 66, 69, 71, 75, 76, 77, 81, 87, 89, 90, 91, 92, 93], "mangitud": 25, "chisq": [25, 29, 50, 53, 56, 81, 90, 93], "bruce": [25, 75, 93], "chisq_dof": [25, 56, 71, 75], "Not": [25, 31, 53, 60, 65, 66, 69, 80, 91], "dof": [25, 75, 90], "bank_chisq": [25, 50, 53], "bank_chisq_dof": [25, 75], "cont_chisq": 25, "autochisq": [25, 50, 53, 90], "cont_chisq_dof": 25, "auto": [25, 60, 71, 75, 90], "template_dur": [25, 53, 66], "sigmasq": [25, 53, 56, 58], "1mpc": 25, "denot": [25, 77, 86, 90, 93], "valid": [25, 38, 52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 72, 73, 76, 77, 78, 80, 81, 84, 85, 88, 90, 92, 93, 98], "period": [25, 49, 53, 58, 74, 80, 94], "vlid": 25, "Its": [25, 75, 86, 93], "subject": [25, 80], "notic": [25, 33, 80, 91, 92], "template_hash": [25, 66, 76], "pycbc_coinc_mergetrig": [25, 87, 93], "template_id": [25, 53, 56, 58, 66, 73], "uniqu": [25, 31, 35, 42, 44, 63, 68, 71, 72, 74, 76, 77, 86, 88, 89, 90, 92, 98], "id": [25, 53, 56, 65, 66, 69, 71, 73, 76, 77, 85, 90, 93], "precalcul": [25, 41, 43, 63, 73, 76], "map": [25, 45, 50, 53, 55, 56, 60, 61, 63, 64, 65, 71, 72, 73, 76, 77, 80, 91, 92, 93, 95, 96], "bank_chisq_dof_templ": 25, "bank_chisq_templ": 25, "chisq_dof_templ": 25, "chisq_templ": 25, "coa_phase_templ": 25, "cont_chisq_dof_templ": 25, "cont_chisq_templ": 25, "end_time_templ": 25, "sigmasq_templ": 25, "snr_templat": 25, "template_boundari": 25, "template_duration_templ": 25, "h5py": [25, 31, 42, 56, 61, 66, 73, 76], "testdata": 25, "snr_reg": 25, "snr_template_0": 25, "record": [26, 37, 50, 53, 55, 56, 77, 86, 90, 96], "laser": 26, "interferomet": [26, 53, 56, 59, 77, 86, 90, 98], "gwf": [26, 28, 29, 34, 37, 38, 39, 41, 59, 65, 78, 92], "stamp": [26, 29, 74], "metadata": [26, 31, 42, 50, 53, 61, 63, 64, 65, 66, 77, 80, 92], "tseri": 26, "query_and_read_fram": [26, 53, 59], "g1_rds_c01_l3": 26, "der_data_h": 26, "1049587200": 26, "return": [26, 31, 37, 42, 48, 49, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 84, 86, 88, 89, 90, 93, 96, 97, 98], "instanc": [26, 31, 46, 53, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 75, 76, 77, 84, 86, 88, 89, 90, 92, 93, 94, 96, 97, 98], "altern": [26, 29, 31, 48, 63, 66, 76, 80, 88], "frame_path": [26, 53, 59], "read_fram": [26, 28, 53, 59], "whose": [26, 53, 55, 56, 57, 63, 70, 72, 77, 80, 93], "write_fram": 26, "test_un": 26, "flag_names_to_bitmask": [26, 53, 59], "bit": [26, 59, 60, 64, 77, 96], "mask": [26, 53, 56, 59, 66], "highpass_fir": [28, 53, 58, 74], "welch": [28, 33, 52, 53, 70, 72, 74, 80], "catalog": [28, 50, 53, 77, 81], "spectrum": [28, 68, 70, 74, 90, 98], "white_strain": 28, "smooth": [28, 43, 70, 72, 76, 77], "35": [28, 35, 38, 63], "300": [28, 39, 89, 93], "shift": [28, 53, 55, 56, 58, 63, 65, 74, 75, 76, 77, 92], "flip": [28, 96], "roll": [28, 53, 56, 74, 76], "007": 28, "xlim": [28, 52, 84], "1126259462": [28, 33, 34, 35, 38, 53, 92], "21": [28, 53, 56, 67, 76], "45": [28, 33, 38, 52, 83], "ylim": [28, 52], "150": [28, 36, 37, 40, 58], "urllib": 28, "request": [28, 44, 46, 52, 53, 54, 56, 59, 61, 63, 66, 73, 74, 75, 76, 77, 78, 86, 90, 92, 95, 96], "urlretriev": 28, "fname": [28, 59, 66, 69, 77], "h1_losc_4_v2": 28, "1126259446": 28, "www": [28, 34, 38, 80, 84, 88, 93], "gw150914data": 28, "filenam": [28, 29, 31, 52, 53, 55, 56, 57, 59, 60, 61, 64, 65, 66, 70, 71, 76, 77, 80, 86, 90, 97], "losc": [28, 39, 41], "wraparound": 28, "ll": [28, 33, 34, 35, 38, 39, 40, 41, 52, 63, 91, 92, 96], "slow": [28, 60, 74, 80, 82], "heard": 28, "importerror": 28, "250": [28, 56, 77], "strech": 28, "upward": 28, "human": 28, "hear": 28, "fdata": 28, "1200": 28, "slice": [28, 53, 56, 61, 64, 65, 66, 72, 74, 76, 95], "1500": [28, 92], "3000": [28, 73, 93], "save_to_wav": [28, 53, 74], "gw150914_h1_chirp": 28, "wav": [28, 74], "audio": [28, 74], "googl": [28, 73], "chrome": 28, "plai": [28, 56, 80], "correctli": [28, 49, 53, 55, 74, 76, 77, 88], "_download": 28, "save": [29, 31, 42, 53, 55, 56, 61, 63, 64, 66, 69, 71, 72, 74, 76, 77, 81, 85, 90, 91, 92, 93, 96], "column": [29, 52, 53, 55, 56, 57, 66, 70, 71, 72, 74, 76, 80, 93, 98], "awgstream": 29, "coher": [29, 50, 53, 71, 77, 90, 95, 96], "ligolw": [29, 50, 53, 56, 65, 73, 74], "sim_inspir": [29, 53, 77, 89], "usag": [29, 56, 77, 80, 87, 93, 95], "geocent_end_tim": 29, "1124381661": 29, "gps_start_tim": [29, 63, 80, 88, 90, 98], "1124380361": 29, "gps_end_tim": [29, 63, 80, 88, 90, 98], "1124382409": 29, "identifi": [29, 31, 53, 56, 65, 69, 72, 73, 76, 77, 84, 86, 88, 89, 90, 93, 96, 98], "h1_hoft_c00": [29, 94, 95, 96], "channel_nam": [29, 72, 74, 80, 90, 98], "gd": [29, 93, 94, 95, 96], "calib_strain": [29, 93, 94, 95, 96], "seper": 29, "pseudofourpn": 29, "sai": [29, 35, 39, 41, 53, 88], "taper_start": [29, 76], "network": [29, 56, 63, 69, 77, 93, 96], "instur": 29, "28": [29, 55, 67], "disk": [29, 31, 48, 53, 61, 64, 66, 67, 73, 77, 80, 86, 88, 93, 96, 98], "dictat": [29, 97], "disgard": 29, "edg": [29, 43, 53, 63, 69, 75], "hwinjcbc_": 29, "_h1": 29, "txt": [29, 37, 46, 52, 53, 55, 60, 69, 71, 74, 77, 80, 88, 90], "process_param": [29, 56], "sngl_inspir": [29, 73, 80, 97, 98], "everi": [29, 31, 33, 43, 45, 53, 55, 56, 58, 61, 62, 63, 64, 66, 70, 71, 73, 74, 76, 77, 80, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 98], "tuesdai": 29, "month": [29, 71, 87], "anytim": 29, "dure": [29, 31, 35, 37, 58, 63, 80, 88, 92, 93], "dai": [29, 63, 71, 93], "86400": [29, 89, 93, 98], "week": [29, 35, 93], "604800": 29, "1126368017": 29, "1130371217": 29, "kpc": [29, 93], "40000": 29, "totalmass": [29, 73], "0hz": 29, "spintaylort4threepointfivepn": [29, 93], "startend": [29, 76, 90], "band": [29, 58, 74, 76], "combin": [29, 31, 33, 45, 53, 56, 58, 60, 63, 64, 65, 66, 69, 70, 71, 74, 76, 77, 78, 80, 88, 91, 92, 93, 94, 95, 96], "hl": [29, 89], "injections_1": 29, "4003200": 29, "had": [29, 42, 53, 91, 92], "16384hz": 29, "hwinj_cbc_simulation_id_": 29, "simid": 29, "simulation_id": [29, 65, 66], "x11": 29, "strongli": [29, 80, 97], "entir": [29, 33, 41, 76, 87, 90, 92], "zoom": [29, 71], "close": [29, 33, 43, 53, 55, 58, 66, 73, 74, 77, 80, 93], "output_path": [29, 33, 34], "ssh": 29, "gsissh": 29, "lda": [29, 59, 77, 80, 86, 88, 89, 90, 93, 96, 97, 98], "pcdev1": 29, "caltech": [29, 77, 86, 88, 89, 90, 93, 96, 97, 98], "edu": [29, 67, 77, 80, 86, 88, 89, 90, 93, 94, 95, 96, 97, 98], "exact": [29, 33, 74, 77, 80, 87, 93], "analog": [29, 66], "tmpltbank_fil": [29, 77], "inspiral_fil": [29, 93], "inspiral_pycbc": 29, "inj": [29, 53, 65, 71, 87, 88, 90, 93, 95], "cpu": [29, 53, 74, 76, 90, 93, 94], "trig": [29, 56, 69, 71, 90], "echo": [29, 46, 47, 48, 49, 91, 92, 93], "singledettrigg": [29, 53, 66], "h1_trigger": 29, "imax": 29, "argmax": [29, 50, 53, 56, 63], "max_snr": 29, "pycbc_insert_frame_hwinj": 29, "insert": [29, 57, 72], "hwinj_fil": 29, "hwinj": 29, "Then": [29, 36, 46, 48, 53, 58, 60, 66, 70, 72, 77, 79, 80, 93], "ligolw_segment_query_dqsegdb": [29, 93, 94, 95], "dqsegdb5": [29, 93], "phy": [29, 58, 80, 88, 93, 94, 95], "syr": [29, 93, 94, 95], "dmt": [29, 88, 93, 94, 95, 96], "analysis_readi": [29, 93, 94, 95, 96], "ligolw_print": 29, "databs": 29, "gw_data_find": [29, 77, 86], "observatori": [29, 53, 54, 77, 86], "l1_rd": 29, "gap": [29, 80, 86, 88, 90, 93, 94, 95], "h1_rd": 29, "termin": [29, 64, 73, 80, 93], "miss": [29, 41, 53, 63, 71, 77, 80, 86, 87, 92], "effort": [30, 57], "core": [30, 32, 33, 34, 50, 53, 55, 63, 64, 71, 76, 80, 85, 86, 88, 89, 90, 92, 94, 96, 97, 98], "suit": [30, 42], "astrophys": [30, 69], "compact": [30, 42, 54, 67, 85, 93, 95], "gw150914": [30, 31, 33, 35, 81, 91], "ongo": 30, "contribut": [30, 43, 44], "whether": [30, 53, 55, 56, 57, 60, 61, 62, 63, 64, 65, 71, 74, 75, 76, 77, 86, 88, 90, 93, 95], "feedback": 30, "configur": [30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 43, 48, 50, 53, 55, 60, 61, 63, 64, 65, 71, 72, 80, 85], "robust": 30, "multi": [30, 41, 42, 44, 53, 55, 56, 61, 63, 64, 70, 72, 74, 76, 93], "messeng": 30, "archiv": [30, 53], "deep": 30, "associ": [30, 53, 55, 56, 58, 60, 61, 63, 66, 70, 74, 77, 80, 84, 86, 87, 90, 92, 93, 96, 98], "target": [30, 43, 62, 64, 80, 95, 98], "gamma": [30, 53, 63, 73, 80, 95, 98], "rai": [30, 95], "transient": [30, 56, 72, 74], "next": [30, 48, 49, 60, 70, 72, 76, 84, 90, 94, 95], "year": [30, 56, 70, 71, 90], "pip": [30, 46, 47, 82, 92], "conda": [30, 46], "igwn": 30, "cvmf": [30, 46, 48, 79, 93], "subpackag": [31, 50, 55], "evalu": [31, 33, 53, 55, 56, 60, 63, 64, 66, 69, 71, 75, 76, 85], "likelihood": [31, 32, 33, 34, 37, 38, 39, 40, 41, 42, 43, 53, 56, 60, 63, 64, 69, 92], "bayesian": [31, 35, 63, 64], "pycbc_infer": [31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 44, 55, 61, 63, 77, 91, 92], "recolor": 31, "vari": [31, 33, 38, 39, 41, 43, 46, 53, 55, 63, 64, 72, 73, 76, 77, 80, 92, 98], "config": [31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 44, 50, 53, 55, 61, 62, 63, 64, 66, 71, 72, 77, 80, 82, 91, 92, 93, 94, 95], "parallel": [31, 32, 33, 53, 61, 63, 64, 73, 80, 85, 87, 90, 92, 93, 97], "workflowconfigpars": [31, 53, 55, 61, 62, 63, 64, 72, 74, 77, 85, 88], "variable_param": [31, 32, 33, 35, 36, 37, 38, 39, 40, 41, 55, 60, 61, 63, 64, 92], "equival": [31, 44, 55, 58, 66, 72, 74, 76, 77, 80, 86, 88, 91, 93, 95], "everyth": [31, 61, 80, 88], "referenc": [31, 56, 66, 92], "load": [31, 33, 34, 37, 38, 42, 52, 53, 55, 60, 61, 62, 63, 64, 65, 66, 67, 71, 72, 74, 76, 77, 85], "explan": [31, 69], "At": [31, 73, 77, 93, 95, 96], "recogn": [31, 56, 60, 61, 63, 71, 76, 77, 90, 93], "from_config": [31, 35, 44, 50, 53, 55, 60, 62, 63, 64, 72], "test_": 31, "nwalker": [31, 32, 33, 39, 40, 60, 61, 64, 92], "5000": [31, 32, 40, 41, 60, 73, 80], "niter": [31, 32, 39, 40, 60, 61, 64], "walker": [31, 32, 33, 36, 37, 39, 60, 61, 64, 92], "100th": 31, "mcmc": [31, 33, 38, 39, 41, 42, 44, 60, 61, 64, 77, 92], "burn_in": [31, 33, 39, 40, 50, 53, 64, 92], "logic": [31, 57, 60, 71, 76, 90], "nacl": [31, 33, 40, 53, 60, 92], "max_posterior": [31, 33, 40, 53, 60, 92], "were": [31, 33, 35, 53, 55, 56, 59, 60, 61, 63, 64, 66, 70, 74, 76, 80, 84, 88, 91, 92, 93, 95], "max_postrior": 31, "thin": [31, 44, 60, 61, 64, 77, 92], "behavior": [31, 53, 57, 76, 93], "markov": [31, 60], "chain": [31, 33, 40, 42, 44, 53, 60, 61, 64, 77, 80, 92], "quickli": [31, 32, 40], "lead": [31, 33, 61, 66, 71, 73, 74, 76, 80, 91, 98], "temperatur": [31, 33, 42, 44, 60, 61, 64], "acquir": [31, 33, 64, 92], "byte": [31, 61, 66, 74], "20gb": [31, 93], "quieter": 31, "converg": [31, 33, 44, 60, 80, 92], "100gb": 31, "clearli": [31, 88], "vast": 31, "major": [31, 79, 95], "prevent": [31, 49], "growth": [31, 53, 76], "unbound": [31, 55], "slower": [31, 43, 48, 58, 66, 73, 80, 86], "cap": 31, "never": [31, 60, 64], "exce": [31, 33, 56, 63, 64, 80, 98], "ntemp": [31, 33, 39, 40, 60, 61, 64, 92], "nparamet": [31, 60], "reach": [31, 64, 77, 80], "autocorrel": [31, 33, 44, 45, 50, 53, 61, 64, 75], "thinned_bi": [31, 60, 61], "attribut": [31, 42, 44, 53, 55, 56, 57, 60, 61, 63, 64, 65, 66, 70, 72, 74, 76, 77, 88, 90, 93], "attr": [31, 61, 63, 64, 65, 66, 71, 76, 77, 92], "acl": [31, 33, 44, 58, 60, 61, 64], "amount": [31, 33, 56, 59, 61, 65, 72, 74, 77, 80, 90, 93, 98], "adopt": [31, 53], "convent": [31, 53, 57, 63, 76, 80, 84], "burn_in_iter": [31, 60, 61], "sampler_info": [31, 42, 61], "occur": [31, 38, 53, 56, 61, 65, 73, 76, 84, 86, 92], "likewis": [31, 60, 66, 77], "skip": [31, 45, 56, 62, 63, 77, 80, 88, 93, 95], "wherea": [31, 41, 60, 66], "term": [31, 43, 53, 58, 63, 70, 71, 73, 76, 80, 90, 92, 98], "resolut": [31, 33, 38, 39, 41, 58, 63, 70, 74, 76], "thu": [31, 43, 61, 63, 66, 72, 73], "coupl": [31, 38, 72], "joint": [31, 35, 50, 53], "statist": [31, 42, 56, 58, 60, 63, 66, 69, 71, 75, 76, 77, 81, 90, 93], "static_param": [31, 33, 35, 36, 37, 38, 39, 41, 60, 61, 63, 64, 92], "remain": [31, 33, 38, 55, 64, 73, 76, 80, 95], "throughout": [31, 44], "imrphenompv2": [31, 33, 83, 92], "come": [31, 66, 82, 93, 95, 96], "outsid": [31, 52, 56, 57, 63, 66, 70, 74, 78, 80, 92, 95, 96], "plugin": [31, 37, 50, 53, 63, 71], "accomplish": [31, 55, 63], "sophist": 31, "sampling_param": [31, 33, 60, 63, 64, 92], "sampling_transform": [31, 33, 63, 92], "q": [31, 33, 35, 36, 37, 53, 55, 56, 58, 62, 63, 66, 71, 74, 75, 76, 81, 90, 92, 93], "jacobian": [31, 50, 53, 55, 63, 64], "inverse_jacobian": [31, 50, 53], "special": [31, 35, 42, 43, 46, 53, 55, 59, 63, 74, 77, 83, 92, 96], "calib_": 31, "waveforms_transform": 31, "chirp_dist": [31, 50, 53, 93], "go": [31, 53, 60, 63, 64, 66, 73, 77, 79, 80, 87, 88, 91, 93, 95], "waveform_transform": [31, 33, 35, 36, 37, 39, 41, 63, 92], "cosmologi": [31, 50, 69, 92], "math": [31, 55, 58, 63, 71, 90, 93], "love": 31, "relationship": [31, 53, 77], "dquadmon_from_lambda": [31, 50, 53], "relat": [31, 53, 56, 58, 60, 63, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 87, 94, 95, 98], "moment": [31, 53, 63, 67, 73, 80, 95, 96, 98], "someth": [31, 61, 63, 72, 74, 75, 80, 88, 89, 92, 96, 97, 98], "why": [31, 77, 80, 86], "fc0": [31, 72], "fs0": [31, 72], "qinv0": [31, 72], "actuat": [31, 72], "penultim": [31, 72], "sens": [31, 33, 56, 63, 72, 80], "digit": [31, 72], "tst": 31, "pu": 31, "union": [31, 57], "join": [31, 63, 76, 77], "ufunc": [31, 66], "constrain": [31, 55, 63], "12": [31, 33, 36, 45, 56, 66, 80, 90, 93], "constraint_arg": [31, 35, 55], "q_from_mass1_mass2": [31, 37, 50, 53, 92], "finish": [31, 33, 61, 88, 91, 92], "renam": [31, 55, 61, 66], "bkup": 31, "backup": [31, 61, 64, 77, 86], "least": [31, 42, 44, 47, 49, 53, 57, 58, 60, 61, 63, 72, 74, 80, 91, 93], "attempt": [31, 35, 53, 56, 57, 59, 61, 63, 71, 72, 77, 86, 88, 90, 93, 98], "continu": [31, 37, 38, 39, 41, 42, 47, 48, 49, 55, 58, 63, 68, 77, 79], "perus": 31, "structur": [31, 42, 44, 55, 56, 57, 66, 71, 73], "h5l": 31, "loadfil": [31, 42, 60, 61], "r": [31, 46, 53, 55, 58, 61, 66, 67, 69, 71, 72, 80, 90, 98], "handler": [31, 53, 61, 63, 66, 76], "read_sampl": [31, 60, 61], "fieldarrai": [31, 53, 55, 61, 63, 65, 66, 71, 76], "lisa": [31, 43, 50, 53, 70, 80], "smbhb": 31, "ldc": [31, 36, 70], "pycbc_inference_plot_posterior": [31, 32, 36, 37, 38, 39, 41, 42, 92], "movi": [31, 32], "pycbc_inference_plot_movi": [31, 32], "pycbc_make_inference_workflow": [31, 91], "pycbc_make_inference_inj_workflow": 31, "api": [31, 42, 57, 58, 63, 66, 77, 81], "sever": [32, 33, 43, 44, 52, 63, 71, 78, 87], "laptop": [32, 38], "properli": [32, 44, 53, 55, 58, 74], "2d": [32, 56, 58, 60, 63, 73, 74, 80], "normal2d": 32, "nprocess": [32, 33, 34, 35, 38, 39, 41, 45, 64, 90, 92], "minut": [32, 37, 38, 39, 41], "increas": [32, 33, 41, 56, 60, 63, 66, 72, 76, 80, 87, 92], "contour": [32, 36, 37, 41, 53, 60, 71, 92, 93], "loglikelihood": [32, 35, 40, 60, 63, 64, 92], "vartheta": [32, 63], "50th": [32, 36, 37, 41, 71], "90th": [32, 36, 37, 41, 71], "percentil": [32, 36, 37, 41, 71, 91], "evolv": [32, 64], "normal2d_mcmc_evolut": 32, "mp4": [32, 45], "ffmpeg": 32, "pycbc_create_inject": [33, 35, 36, 65, 77, 91], "420": 33, "37": [33, 63, 76], "75": [33, 80], "ninject": [33, 35, 36], "delta_tc": [33, 91, 92], "spin1_a": [33, 45, 53, 62, 63, 66, 91, 92], "spin1_azimuth": [33, 45, 53, 66, 91, 92], "spin1_polar": [33, 45, 53, 66, 91, 92], "spin2_a": [33, 45, 53, 66, 91, 92], "spin2_azimuth": [33, 45, 53, 66, 91, 92], "spin2_polar": [33, 45, 53, 66, 91, 92], "80": [33, 55, 57, 62, 92], "radial": [33, 53, 67, 92], "wide": [33, 63, 88], "stationari": [33, 36, 43, 53, 63, 76, 93], "integr": [33, 34, 38, 43, 53, 55, 56, 59, 60, 61, 63, 64, 69, 73, 80, 85, 98], "domain": [33, 36, 53, 55, 58, 63, 65, 70, 72, 73, 74, 75, 76, 80, 81, 84, 90, 92, 93], "ell": [33, 76], "leq": [33, 55, 58], "smallest": [33, 53, 54, 56, 72, 73, 80], "faster": [33, 43, 53, 63, 65, 73, 76, 80, 83], "fulli": [33, 77, 88, 92], "simplif": [33, 57, 76], "coasles": 33, "reus": [33, 35, 80], "event": [33, 35, 50, 53, 54, 58, 66, 69, 73, 77, 81, 82, 90, 91, 92, 93, 96], "simpli": [33, 41, 57, 66, 74, 76, 77, 87, 88, 92, 95, 96], "42": [33, 35, 39, 53, 62, 70], "44": 33, "re": [33, 42, 44, 53, 56, 58, 63, 76, 91, 92], "numer": [33, 34, 38, 41, 43, 53, 55, 56, 57, 60, 63, 67, 71, 73, 74, 76, 77, 80, 85, 98], "safe": [33, 34, 38, 70, 73, 77, 78, 80, 88, 90, 98], "discard": [33, 34, 38, 42, 56, 72, 96], "encompass": [33, 66, 76, 77], "admit": [33, 92], "plu": [33, 42, 43, 53, 56, 58, 61, 71, 72, 76, 77], "uncertainti": [33, 53, 56, 58, 69, 71, 77], "happen": [33, 35, 53, 60, 61, 63, 66, 92, 93, 94, 96], "small": [33, 43, 45, 56, 58, 65, 93, 94], "afterward": [33, 77], "good": [33, 53, 80, 88, 90, 93, 96], "safeti": [33, 64], "resembl": [33, 56], "center": [33, 34, 35, 53, 55, 58, 59, 65, 72, 73], "odd": [33, 58, 74, 96], "convolut": [33, 69, 70, 74], "subtract": [33, 76, 77, 96], "consequ": [33, 42, 44], "delta": [33, 45, 56, 62, 63, 73, 76, 80, 88, 90, 98], "nsampl": [33, 40, 55, 60, 63, 64, 69, 92], "checkpoint": [33, 40, 42, 44, 60, 61, 64, 77, 90, 91, 92], "2000": [33, 35, 40, 45, 52, 80, 88, 90, 92, 98], "left": [33, 44, 53, 55, 56, 58, 63, 71, 74, 75, 76, 77, 80, 83, 88, 90, 92, 93, 95], "until": [33, 44, 45, 53, 58, 61, 63, 64, 73, 76, 80], "prior_config": [33, 34], "gw150914_like": [33, 34], "data_config": [33, 34], "sampler_config": [33, 34], "adjust": [33, 34, 38, 46, 69, 71, 72, 77, 92], "capabl": [33, 34, 43, 66, 73, 77, 84, 86, 90, 96, 97, 98], "nproc": [33, 34], "omp_num_thread": [33, 34, 38], "stop": [33, 34, 58, 61, 63, 64, 65, 73, 74, 76, 80, 90, 91, 92, 93, 95], "spawn": [33, 34], "otherwis": [33, 34, 43, 53, 55, 56, 57, 60, 61, 63, 64, 66, 71, 72, 74, 75, 76, 77, 80, 87, 88, 90, 93], "dimension": [33, 53, 55, 56, 58, 60, 63, 64, 70, 71, 73, 74], "computation": 33, "expens": [33, 58, 59, 62], "With": [33, 43, 63, 66, 80, 88, 92, 98], "hour": [33, 93], "struggl": [33, 92], "accumul": [33, 42, 57, 58, 92], "temp": [33, 61, 64], "issu": [33, 36, 46, 57, 61, 63, 66, 72, 77, 80, 86, 87, 88], "decreas": [33, 56, 92], "sometim": [33, 78, 88], "wget": 34, "eventapi": [34, 38], "h1_gwosc_16khz_r1": 34, "1126257415": [34, 38], "l1_gwosc_16khz_r1": 34, "43": [34, 38, 63, 70, 76], "16khz_r1_strain": [34, 78, 92], "modifi": [34, 37, 63, 64, 70, 72, 74, 76, 77, 90, 93], "accordingli": [34, 61, 72, 86, 88], "ligo_datafind_serv": [34, 86, 88, 93], "h1_losc_16_v1": [34, 92], "l1_losc_16_v1": [34, 92], "1897234": 34, "wish": [35, 42, 44, 46, 61, 92, 93, 95], "equat": [35, 53, 55, 67, 73], "arriv": [35, 53], "assumpt": [35, 53, 58, 80], "initi": [35, 42, 53, 55, 56, 62, 63, 64, 66, 72, 73, 74, 76, 77, 80, 82, 86, 88, 89, 90, 93, 96, 97, 98], "sub": [35, 43, 61, 62, 63, 66, 74, 76, 77, 80, 84, 85, 86, 88, 89, 90, 92, 93, 97, 98], "sum": [35, 53, 56, 63, 74, 75, 76, 80, 98], "regard": 35, "box": [35, 77, 79, 82, 93], "repres": [35, 36, 37, 42, 43, 53, 54, 55, 56, 66, 70, 74, 77], "__model": [35, 63], "belong": [35, 53, 56, 63, 69, 77, 96], "prepend": [35, 63, 74, 93], "__": [35, 63], "_": [35, 57, 60, 62, 63, 71, 76], "b": [35, 53, 55, 63, 66, 69, 70, 72, 74, 79, 80], "foo": [35, 44, 55, 60, 63, 66, 77, 88], "bar": [35, 44, 53, 55, 60, 66, 71, 77, 88, 93], "a_b__foo": 35, "c__foo": 35, "manner": [35, 66], "a__data": 35, "b__data": 35, "c__data": 35, "strip": [35, 60, 63], "header": [35, 53, 55, 61, 62, 63, 71], "inherit": [35, 53, 61, 63, 64, 66, 76, 77, 93], "basemodel": [35, 60, 63, 64], "illustr": [35, 80, 92, 93], "slightli": [35, 40, 58, 80, 92], "appar": 35, "430": 35, "500": [35, 38, 56, 63, 76, 77, 80], "event1": [35, 63], "pick": [35, 49, 56, 79, 88], "arbitrarili": [35, 56], "1126859462": 35, "event1_inj": 35, "event2_inj": 35, "event2": [35, 63], "submodel": [35, 43, 63], "event1__model": [35, 63], "epsilon": [35, 36, 37, 39, 53, 63], "005": [35, 58, 87], "mass1_ref": [35, 36, 37, 39], "mass2_ref": [35, 36, 37, 39], "tc_ref": [35, 36, 37, 39], "from_inject": [35, 63], "ra_ref": 35, "dec_ref": 35, "event2__model": [35, 63], "aligo": [35, 80, 83, 93], "event1__data": 35, "237": 35, "82": 35, "event2__data": 35, "918": 35, "6610": 35, "srcmchirp": [35, 91, 92], "event1__delta_tc": 35, "event1__ra": 35, "event1__dec": 35, "event2__delta_tc": 35, "event2__dra": 35, "event2__ddec": 35, "taken": [35, 44, 53, 56, 58, 61, 70, 73, 74, 76, 77, 78], "ogc": 35, "23": [35, 39, 63, 71, 76, 80, 83], "105": 35, "event1__tc": 35, "event2__tc": 35, "event2__dra_mean": 35, "event2__dra_var": 35, "event2__ddec_mean": 35, "event2__ddec_var": 35, "event2__ra": 35, "event2__dec": 35, "constraint": [35, 41, 50, 53, 63, 64], "event2dec": 35, "And": [35, 55, 80], "dlogz": [35, 36, 37, 38, 40, 41, 60, 64, 92], "nlive": [35, 36, 37, 38, 40, 41, 64, 92], "checkpoint_time_interv": [35, 41, 64], "1800": 35, "maxcal": [35, 41, 64], "event1_relbin": 35, "event2_relbin": 35, "tdi": [36, 37, 70], "supermass": [36, 37], "mock": [36, 37], "ref_fram": [36, 37, 53], "pe": [36, 55], "bbhx_phenomd": [36, 37], "1015522": [36, 37], "4376": [36, 37], "796849": [36, 37], "1091": [36, 37], "597755394865021": [36, 37], "36905807298613247": [36, 37], "17758": [36, 37], "367941273442": [36, 37], "5970175301911231": [36, 37], "275929308696054": [36, 37], "8400769299810702": [36, 37], "2734504596198182": [36, 37], "22558110042980073": [36, 37], "4799624": [36, 37], "274911478": [36, 37], "t_obs_start": [36, 37], "31536000": [36, 37], "1e": [36, 37, 52, 55, 58, 71, 76], "injection_smbhb": 36, "lisa_a": [36, 37], "lisa_": [36, 37], "lisa_t": [36, 37], "4800021": [36, 37], "15572853": [36, 37], "26735979": 36, "len_arm": [36, 70], "5e9": 36, "acc_noise_level": [36, 70], "3e": [36, 70], "oms_noise_level": [36, 70], "15e": 36, "0001": [36, 37, 55, 73], "2678400": 36, "1339200": 36, "spin1z_ref": [36, 37], "spin2z_ref": [36, 37], "703772": [36, 37], "7245316936": [36, 37], "860166": [36, 37], "6633165143": [36, 37], "1469802543574181": [36, 37], "401864755325733": [36, 37], "4798221": [36, 37], "4801821": [36, 37], "better_pol": [36, 37], "dirnam": [36, 37, 38, 39, 41], "lisa_smbhb_relbin": [36, 37], "lisa_smbhb_inj_p": 36, "backend": [36, 57, 74, 81, 90], "seem": [36, 57, 93], "24": [36, 45, 53, 63, 71, 73, 93], "fine": [36, 63, 76, 77, 80, 91, 92, 93, 98], "lisa_smbhb_mass_tc": 36, "red": [36, 37, 71, 91], "challeng": 37, "2a": 37, "sangria": [37, 43], "bbhx": 37, "heterodyn": [37, 63], "click": [37, 44, 71, 79, 93, 95], "26735978": 37, "a_psd": 37, "e_psd": 37, "t_psd": 37, "a_tdi_v2": 37, "e_tdi_v2": 37, "t_tdi_v2": 37, "la": 37, "le": 37, "lt": 37, "mchirp_ref": 37, "781969": 37, "693924104": 37, "q_ref": 37, "2744225048415756": 37, "distance_ref": 37, "inclination_ref": 37, "dataset": [37, 42, 55, 56, 61, 66, 74, 76], "mbhb_params_v2_lisa_fram": 37, "pkl": 37, "strain_fil": 37, "_tdi_v2": 37, "curl": [37, 38, 39, 41], "7497853": 37, "psd_file": [37, 70, 77, 80, 82, 90, 98], "_psd": 37, "params_fil": [37, 55], "lisa_smbhb_ldc_p": 37, "lisa_smbhb": 37, "simplifi": [37, 61, 77], "lisa_smbhb_mass_tc_0": 37, "subprocess": [37, 77], "pickl": [37, 61, 66, 71, 77], "mchirp_from_mass1_mass2": [37, 50, 53, 91, 92], "def": [37, 55, 66, 84], "spin_ldc2pycbc": 37, "mag": [37, 80, 88], "rb": [37, 61], "params_true_al": 37, "p_index": 37, "params_tru": 37, "tc_lisa": 37, "coalescencetime_lisa": 37, "polarization_lisa": 37, "polarangleofspin1": 37, "polarangleofspin2": 37, "phaseatcoalesc": 37, "eclipticlatitude_lisa": 37, "eclipticlongitude_lisa": 37, "plot_cod": 37, "lisa_smbhb_mass_tc_": 37, "popen": 37, "stdout": [37, 76, 77, 93], "pipe": 37, "handl": [38, 43, 44, 53, 56, 58, 60, 61, 63, 64, 67, 74, 75, 76, 77, 81, 86], "broad": 38, "overal": [38, 43, 63, 76, 93, 95], "reconstruct": [38, 41, 60, 63, 64], "marginalize_vector_param": [38, 41, 63], "marginalize_vector_sampl": [38, 41, 63], "shouldn": 38, "marginalize_phas": [38, 41, 60, 63], "marginalize_dist": [38, 41, 63], "marginalize_distance_param": [38, 41, 63], "marginalize_distance_interpol": [38, 41, 63], "marginalize_distance_snr_rang": [38, 41, 63], "marginalize_distance_dens": [38, 41, 63], "marginalize_distance_sampl": [38, 41, 63], "h1_gwosc_4khz_r1": 38, "l1_gwosc_4khz_r1": 38, "4khz_r1_strain": 38, "_gwosc_4khz_r1": 38, "pycbc_inference_model_stat": [38, 41], "margtim": 38, "marg_150914": 38, "demarg_150914": 38, "primary_mass": [38, 50, 53, 63, 66, 91, 92], "secondary_mass": [38, 50, 53, 66, 91, 92], "peak": [39, 41, 43, 58, 63, 75, 76], "neighborhood": 39, "greatli": [39, 41, 80], "03": [39, 73], "3757": [39, 41], "1187008882": [39, 41], "1187008482": [39, 41], "1187008892": [39, 41], "h1_losc_cln_4_v1": [39, 41], "1187007040": [39, 41], "l1_losc_cln_4_v1": [39, 41], "v1_losc_cln_4_v1": [39, 41], "min_iter": [39, 53, 60], "eta": [39, 53, 66, 67, 73, 80, 88, 98], "could": [39, 41, 53, 63, 66, 72, 77, 80, 86, 88, 89, 90, 92, 93, 95, 96], "44615914": [39, 41], "40808407": [39, 41], "1876": 39, "2076": 39, "_losc_cln_4_v1": [39, 41], "dcc": [39, 41, 69, 72], "0146": [39, 41], "p1700349": [39, 41], "001": [39, 41, 53, 55, 70, 77, 93], "unimod": 40, "nee": 40, "adapt": [40, 60, 62, 64, 66], "lag": [40, 64, 69, 93], "bootstrap": [40, 64], "enlarg": [40, 64], "update_interv": [40, 64], "loglr": [40, 53, 60, 63], "useag": 40, "update_interval_iter_fract": 40, "update_interval_ncal": 40, "log_interv": 40, "show_statu": 40, "dkl": 40, "frac_remain": 40, "lepsilon": 40, "min_ess": 40, "max_it": 40, "max_ncal": 40, "max_num_improvement_loop": 40, "min_num_live_point": 40, "cluster_num_live_point": 40, "nchain": [40, 42, 60, 61, 64], "jump_propos": [40, 62, 64], "python3": [40, 46, 74, 76, 77], "maxmcmc": [40, 64], "nthread": [40, 57], "nlivepoint": [40, 60, 64], "evid": [40, 50, 53, 61, 63, 64], "toler": [40, 53, 55, 64, 74, 76], "nest": [40, 53, 55, 61, 64, 74, 77, 88, 92], "intrins": [41, 43, 53, 58, 63, 74, 76, 92], "recalcul": [41, 72, 73], "extrins": [41, 63, 92], "sample_r": [41, 53, 54, 56, 63, 68, 70, 72, 74, 76, 80, 83, 90, 98], "32768": [41, 63], "rwalk": [41, 64], "single_simpl": 41, "extend": [41, 43, 53, 56, 57, 66, 69, 71, 77, 90, 96], "previou": [41, 53, 56, 61, 90], "peak_lock_snr": [41, 63], "peak_min_snr": 41, "42825": 41, "single_marg": 41, "vmin": [41, 71], "31": [41, 87, 93], "85": [41, 70], "single_demarg": 41, "demargin": 41, "minu": [41, 61, 70, 96], "rather": [41, 48, 55, 56, 57, 63, 64, 66, 74, 76, 77, 86, 91, 93, 95], "num_sampl": [41, 61, 64], "single_inst": 41, "marginalized_vector_sampl": 41, "marginalized_vector_param": 41, "dh": 41, "dhl": 41, "subnam": [41, 60, 63], "myski": 41, "1e6": [41, 66], "mysky_sampl": 41, "mysky_transform": 41, "det_tc": [41, 50, 53], "inferencetxtfil": [42, 60, 61], "mcmcio": [42, 61], "write_sampl": [42, 60, 61], "read_raw_sampl": [42, 60, 61], "duplic": [42, 44, 53, 74, 77, 80, 88, 90, 93, 95], "niteraiton": 42, "product": [42, 43, 53, 63, 66, 72, 73, 74, 75, 77, 79, 80, 82, 84, 86, 90, 96, 98], "resum": [42, 61, 64, 91, 92], "organ": [42, 66, 69, 93, 95], "properti": [42, 44, 53, 55, 56, 61, 63, 64, 66, 69, 72, 73, 74, 76, 77, 93, 95], "write_posterior": 42, "write_resume_point": [42, 60, 61], "write_sampler_metadata": [42, 60, 61], "flatten": [42, 61], "temper": [42, 44, 61, 64], "coldest": [42, 64], "hotter": 42, "pycbc_inference_extract_sampl": [42, 63, 92], "primari": [42, 53, 63, 66, 67], "univers": [42, 77, 84, 93], "collabor": [42, 46], "free": [42, 56], "think": [42, 44, 72, 77, 96], "unsur": [42, 44, 80], "arrang": 42, "thing": [42, 46, 55, 61, 63, 64, 74, 76, 77, 80, 86, 88, 89, 90, 93, 96, 97, 98], "review": [42, 44, 46, 88], "filetyp": [42, 61], "dictionari": [42, 44, 53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 69, 70, 71, 72, 73, 74, 76, 77, 80, 86, 90, 96, 98], "__init__": [42, 44, 55, 73, 77, 80, 98], "awar": [42, 44, 80, 93], "commonli": [43, 66, 93], "interact": [43, 44, 64, 87, 93, 95], "kilonova": 43, "imagin": 43, "straightforward": [43, 46, 55], "extens": [43, 53, 66, 71, 74, 76, 77, 85], "usual": [43, 48, 56, 58, 75, 76, 77, 78, 88, 89, 93, 95, 96], "nuissanc": 43, "22": [43, 53, 63, 71, 76], "cross": [43, 53, 56, 63, 70, 71, 73, 76, 95], "inner": [43, 53, 63, 72, 74], "perfer": 43, "mont": [43, 53, 60, 63, 71, 80], "carlo": [43, 53, 60, 63, 71, 80], "densli": 43, "permit": [43, 87], "explicitli": [43, 48, 53, 56, 75, 76, 96], "concert": 43, "basi": [43, 53, 55, 76], "assembl": 43, "expand": [43, 53, 72, 88, 93, 95], "cycl": [43, 60, 80], "ration": 43, "reference": 43, "wise": [43, 80], "linear": [43, 53, 63, 69, 73, 74, 76], "violat": [43, 55, 76], "slowli": [43, 63, 80], "hold": [43, 56, 57, 63, 65, 70, 73, 77, 93, 97, 98], "prefer": [43, 66, 74, 90, 93], "preclud": [43, 53], "abil": [43, 46, 53, 57, 63, 66, 76, 77, 88, 89, 93], "brute": [43, 63], "degeneraci": 43, "subset": [43, 53, 56, 57, 63, 66, 73, 88, 94], "hierach": 43, "indeped": 43, "henc": [43, 73, 78], "set_initial_condit": [44, 60, 64], "run_mcmc": [44, 60, 64], "checkpoint_interv": [44, 60, 64, 90], "set_target": [44, 60, 64], "compute_acf": [44, 60, 64], "compute_acl": [44, 60, 64], "mcmcautocorrsupport": 44, "multitemperedautocorrsupport": 44, "engin": [44, 56, 57, 72, 84, 95], "primer": 44, "parent": [44, 53, 56, 66, 77], "confus": [44, 70, 76, 77, 88, 96], "overridden": [44, 53, 61, 74, 77, 80, 84, 88, 89], "collect": [44, 55, 60, 61, 69, 77, 85, 93], "model_stat": [44, 60, 64], "examin": 44, "practic": [44, 70, 77, 93], "criteria": [44, 56, 64], "met": 44, "accommod": 44, "fulfil": 44, "underli": [44, 64, 66, 76], "introduc": [44, 63, 64, 73, 76, 80], "acf": [44, 58, 61, 64], "break": [44, 73, 74, 77, 95], "rearrang": 44, "repostiori": 44, "thank": 44, "shown": [45, 53, 71, 80, 88], "4999": 45, "input_fil": [45, 61, 71, 77, 89, 97], "output_fil": [45, 53, 61, 64, 77, 80, 85, 98], "logplr": [45, 60, 63], "alpha": [45, 53, 56, 60, 63, 69], "180": 45, "deg": [45, 55], "psi": [45, 63, 76], "iota": [45, 53, 67], "phi_0": 45, "6000": [45, 60], "th": [45, 55, 61, 64, 71], "12000": 45, "thin_start": [45, 60, 61, 64], "5999": 45, "thin_interv": [45, 60, 61, 64], "thin_end": [45, 60, 61, 64], "11999": 45, "_plot_posterior": 45, "_plot_movi": 45, "start_sampl": 45, "end_sampl": 45, "frame_step": 45, "output_prefix": [45, 97], "movie_fil": 45, "dpi": 45, "individu": [45, 53, 55, 56, 63, 66, 69, 70, 74, 75, 76, 77, 86, 88, 96], "pypi": [46, 49, 79, 88], "fork": [46, 48], "maintain": [46, 79, 80], "bug": [46, 74, 93], "merg": [46, 53, 77, 86, 89, 93], "offici": [46, 64], "upgrad": [46, 49, 73], "setuptool": 46, "fresh": 46, "develeop": 46, "companion": 46, "cit": [46, 77, 86], "suffici": [46, 65, 76, 80, 87, 92], "recent": [46, 53, 56, 69, 80, 82], "workaround": 46, "info": [46, 53, 56, 59, 60, 61, 69, 93], "yield": [46, 53, 55, 63, 69, 77, 88], "py37": 46, "sphinx": 46, "helper": [46, 56, 63, 66, 69, 71, 74, 76, 77, 88], "rtd": 46, "theme": 46, "sphinxcontrib": 46, "programoutput": 46, "build_doc": 46, "_build": 46, "appear": [46, 53, 55, 56, 77, 79, 80, 86, 88, 93, 96], "compilervar": 46, "intel64": 46, "advantag": [46, 66, 80], "nvidia": 47, "driver": [47, 66], "pycuda": [47, 74], "scikit": 47, "041": 47, "mako": 47, "dev": [47, 79, 93], "cuda_root": 47, "ld_library_path": [47, 53], "export": [47, 48, 49, 57, 93, 95], "usr": [47, 93], "lib64": 47, "gsl": 48, "framel": 48, "metaio": 48, "administr": [48, 49, 93], "enter": [48, 58, 63, 79], "virtual_env": 48, "lscsoft": [48, 53], "credenti": [48, 93], "lsc": [48, 80, 88, 93], "intens": 48, "nsf": 48, "non": [48, 53, 55, 63, 67, 70, 74, 76, 77, 90, 93, 98], "nf": 48, "unstabl": 48, "v6": 48, "lalsuite_o1_branch": 48, "chose": [48, 53, 93], "00boot": 48, "swig": 48, "lalstochast": 48, "lalxml": 48, "lalinfer": 48, "laldetchar": 48, "lalapp": [48, 80, 89, 90, 98], "lalapps_coh_ptf_inspir": [48, 77, 90, 95], "multicor": 48, "j": [48, 53, 58, 60, 63, 67, 72, 73, 80], "processor": 48, "head": [48, 59, 71, 88, 93], "virtualenv": 48, "reenter": 48, "manag": [48, 49, 54, 57, 58, 65, 66, 69, 71, 72, 75, 77, 93, 98], "lal_prefix": 48, "seobnrv4": [48, 53, 83], "cern": 48, "lal_data_path": [48, 93], "scientic": 49, "old": [49, 56, 65, 66, 77, 79, 86, 93, 95], "sy": 49, "version_info": 49, "site": [49, 53, 77, 80, 85, 86, 93], "pythonpath": 49, "exclud": [49, 55, 61, 64, 71, 76, 77], "easy_instal": 49, "md5": 49, "d935ee9146074b1d3f26c5f0acfd120": 49, "report": [49, 53, 61, 66, 77, 91, 93, 95], "inst": [49, 93], "visibl": 49, "bash_profil": 49, "submodul": [50, 80, 85], "coinc": [50, 53, 66, 69, 77, 87, 93], "coinc_rat": [50, 53], "cut": [50, 53, 76, 80, 90, 93, 95, 96, 98], "eventmgr": [50, 53], "eventmgr_cython": [50, 53], "rank": [50, 53, 66, 69, 77, 93], "simd_threshold_cython": [50, 53], "stat": [50, 53, 55, 58, 60, 61, 63, 64, 66, 71, 90], "threshold_cpu": [50, 53], "trigger_fit": [50, 53], "backend_cpu": [50, 53], "backend_mkl": [50, 53], "class_api": [50, 53], "fft_callback": [50, 53], "fftw_prune": [50, 53], "fftw_pruned_cython": [50, 53], "func_api": [50, 53], "npfft": [50, 53], "parser_support": [50, 53], "matchedfilt": [50, 53, 63, 93, 94], "matchedfilter_cpu": [50, 53], "matchedfilter_numpi": [50, 53], "simd_correl": [50, 53], "simd_correlate_cython": [50, 53], "entropi": [50, 53], "gelman_rubin": [50, 53], "gewek": [50, 53], "option_util": [50, 53, 61, 80], "injfilterrejector": [50, 53, 72], "neutron_star": [50, 53], "eos_util": [50, 53], "pg_isso_solv": [50, 53], "reproduc": [50, 53, 61, 69, 77, 80, 86], "fgmc_function": [50, 53], "fgmc_laguerr": [50, 53], "fgmc_plot": [50, 53], "live_pastro": [50, 53], "live_pastro_util": [50, 53], "population_model": [50, 53], "rates_funct": [50, 53], "scale_inject": [50, 53], "variat": [50, 53, 56, 63, 69, 72, 73, 80, 90, 98], "followup": [50, 53, 58, 77], "layout": [50, 53, 73, 77, 88], "legacy_grb": [50, 53], "mpld3_util": [50, 53], "pygrb_plotting_util": [50, 53], "pygrb_postprocessing_util": [50, 53], "render": [50, 53], "scatter_histogram": [50, 53], "str_util": [50, 53], "table_util": [50, 53], "calibr": [50, 53, 63, 69, 71, 90, 95, 98], "recalibr": [50, 53, 63], "bank_convers": [50, 53, 80], "bank_output_util": [50, 53, 80], "brute_force_method": [50, 53, 80], "calc_moment": [50, 53, 80], "coord_util": [50, 53, 80], "lambda_map": [50, 53, 80], "lattice_util": [50, 53, 80], "partitioned_bank": [50, 53, 80], "array_cpu": [50, 53], "optpars": [50, 53, 56, 70, 72], "chisq_cpu": [50, 53], "sgchisq": [50, 53, 56, 66, 90], "decompress_cpu": [50, 53], "decompress_cpu_cython": [50, 53], "multiband": [50, 53, 83], "nltide": [50, 53], "premerg": [50, 53], "pycbc_phenomc_tmplt": [50, 53], "sinegauss": [50, 53], "spa_tmplt": [50, 53], "spa_tmplt_cpu": [50, 53], "supernova": [50, 53], "utils_cpu": [50, 53], "waveform_mod": [50, 53, 63], "coincid": [50, 53, 56, 58, 71, 73, 80, 88, 89, 90, 93, 94, 98], "configparser_test": [50, 53, 74, 85], "grb_util": [50, 53, 85], "inference_followup": [50, 53, 85], "jobsetup": [50, 53, 85], "minifollowup": [50, 53, 85], "pegasus_sit": [50, 53, 85], "pegasus_workflow": [50, 53, 85], "psdfile": [50, 53, 85], "splittabl": [50, 53, 85, 93], "bin_util": 50, "binnedarrai": [50, 53], "argmin": [50, 53], "centr": [50, 53, 76], "logregular": [50, 53], "binnedratio": [50, 53], "incdenomin": [50, 53], "incnumer": [50, 53], "upper": [50, 53, 54, 55, 56, 58, 63, 71, 73, 75, 76, 80, 83, 88, 98], "irregularbin": [50, 53], "linearbin": [50, 53], "linearplusoverflowbin": [50, 53], "logarithmicbin": [50, 53], "logarithmicplusoverflowbin": [50, 53], "ndbin": [50, 53], "apply_condit": [50, 53, 55], "contains_condit": [50, 53], "cyclic": [50, 53, 55, 62, 74, 76], "closedbound": [50, 53], "openbound": [50, 53], "reflectedbound": [50, 53], "reflect": [50, 53, 55, 77, 86, 90, 98], "reflect_left": [50, 53], "reflect_right": [50, 53], "apply_cycl": [50, 53], "reflect_wel": [50, 53], "chi_a": [50, 53, 55], "chi_eff_from_spher": [50, 53, 91, 92], "chi_p": [50, 53, 55, 91, 92], "chi_p_from_spher": [50, 53, 91, 92], "chi_p_from_xi1_xi2": [50, 53], "chi_perp_from_mass1_mass2_xi2": [50, 53], "chi_perp_from_spinx_spini": [50, 53], "eta_from_mass1_mass2": [50, 53], "eta_from_q": [50, 53], "eta_from_tau0_tau3": [50, 53], "final_mass_from_f0_tau": [50, 53, 55], "final_mass_from_initi": [50, 53], "final_spin_from_f0_tau": [50, 53, 55], "final_spin_from_initi": [50, 53], "freq_from_final_mass_spin": [50, 53], "freqlmn_from_other_lmn": [50, 53], "invq_from_mass1_mass2": [50, 53], "lambda_from_mass_tov_fil": [50, 53], "lambda_tild": [50, 53], "mass1_from_mass2_eta": [50, 53], "mass1_from_mchirp_eta": [50, 53], "mass1_from_mtotal_eta": [50, 53], "mass1_from_mtotal_q": [50, 53], "mass1_from_tau0_tau3": [50, 53], "mass2_from_mass1_eta": [50, 53], "mass2_from_mchirp_eta": [50, 53], "mass2_from_mtotal_eta": [50, 53], "mass2_from_mtotal_q": [50, 53], "mass2_from_tau0_tau3": [50, 53], "mchirp_from_tau0": [50, 53], "mtotal_from_mass1_mass2": [50, 53], "mtotal_from_mchirp_eta": [50, 53], "mtotal_from_tau0_tau3": [50, 53], "nltides_gw_phase_diff_isco": [50, 53], "optimal_dec_from_detector": [50, 53], "optimal_ra_from_detector": [50, 53], "phi1_from_phi_a_phi_": [50, 53], "phi2_from_phi_a_phi_": [50, 53], "phi_a": [50, 53], "phi_from_spinx_spini": [50, 53], "phi_": [50, 53, 76], "primary_spin": [50, 53, 91, 92], "primary_xi": [50, 53], "remnant_mass_from_mass1_mass2_cartesian_spin_eo": [50, 53], "remnant_mass_from_mass1_mass2_spherical_spin_eo": [50, 53], "secondary_spin": [50, 53, 91, 92], "secondary_xi": [50, 53], "snr_from_loglr": [50, 53, 63, 92], "spin1x_from_xi1_phi_a_phi_": [50, 53], "spin1y_from_xi1_phi_a_phi_": [50, 53], "spin1z_from_mass1_mass2_chi_eff_chi_a": [50, 53], "spin2x_from_mass1_mass2_xi2_phi_a_phi_": [50, 53], "spin2y_from_mass1_mass2_xi2_phi_a_phi_": [50, 53], "spin2z_from_mass1_mass2_chi_eff_chi_a": [50, 53], "spin_from_pulsar_freq": [50, 53], "tau0_from_mass1_mass2": [50, 53], "tau0_from_mchirp": [50, 53], "tau0_from_mtotal_eta": [50, 53], "tau3_from_mass1_mass2": [50, 53], "tau3_from_mtotal_eta": [50, 53], "tau_from_final_mass_spin": [50, 53], "taulmn_from_other_lmn": [50, 53], "xi1_from_spin1x_spin1i": [50, 53], "xi2_from_mass1_mass2_spin2x_spin2i": [50, 53], "cartesian_to_spherical_azimuth": [50, 53], "cartesian_to_spherical_polar": [50, 53], "cartesian_to_spherical_rho": [50, 53], "cosmological_quantity_from_redshift": [50, 53], "distance_from_comoving_volum": [50, 53, 91, 92], "redshift_from_comoving_volum": [50, 53, 91, 92], "effective_dist": [50, 53], "get_icrs_po": [50, 53], "gmst_estim": [50, 53], "optimal_orient": [50, 53], "set_gmst_refer": [50, 53], "time_delay_from_loc": [50, 53], "get_gcrs_po": [50, 53], "get_po": [50, 53], "add_detector_on_earth": [50, 53], "gmst_accur": [50, 53], "load_detector_config": [50, 53], "overhead_antenna_pattern": [50, 53], "ppdet": [50, 53], "parse_flag_str": [50, 53], "parse_veto_defin": [50, 53], "query_cumulative_flag": [50, 53], "query_dqsegdb2": [50, 53], "query_str": [50, 53], "libutil": 50, "get_ctypes_librari": [50, 53], "get_libpath_from_dirlist": [50, 53], "import_opt": [50, 53], "pkg_config": [50, 53], "pkg_config_check_exist": [50, 53], "pkg_config_header_str": [50, 53], "pkg_config_libdir": [50, 53], "mchirp_area": 50, "calc_area": [50, 53], "calc_prob": [50, 53], "from_cli": [50, 53, 56, 57, 65, 70, 72, 74, 75, 80], "get_area": [50, 53], "insert_arg": [50, 53, 56], "intmc": [50, 53], "redshift_estim": [50, 53], "src_mass_from_z_det_mass": [50, 53], "limitedsizedict": [50, 53], "getconf": [50, 53], "insert_optimization_option_group": [50, 53], "verify_optimization_opt": [50, 53], "pnutil": 50, "a0": [50, 53, 72], "a3": [50, 53, 69], "energi": [50, 53, 58], "energy_coeffici": [50, 53], "eta_mass1_to_mass2": [50, 53], "f_bklisco": [50, 53], "f_erd": [50, 53], "f_frd": [50, 53], "f_lrd": [50, 53], "f_lightr": [50, 53], "f_schwarzisco": [50, 53], "frequency_cutoff_from_nam": [50, 53], "frequency_to_veloc": [50, 53], "get_beta_sigma_from_aligned_spin": [50, 53], "get_final_freq": [50, 53], "get_freq": [50, 53], "get_inspiral_tf": [50, 53], "hybridenergi": [50, 53], "hybrid_meco_frequ": [50, 53], "hybrid_meco_veloc": [50, 53], "jframe_to_l0fram": [50, 53], "kerr_lightr": [50, 53], "kerr_lightring_veloc": [50, 53], "l0frame_to_jfram": [50, 53], "mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma": [50, 53], "mass1_mass2_to_mtotal_eta": [50, 53], "mass1_mass2_to_tau0_tau3": [50, 53], "mchirp_mass1_to_mass2": [50, 53], "meco2": [50, 53], "meco_veloc": [50, 53], "megaparsecs_to_met": [50, 53], "mtotal_eta_to_mass1_mass2": [50, 53], "nearest_larger_binary_numb": [50, 53], "parsecs_to_met": [50, 53], "solar_mass_to_kg": [50, 53], "t2_cutoff_frequ": [50, 53], "t2_cutoff_veloc": [50, 53], "t4_cutoff_veloc": [50, 53], "tau0_tau3_to_mass1_mass2": [50, 53], "tau0_tau3_to_mtotal_eta": [50, 53], "velocity_to_frequ": [50, 53], "pool": [50, 63, 64, 80, 93, 95], "broadcastpool": [50, 53], "allmap": [50, 53], "broadcast": [50, 53], "singlepool": [50, 53], "choose_pool": [50, 53], "is_main_process": [50, 53], "use_mpi": [50, 53, 64], "compute_effici": [50, 53], "compute_lower_limit": [50, 53], "compute_upper_limit": [50, 53], "compute_volume_vs_mass": [50, 53], "confidence_interval_min_width": [50, 53], "filter_injections_by_mass": [50, 53], "hpd_coverag": [50, 53], "hpd_credible_interv": [50, 53], "hpd_threshold": [50, 53], "integral_el": [50, 53], "integrate_effici": [50, 53], "mean_efficiency_volum": [50, 53], "normalize_pdf": [50, 53], "cpuschem": [50, 53], "cudaschem": [50, 53], "choosebyschemedict": [50, 53], "defaultschem": [50, 53, 76], "mklscheme": [50, 53], "numpyschem": [50, 53], "clean_cuda": [50, 53], "cpuonli": [50, 53], "current_prefix": [50, 53], "insert_processing_option_group": [50, 53], "register_clean_cuda": [50, 53], "verify_processing_opt": [50, 53], "chirp_volume_montecarlo": [50, 53], "compute_search_efficiency_in_bin": [50, 53], "compute_search_volume_in_bin": [50, 53], "volume_binned_pyl": [50, 53], "volume_montecarlo": [50, 53], "volume_shel": [50, 53], "volume_to_distance_with_error": [50, 53], "inverse_transform": [50, 53], "basetransform": [50, 53], "format_output": [50, 53], "chiptocartesianspin": [50, 53], "get_eo": [50, 53], "lambda_param": [50, 53], "map_fil": [50, 53], "mass_param": [50, 53], "lambda_data": [50, 53], "lambda_from_tov_data": [50, 53], "mass_data": [50, 53], "inputvar": [50, 53, 92], "outputvar": [50, 53, 92], "apply_transform": [50, 53], "compute_jacobian": [50, 53], "get_common_cbc_transform": [50, 53], "order_transform": [50, 53], "read_transforms_from_config": [50, 53, 63], "logformatt": [50, 53], "formattim": [50, 53], "gps_now": [50, 53], "init_log": [50, 53], "makedir": [50, 53], "random_str": [50, 53], "example_psd": 52, "from_txt": [52, 53, 70, 80], "is_asd_fil": [52, 70], "loglog": [52, 69, 73], "sample_frequ": [52, 53, 74, 76, 84], "modif": 52, "load_frequencyseri": [52, 53, 74], "xmin": [52, 71], "xmax": [52, 71], "npy": [52, 74], "tmp_psd": 52, "get_lalsim_psd_list": [52, 53, 70, 80], "p1": [52, 74], "p2": 52, "from_str": [52, 53, 70, 80], "highpow": 52, "lowpow": 52, "fall": [52, 53, 56, 76, 93], "warn": [52, 53, 56, 63, 72, 76, 77, 80, 82, 86, 94, 98], "rais": [52, 53, 55, 56, 57, 58, 60, 61, 63, 64, 65, 66, 70, 71, 74, 76, 77, 78, 80, 84, 86, 90, 92, 93, 98], "meaningless": 52, "extrapol": [52, 74], "lest": 52, "incorrect": 52, "128": [52, 68, 80, 95, 98], "seg_len": [52, 70], "seg_strid": [52, 60, 70], "estimated_psd": 52, "linewidth": 52, "48": [52, 88, 93], "get_sourc": [53, 54], "list_catalog": [53, 54], "apply_boundary_condit": [53, 55], "azimuthal_angl": [53, 55], "polar_angl": [53, 55], "get_kde_from_arrai": [53, 55], "kde": [53, 55, 56, 60, 63, 71], "set_bandwidth": [53, 55], "lognorm": [53, 55, 60, 63, 69], "get_arrays_from_fil": [53, 55], "boundeddist": [53, 55], "cdfinv": [53, 55], "logpdf": [53, 55], "bounded_from_config": [53, 55], "get_param_bounds_from_config": [53, 55], "supernovaeconvexhul": [53, 55], "required_paramet": [53, 55], "cdf": [53, 55, 56], "var": [53, 55, 62, 71, 95], "jointdistribut": [53, 55, 63, 64], "variable_arg": [53, 55, 63, 76], "well_reflect": [53, 55], "within_constraint": [53, 55], "dim": [53, 55, 60, 80, 98], "prior_from_config": [53, 55, 60, 63], "read_constraints_from_config": [53, 55], "read_distributions_from_config": [53, 55], "read_params_from_config": [53, 55], "coherent_snr": [53, 56], "coincident_snr": [53, 56], "get_coinc_index": [53, 56], "get_coinc_trigg": [53, 56], "get_projection_matrix": [53, 56], "network_chisq": [53, 56], "null_snr": [53, 56], "reweight_snr_by_nul": [53, 56], "reweightedsnr_cut": [53, 56], "coincexpirebuff": [53, 56], "increment": [53, 56, 61, 76, 79, 91, 92, 93], "nbyte": [53, 56, 74], "num_great": [53, 56], "livecoinctimeslidebackgroundestim": [53, 56], "add_singl": [53, 56], "background_tim": [53, 56], "backout_last": [53, 56], "ifar": [53, 56, 69, 77, 87, 93], "pick_best_coinc": [53, 56], "restore_st": [53, 56], "save_st": [53, 56], "set_singles_buff": [53, 56], "multiringbuff": [53, 56], "advance_tim": [53, 56], "check_expired_trigg": [53, 56], "discard_last": [53, 56], "expire_vector": [53, 56], "filled_tim": [53, 56], "num_el": [53, 56], "update_valid_start": [53, 56], "valid_slic": [53, 56], "background_bin_from_str": [53, 56], "cluster_coinc": [53, 56], "cluster_coincs_multiifo": [53, 56], "cluster_over_tim": [53, 56], "mean_if_greater_than_zero": [53, 56], "time_coincid": [53, 56], "time_multi_coincid": [53, 56], "timeslide_dur": [53, 56], "combination_noise_logr": [53, 56], "combination_noise_r": [53, 56], "multiifo_noise_coincident_area": [53, 56], "multiifo_noise_logr": [53, 56], "multiifo_signal_coincident_area": [53, 56], "apply_template_cut": [53, 56], "apply_template_fit_cut": [53, 56], "apply_trigger_cut": [53, 56], "check_update_cut": [53, 56], "convert_inputstr": [53, 56], "ingest_cuts_option_group": [53, 56], "insert_cuts_option_group": [53, 56], "sigma_multiple_cut_thresh": [53, 56], "eventmanag": [53, 56], "add_template_ev": [53, 56], "add_template_param": [53, 56], "chisq_threshold": [53, 56, 71, 90], "cluster_template_ev": [53, 56], "consolidate_ev": [53, 56], "finalize_ev": [53, 56], "finalize_template_ev": [53, 56], "from_multi_ifo_interfac": [53, 56], "keep_loudest_in_interv": [53, 56], "keep_near_inject": [53, 56], "make_output_dir": [53, 56], "new_templ": [53, 56], "newsnr_threshold": [53, 56, 58], "save_perform": [53, 56], "write_ev": [53, 56], "write_to_hdf": [53, 56, 76], "eventmanagercoher": [53, 56], "add_template_events_to_network": [53, 56], "add_template_network_ev": [53, 56], "cluster_template_network_ev": [53, 56], "eventmanagermultidet": [53, 56], "cluster_template_events_single_ifo": [53, 56], "thresholdclust": [53, 56], "cluster_reduc": [53, 56], "findchirp_cluster_over_window": [53, 56], "threshold_and_clust": [53, 56], "threshold_onli": [53, 56], "threshold_real_numpi": [53, 56], "coincbuffer_expireel": [53, 56], "coincbuffer_numgreat": [53, 56], "findchirp_cluster_over_window_cython": [53, 56], "logsignalrateinternals_compute2detr": [53, 56], "logsignalrateinternals_computepsignalbin": [53, 56], "timecluster_cython": [53, 56], "timecoincidence_constructfold": [53, 56], "timecoincidence_constructidx": [53, 56], "timecoincidence_findidxlen": [53, 56], "timecoincidence_getslideint": [53, 56], "effsnr": [53, 56], "get_newsnr": [53, 56], "get_newsnr_sgveto": [53, 56], "get_newsnr_sgveto_psdvar": [53, 56], "get_newsnr_sgveto_psdvar_sc": [53, 56], "get_newsnr_sgveto_psdvar_scaled_threshold": [53, 56], "get_newsnr_sgveto_psdvar_threshold": [53, 56], "get_sngls_ranking_from_trig": [53, 56], "get_snr": [53, 56, 60, 63], "newsnr": [53, 56, 66, 90, 93], "newsnr_sgveto": [53, 56, 66, 90], "newsnr_sgveto_psdvar": [53, 56, 66, 90], "newsnr_sgveto_psdvar_sc": [53, 56, 90], "newsnr_sgveto_psdvar_scaled_threshold": [53, 56, 90], "newsnr_sgveto_psdvar_threshold": [53, 56, 66, 90], "check_significance_opt": [53, 56], "count_n_loud": [53, 56], "digest_significance_opt": [53, 56], "get_n_loud": [53, 56], "insert_significance_option_group": [53, 56], "n_louder_from_fit": [53, 56], "parallel_thresh_clust": [53, 56], "parallel_threshold": [53, 56], "livesingl": [53, 56], "calculate_ifar": [53, 56], "dqexpfitfgbgnormstatist": [53, 56], "assign_bin_id": [53, 56], "assign_dq_v": [53, 56], "find_dq_val": [53, 56], "lognoiser": [53, 56], "expfitbgratestatist": [53, 56], "coinc_lim_for_thresh": [53, 56], "rank_stat_coinc": [53, 56], "reassign_r": [53, 56], "expfitcombinedsnr": [53, 56], "rank_stat_singl": [53, 56], "use_alphamax": [53, 56], "expfitfgbgkdestatist": [53, 56], "assign_kd": [53, 56], "logsignalr": [53, 56], "expfitfgbgnormbbhstatist": [53, 56], "expfitfgbgnormstatist": [53, 56], "assign_median_sigma": [53, 56], "expfitstatist": [53, 56], "assign_fit": [53, 56], "coinc_old": [53, 56], "coinc_lim_for_thresh_old": [53, 56], "find_fit": [53, 56], "get_ref_v": [53, 56], "phasetdexpfitstatist": [53, 56], "phasetdstatist": [53, 56], "get_hist": [53, 56], "quadraturesumstatist": [53, 56], "get_sngl_rank": [53, 56], "get_statist": [53, 56], "get_statistic_from_opt": [53, 56], "insert_statistic_option_group": [53, 56], "parse_statistic_keywords_opt": [53, 56], "cputhresholdclust": [53, 56], "threshold_inlin": [53, 56], "threshold_numpi": [53, 56], "ks_test": [53, 56, 60], "cum_fit": [53, 56], "exponential_fitalpha": [53, 56], "fit_above_thresh": [53, 56], "fit_fn": [53, 56], "power_fitalpha": [53, 56], "rayleigh_fitalpha": [53, 56], "tail_threshold": [53, 56], "which_bin": [53, 56], "bank_bins_from_cli": [53, 56], "get_found_param": [53, 56], "get_inj_param": [53, 56], "get_mass_spin": [53, 56], "get_param": [53, 56], "insert_bank_bins_option_group": [53, 56], "get_segment_definer_com": [53, 56], "indices_outside_seg": [53, 56], "indices_outside_tim": [53, 56], "indices_within_seg": [53, 56], "indices_within_tim": [53, 56], "segments_to_start_end": [53, 56], "select_segments_by_defin": [53, 56], "start_end_from_seg": [53, 56], "start_end_to_seg": [53, 56], "get_backend_modul": [53, 57], "c2c_correlate_ifft": [53, 57], "c2c_half_correlate_ifft": [53, 57], "get_fn_plan": [53, 57], "htild": [53, 57, 58, 72, 75, 76], "param2": [53, 55, 57, 71, 77], "in_kmax": [53, 57], "out_kmax": [53, 57], "out_kmin": [53, 57], "export_double_wisdom_to_filenam": [53, 57], "export_single_wisdom_to_filenam": [53, 57], "get_flag": [53, 57], "get_measure_level": [53, 57], "import_double_wisdom_from_filenam": [53, 57], "import_single_wisdom_from_filenam": [53, 57], "import_sys_wisdom": [53, 57], "insert_fft_opt": [53, 57], "plan": [53, 57, 77, 80, 83, 90, 98], "set_measure_level": [53, 57], "set_planning_limit": [53, 57], "set_threads_backend": [53, 57], "verify_fft_opt": [53, 57], "wisdom_io": [53, 57], "fft_transpos": [53, 57], "fft_transpose_fftw": [53, 57], "first_phas": [53, 57], "plan_first_phas": [53, 57], "plan_transpos": [53, 57], "pruned_c2cifft": [53, 57], "second_phas": [53, 57], "splai": [53, 57], "second_phase_cython": [53, 57], "check_statu": [53, 57], "create_descriptor": [53, 57], "insert_fft_option_group": [53, 57], "calculate_acf": [53, 58], "calculate_acl": [53, 58], "livebatchmatchedfilt": [53, 56, 58], "combine_result": [53, 58], "process_al": [53, 58], "process_data": [53, 58], "set_data": [53, 58], "matchedfiltercontrol": [53, 58], "full_matched_filter_and_cluster_fc": [53, 58], "full_matched_filter_and_cluster_symm": [53, 58], "full_matched_filter_thresh_onli": [53, 58], "hierarchical_matched_filter_and_clust": [53, 58], "matchedfilterskymaxcontrol": [53, 58], "full_matched_filter_and_clust": [53, 58], "matchedfilterskymaxcontrolnophas": [53, 58], "compute_followup_snr_seri": [53, 58], "compute_max_snr_over_sky_loc_stat": [53, 58], "compute_max_snr_over_sky_loc_stat_no_phas": [53, 58], "compute_u_val_for_sky_loc_stat": [53, 58], "compute_u_val_for_sky_loc_stat_no_phas": [53, 58], "correl": [53, 57, 58, 75, 80], "followup_event_signific": [53, 58], "get_cutoff_indic": [53, 58, 63], "make_frequency_seri": [53, 58], "matched_filter_cor": [53, 58], "optimized_match": [53, 58], "overlap_cplx": [53, 58], "sigmasq_seri": [53, 58, 75], "cpucorrel": [53, 58], "batch_correlate_execut": [53, 58], "correlate_numpi": [53, 58], "deltam_f": [53, 58], "qplane": [53, 58, 74], "qseri": [53, 58], "qtile": [53, 58], "interpolate_complex_frequ": [53, 58], "lowpass": [53, 58, 74, 81], "notch_fir": [53, 58, 74], "resample_to_delta_t": [53, 58], "correlate_parallel": [53, 58], "correlate_simd": [53, 58], "ccorrf_parallel": [53, 58], "ccorrf_simd": [53, 58], "filter_zpk": [53, 58], "get_run": [53, 59], "gwosc_frame_json": [53, 59], "gwosc_frame_url": [53, 59], "read_frame_gwosc": [53, 59], "read_strain_gwosc": [53, 59], "read_stor": [53, 59], "jump": [53, 60, 64, 73], "bounded_norm": [53, 60], "discret": [53, 56, 58, 60, 63, 76, 80, 98], "base_data": [53, 60], "data_util": [53, 60], "relbin_cpu": [53, 60], "base_cub": [53, 60], "baseburnintest": [53, 60], "available_test": [53, 60], "burn_in_index": [53, 60, 61], "halfchain": [53, 60], "posterior_step": [53, 60], "ensemblemcmcburnintest": [53, 60, 64], "ensemblemultitemperedmcmcburnintest": [53, 60, 64], "mcmcburnintest": [53, 60], "multitemperedmcmcburnintest": [53, 60, 64], "evaluate_test": [53, 60], "check_hist_param": [53, 60], "compute_pdf": [53, 60], "kl": [53, 60], "arithmetic_mean_estim": [53, 60], "harmonic_mean_estim": [53, 60], "stepping_stone_algorithm": [53, 60], "thermodynamic_integr": [53, 60], "walk": [53, 60, 64], "parselabelarg": [53, 60], "parseparametersarg": [53, 60], "add_density_option_group": [53, 60], "add_injsamples_map_opt": [53, 60, 61], "add_plot_posterior_option_group": [53, 60], "add_scatter_option_group": [53, 60], "expected_parameters_from_cli": [53, 60], "plot_ranges_from_cli": [53, 60], "cbchdfinjectionset": [53, 65], "injtyp": [53, 65], "make_strain_from_inj_object": [53, 65], "required_param": [53, 65], "supported_approxim": [53, 65], "incoherentfromfilehdfinjectionset": [53, 65], "loadt": [53, 65], "set_ref_tim": [53, 65], "slice_and_tap": [53, 65], "injectionset": [53, 65], "ringdownhdfinjectionset": [53, 65], "sgburstinjectionset": [53, 65], "indoc": [53, 65, 76], "get_hdf_injtyp": [53, 65], "hdf_injtype_from_approxim": [53, 65], "legacy_approximant_nam": [53, 65], "projector": [53, 65], "set_sim_data": [53, 65], "from_cli_multi_ifo": [53, 63, 65, 70, 72, 80], "from_cli_single_ifo": [53, 65, 70, 72, 80], "generate_short_inj_from_inj": [53, 65], "template_segment_check": [53, 65], "insert_injfilterrejector_option_group": [53, 65], "insert_injfilterrejector_option_group_multi_ifo": [53, 65], "datafromfil": [53, 66], "get_column": [53, 66], "dictarrai": [53, 66], "filedata": [53, 66], "foregroundtrigg": [53, 66], "get_active_seg": [53, 66], "get_bankfile_arrai": [53, 66], "get_coincfile_arrai": [53, 66], "get_end_tim": [53, 66, 74], "get_ifo": [53, 66], "get_snglfile_array_dict": [53, 66], "sort_arr": [53, 66], "to_coinc_hdf_object": [53, 66], "to_coinc_xml_object": [53, 66], "trig_id": [53, 66, 77], "hfile": [53, 66], "multiifostatmapdata": [53, 66], "readbytempl": [53, 56, 66], "get_data": [53, 60, 63, 66], "set_templ": [53, 66], "apply_mask": [53, 66], "checkbank": [53, 66], "effective_spin": [53, 66], "f_seobnrv2_peak": [53, 66], "f_seobnrv4_peak": [53, 66], "get_param_nam": [53, 66], "get_rank": [53, 66], "mask_to_n_loudest_clustered_ev": [53, 66], "psd_var_val": [53, 56, 66], "rchisq": [53, 66], "trig_dict": [53, 66], "u_val": [53, 66, 75, 77], "statmapdata": [53, 66], "combine_and_copi": [53, 66], "dump_pickle_to_hdf": [53, 66], "dump_stat": [53, 66], "get_all_subkei": [53, 66], "get_chisq_from_file_choic": [53, 66], "load_hdf5_to_dict": [53, 66], "load_stat": [53, 66], "name_all_dataset": [53, 66], "recursively_save_dict_contents_to_group": [53, 66], "save_dict_to_hdf5": [53, 66], "ligolwcontenthandl": [53, 66], "endelementn": [53, 66], "startcolumn": [53, 66], "startstream": [53, 66], "starttabl": [53, 66], "create_process_t": [53, 66], "default_null_valu": [53, 66], "get_table_column": [53, 66], "legacy_row_id_convert": [53, 66], "return_empty_sngl": [53, 66], "return_search_summari": [53, 66], "candidateforgracedb": [53, 66], "gracedb_tag_with_vers": [53, 66], "add_field": [53, 66], "add_funct": [53, 66], "add_method": [53, 66], "add_properti": [53, 66], "add_virtualfield": [53, 66], "addattr": [53, 66], "alias": [53, 66], "append": [53, 61, 63, 64, 66, 74, 77, 80, 93, 95, 96], "del_funct": [53, 66], "from_arrai": [53, 66], "from_kwarg": [53, 61, 66], "from_ligolw_t": [53, 66], "from_record": [53, 66], "functionlib": [53, 66], "parse_boolarg": [53, 66, 76], "parse_paramet": [53, 60, 61, 66], "sort": [53, 56, 61, 63, 66, 71, 73, 77, 93, 97], "to_arrai": [53, 66], "virtualfield": [53, 66], "waveformarrai": [53, 65, 66, 76, 90], "remnant_mass": [53, 66], "spin_px": [53, 66], "spin_pi": [53, 66], "spin_pz": [53, 66], "spin_sx": [53, 66], "spin_si": [53, 66], "spin_sz": [53, 66], "get_fil": [53, 66], "foucart18": [53, 67], "initialize_eo": [53, 67], "interp_grav_mass_to_baryon_mass": [53, 67], "interp_grav_mass_to_compact": [53, 67], "load_ns_sequ": [53, 67], "isco_solut": [53, 67], "isso_eq_at_pol": [53, 67], "isso_eq_at_pole_dr": [53, 67], "isso_eq_at_pole_dr2": [53, 67], "pg_isso_eq": [53, 67], "pg_isso_eq_dr": [53, 67], "pg_isso_eq_dr2": [53, 67], "frequency_noise_from_psd": [53, 68, 80], "noise_from_str": [53, 68, 80], "colored_nois": [53, 68, 80], "backgroundeventr": [53, 69], "add_background": [53, 69], "eval_pdf": [53, 69], "get_norm": [53, 69], "plot_bg": [53, 69], "eventr": [53, 69], "add_bank": [53, 69], "filter_templ": [53, 69], "get_ctyp": [53, 69], "get_livetim": [53, 69], "in_coinc_time_excl": [53, 69], "make_bin": [53, 69], "moreifotim": [53, 69], "foregroundev": [53, 69], "add_zerolag": [53, 69], "get_bg_pdf": [53, 69], "get_sg_pdf": [53, 69], "signaleventr": [53, 69], "add_inject": [53, 69], "make_all_bin": [53, 69], "plot_inj": [53, 69], "alltim": [53, 69], "filter_bin_lo_hi": [53, 69], "filter_tmplt_mchirp": [53, 69], "get_start_dur": [53, 69], "ifos_from_combo": [53, 69], "in_coinc_time_incl": [53, 69], "log_rho_bg": [53, 69], "log_rho_fg": [53, 69], "log_rho_fg_analyt": [53, 69], "read_full_data": [53, 69], "read_full_data_mchirp": [53, 69], "type_in_tim": [53, 69], "augmented_rv_continu": [53, 69], "hpd_interv": [53, 69], "count_posterior": [53, 69], "p_bg": [53, 69], "dist_summari": [53, 69], "odds_summari": [53, 69], "plotdist": [53, 69], "check_template_param_bin_data": [53, 69], "noise_density_from_far": [53, 69], "read_template_bank_param": [53, 69], "signal_pdf_from_snr": [53, 69], "signal_rate_rescal": [53, 69], "signal_rate_trig_typ": [53, 69], "template_param_bin_pa": [53, 69], "template_param_bin_types_farlim_pa": [53, 69], "template_param_bin_types_pa": [53, 69], "pastrodata": [53, 69], "apply_significance_limit": [53, 69], "do_pastro_calc": [53, 69], "insert_live_pastro_option_group": [53, 69], "average_time_between_sign": [53, 69], "coalescence_r": [53, 69], "diff_lookback_tim": [53, 69], "distance_from_r": [53, 69], "merger_rate_dens": [53, 69], "norm_redshift_distribut": [53, 69], "p_tau": [53, 69], "sfr_grb_2008": [53, 69], "sfr_madau_dickinson_2014": [53, 69], "sfr_madau_fragos_2017": [53, 69], "total_rate_upto_redshift": [53, 69], "draw_flat_sampl": [53, 69], "draw_imf_sampl": [53, 69], "draw_lnm_sampl": [53, 69], "fgmc": [53, 69], "log_rho_fgmc": [53, 69], "mchirp_sampler_flat": [53, 69], "mchirp_sampler_imf": [53, 69], "mchirp_sampler_lnm": [53, 69], "prob_flat": [53, 69], "prob_imf": [53, 69], "prob_lnm": [53, 69], "process_full_data": [53, 69], "save_bkg_falloff": [53, 69], "skew_lognormal_sampl": [53, 69], "astro_redshift": [53, 69], "contracted_dvdc": [53, 69], "dlum_to_z": [53, 69], "estimate_vt": [53, 69], "inj_distance_pdf": [53, 69], "inj_mass_pdf": [53, 69], "inj_spin_pdf": [53, 69], "pdf_z_astro": [53, 69], "process_inject": [53, 69], "read_inject": [53, 60, 61, 69], "get_psd_model_list": [53, 70, 80], "get_pycbc_psd_list": [53, 70, 80], "analytical_csd_lisa_tdi_1p5_xi": [53, 70, 80], "averaged_lisa_fplus_sq_approx": [53, 70, 80], "averaged_response_lisa_tdi_1p5": [53, 70, 80], "averaged_response_lisa_tdi_2p0": [53, 70, 80], "lisa_psd_compon": [53, 70, 80], "omega_length": [53, 70, 80], "psd_lisa_acc_nois": [53, 70, 80], "psd_lisa_oms_nois": [53, 70, 80], "sensitivity_curve_lisa_scird": [53, 70, 80], "sensitivity_curve_lisa_confus": [53, 70, 80], "sensitivity_curve_lisa_semi_analyt": [53, 70, 80], "bandlimited_interpol": [53, 70, 80], "inverse_spectrum_trunc": [53, 70, 80], "median_bia": [53, 70, 80], "from_numpy_arrai": [53, 70, 80], "from_xml": [53, 70, 80], "calc_filt_psd_vari": [53, 70, 80], "find_trigger_valu": [53, 70, 80], "mean_squar": [53, 70, 80], "associate_psds_to_multi_ifo_seg": [53, 70, 80], "associate_psds_to_seg": [53, 70, 80], "associate_psds_to_single_ifo_seg": [53, 70, 80], "generate_overlapping_psd": [53, 70, 80], "insert_psd_option_group": [53, 70, 80], "insert_psd_option_group_multi_ifo": [53, 70, 80], "verify_psd_opt": [53, 70, 80], "verify_psd_options_multi_ifo": [53, 70, 80], "source_color": [53, 71], "get_summary_page_link": [53, 71], "coinc_timeseries_plot": [53, 71], "columns_from_file_list": [53, 71], "get_gracedb_search_link": [53, 71], "times_to_link": [53, 71], "times_to_url": [53, 71], "trigger_timeseries_plot": [53, 71], "sectionnumb": [53, 71, 77], "group_layout": [53, 71], "grouper": [53, 71, 77, 85], "single_layout": [53, 71], "two_column_layout": [53, 71], "make_grb_segments_plot": [53, 71], "metapars": [53, 71], "handle_data": [53, 71], "handle_starttag": [53, 71], "html_escap": [53, 71], "load_html_metadata": [53, 71], "load_metadata_from_fil": [53, 71], "load_png_metadata": [53, 71], "save_fig_with_metadata": [53, 71], "save_html_with_metadata": [53, 71], "save_pdf_with_metadata": [53, 71], "save_png_with_metadata": [53, 71], "clicklink": [53, 71], "javascript": [53, 71], "linetooltip": [53, 71], "mplslide": [53, 71], "tooltip": [53, 71], "add_style_opt_to_pars": [53, 71], "hist_overflow": [53, 71], "set_style_from_cli": [53, 71], "generate_asd_plot": [53, 71], "axis_max_valu": [53, 71], "contour_plott": [53, 71], "new_snr_chisq": [53, 71], "pygrb_plott": [53, 71], "build_segment_filelist": [53, 71], "build_veto_filelist": [53, 71], "construct_tri": [53, 71], "extract_basic_trig_properti": [53, 71], "extract_ifo": [53, 71], "extract_ifos_and_veto": [53, 71], "extract_veto": [53, 71], "get_antenna_dist_factor": [53, 71], "get_antenna_factor": [53, 71], "get_antenna_single_respons": [53, 71], "get_bestnr": [53, 71], "get_coinc_snr": [53, 71], "get_grb_tim": [53, 71], "get_id_numb": [53, 71], "load_inject": [53, 71], "load_segment_dict": [53, 71], "load_segments_from_xml": [53, 71], "load_time_slid": [53, 71], "load_trigg": [53, 71], "load_xml_tabl": [53, 71], "max_median_stat": [53, 71], "mc_cal_wf_err": [53, 71], "pygrb_add_bestnr_opt": [53, 71], "pygrb_add_injmc_opt": [53, 71], "pygrb_add_missed_injs_input_opt": [53, 71], "pygrb_initialize_plot_pars": [53, 71], "read_multiinspiral_timeslides_from_fil": [53, 71], "read_seg_fil": [53, 71], "slide_veto": [53, 71], "sort_stat": [53, 71], "sort_trig": [53, 71], "get_embedded_config": [53, 71], "render_default": [53, 71], "render_glitchgram": [53, 71], "render_ignor": [53, 71], "render_text": [53, 71], "render_tmplt": [53, 71], "render_workflow_html_templ": [53, 71], "setup_template_rend": [53, 71], "construct_kd": [53, 71], "create_axes_grid": [53, 71], "create_density_plot": [53, 71], "create_marginalized_hist": [53, 71], "create_multidim_plot": [53, 71], "get_scale_fac": [53, 71], "reduce_tick": [53, 71], "remove_common_offset": [53, 71], "set_marginal_histogram_titl": [53, 71], "drop_trailing_zero": [53, 71], "format_valu": [53, 71], "get_signum": [53, 71], "mathjax_html_head": [53, 71], "html_tabl": [53, 71], "static_t": [53, 71], "create_versioning_pag": [53, 71], "get_code_version_numb": [53, 71], "get_library_version_info": [53, 71], "write_code_vers": [53, 71], "write_library_inform": [53, 71], "cubicsplin": [53, 72], "apply_calibr": [53, 72], "map_to_adjust": [53, 72], "add_gate_option_group": [53, 72], "apply_gates_to_fd": [53, 72], "apply_gates_to_td": [53, 72], "gate_and_paint": [53, 72], "gates_from_cli": [53, 63, 72], "psd_gates_from_cli": [53, 72], "avg_inner_product": [53, 72], "calibration_lin": [53, 72], "clean_data": [53, 72], "complex_median": [53, 72], "line_model": [53, 72], "matching_lin": [53, 72], "physicalmodel": [53, 72], "adjust_strain": [53, 72], "tf_from_fil": [53, 72], "update_c": [53, 72], "update_g": [53, 72], "update_r": [53, 72], "strainbuff": [53, 58, 72], "add_hard_count": [53, 72], "check_psd_dist": [53, 72], "invalidate_psd": [53, 72], "near_hwinj": [53, 72], "null_advance_strain": [53, 72], "overwhitened_data": [53, 72], "recalculate_psd": [53, 72], "strainseg": [53, 70, 72], "fourier_seg": [53, 70, 72], "insert_segment_option_group": [53, 72], "insert_segment_option_group_multi_ifo": [53, 72], "required_opts_list": [53, 72], "verify_segment_opt": [53, 72], "verify_segment_options_multi_ifo": [53, 72], "create_memory_and_engine_for_class_based_fft": [53, 72], "detect_loud_glitch": [53, 72], "execute_cached_fft": [53, 72], "execute_cached_ifft": [53, 72], "gate_data": [53, 72], "insert_strain_option_group": [53, 72], "insert_strain_option_group_multi_ifo": [53, 72], "next_power_of_2": [53, 72], "verify_strain_opt": [53, 72], "verify_strain_options_multi_ifo": [53, 72], "read_model_from_config": [53, 72], "get_bank_properti": [53, 73, 80], "calculate_ethinca_metric_comp": [53, 73, 80], "convert_to_sngl_inspiral_t": [53, 73, 80], "output_bank_to_fil": [53, 73, 80], "output_bank_to_hdf": [53, 73, 80], "output_sngl_inspiral_t": [53, 73, 80], "find_xi_extrema_brut": [53, 73, 80], "get_mass_distribut": [53, 73, 80], "get_physical_covaried_mass": [53, 73, 80], "stack_xi_direction_brut": [53, 73, 80], "calculate_metr": [53, 73, 80], "calculate_metric_comp": [53, 73, 80], "calculate_mo": [53, 73, 80], "determine_eigen_direct": [53, 73, 80], "get_moment": [53, 73, 80], "interpolate_psd": [53, 73, 80], "calc_point_dist": [53, 73, 80], "calc_point_dist_vari": [53, 73, 80], "estimate_mass_rang": [53, 73, 80], "find_closest_calculated_frequ": [53, 73, 80], "find_max_and_min_frequ": [53, 73, 80], "get_conv_param": [53, 73, 80], "get_cov_param": [53, 73, 80], "get_covaried_param": [53, 73, 80], "get_mu_param": [53, 73, 80], "get_point_dist": [53, 73, 80], "get_random_mass": [53, 73, 80], "get_random_mass_point_particl": [53, 73, 80], "outspiral_loop": [53, 73, 80], "return_nearest_cutoff": [53, 73, 80], "rotate_vector": [53, 73, 80], "test_point_dist": [53, 73, 80], "ethinca_order_from_str": [53, 73, 80], "generate_inverse_map": [53, 73, 80], "generate_map": [53, 73, 80], "get_chirp_param": [53, 73, 80], "get_ethinca_ord": [53, 73, 80], "generate_anstar_3d_lattic": [53, 73, 80], "generate_hexagonal_lattic": [53, 73, 80], "indentedhelpformatterwithnl": [53, 73, 80], "format_descript": [53, 73, 80], "format_opt": [53, 73, 80], "check_ethinca_against_bank_param": [53, 73, 80], "ethincaparamet": [53, 73, 80], "from_argpars": [53, 73, 80], "get_options_from_group": [53, 73, 80], "insert_base_bank_opt": [53, 73, 80], "insert_ethinca_metric_opt": [53, 73, 80], "insert_mass_range_option_group": [53, 73, 80], "insert_metric_calculation_opt": [53, 73, 80], "massrangeparamet": [53, 73, 80], "default_delta_bh_spin": [53, 73, 80], "default_delta_ns_mass": [53, 73, 80], "default_ns_eo": [53, 73, 80], "default_nsbh_boundary_mass": [53, 73, 80], "is_outside_rang": [53, 73, 80], "metricparamet": [53, 73, 80], "eval": [53, 73, 80], "evec": [53, 73, 80], "evecscv": [53, 73, 80], "metric": [53, 67, 73, 88, 98], "time_unprojected_metr": [53, 73, 80], "verify_ethinca_metric_opt": [53, 73, 80], "verify_mass_range_opt": [53, 73, 80], "verify_metric_calculation_opt": [53, 73, 80], "partitionedtmpltbank": [53, 73, 80], "add_point_by_chi_coord": [53, 73, 80], "add_point_by_mass": [53, 73, 80], "add_tmpltbank_from_hdf_fil": [53, 73, 80], "add_tmpltbank_from_xml_t": [53, 73, 80], "calc_point_distance_vari": [53, 73, 80], "check_bin_exist": [53, 73, 80], "find_point_bin": [53, 73, 80], "get_freq_map_and_norm": [53, 73, 80], "get_point_from_bins_and_idx": [53, 73, 80], "output_all_point": [53, 73, 80], "test_point_distance_vari": [53, 73, 80], "check_align": [53, 74], "empti": [53, 55, 58, 60, 66, 69, 74, 76, 77, 89, 93], "abs_arg_max": [53, 74], "abs_max_loc": [53, 74], "almost_equal_elem": [53, 74], "almost_equal_norm": [53, 74], "astyp": [53, 74], "clear": [53, 64, 74, 76, 80, 88], "conj": [53, 74], "cumsum": [53, 74], "dot": [53, 74, 84], "fill": [53, 58, 63, 71, 74, 80, 88], "items": [53, 74], "kind": [53, 63, 66, 74, 76, 84, 93, 96], "max_loc": [53, 74], "multiply_and_add": [53, 74], "ndim": [53, 62, 74], "ptr": [53, 74], "squared_norm": [53, 74], "trim_zero": [53, 74, 83], "vdot": [53, 74], "weighted_inn": [53, 74], "check_same_len_precis": [53, 74], "common_kind": [53, 74], "complex_same_precision_a": [53, 74], "force_precision_to_match": [53, 74], "load_arrai": [53, 74], "real_same_precision_a": [53, 74], "abs_arg_max_complex": [53, 74], "inner_r": [53, 74], "deepcopyableconfigpars": [53, 74], "interpolatingconfigpars": [53, 74, 77, 88], "add_options_to_sect": [53, 74, 77, 85], "check_duplicate_opt": [53, 74, 77, 85], "get_opt_tag": [53, 74], "get_subsect": [53, 74], "has_option_tag": [53, 74], "interpolate_str": [53, 74, 77, 85], "perform_extended_interpol": [53, 74, 77, 85], "populate_shared_sect": [53, 74], "read_ini_fil": [53, 74, 77, 85], "sanitize_newlin": [53, 74], "sanity_check_subsect": [53, 74, 77, 85], "split_multi_sect": [53, 74, 77, 85], "at_frequ": [53, 74], "cyclic_time_shift": [53, 74], "epoch": [53, 58, 63, 74, 76, 84], "get_delta_f": [53, 74], "get_epoch": [53, 74], "get_sample_frequ": [53, 74], "dictoptionact": [53, 74, 80, 98], "dictwithdefaultreturn": [53, 74, 80, 98], "default_set": [53, 74], "ifo_set": [53, 74], "multidetdictoptionact": [53, 74], "multidetmulticolonoptionact": [53, 74], "multidetoptionact": [53, 74], "multidetoptionactionspeci": [53, 74], "multidetoptionappendact": [53, 74], "convert_to_process_params_dict": [53, 74], "copy_opts_for_single_ifo": [53, 74], "ensure_one_opt": [53, 74], "ensure_one_opt_multi_ifo": [53, 74], "nonnegative_float": [53, 74], "nonnegative_int": [53, 74], "positive_float": [53, 74], "positive_int": [53, 74], "required_opt": [53, 74], "required_opts_multi_ifo": [53, 74], "add_into": [53, 74], "append_zero": [53, 74], "at_tim": [53, 74], "crop": [53, 74], "detrend": [53, 74], "epoch_clos": [53, 74], "filter_psd": [53, 74], "get_delta_t": [53, 74], "get_dur": [53, 74], "get_sample_r": [53, 74], "get_sample_tim": [53, 74], "prepend_zero": [53, 74], "sample_rate_clos": [53, 74], "to_astropi": [53, 74], "load_timeseri": [53, 65, 74], "singledetautochisq": [53, 75], "singledetskymaxautochisq": [53, 75], "autochisq_from_precomput": [53, 75], "singledetbankveto": [53, 75], "cache_overlap": [53, 75], "cache_segment_snr": [53, 75], "singledetskymaxbankveto": [53, 75], "bank_chisq_from_filt": [53, 75], "segment_snr": [53, 75], "template_overlap": [53, 75], "singledetpowerchisq": [53, 75], "cached_chisq_bin": [53, 75], "parse_opt": [53, 75], "singledetskymaxpowerchisq": [53, 75], "calculate_chisq_bin": [53, 75], "chisq_accum_bin": [53, 75], "fastest_power_chisq_at_point": [53, 75], "power_chisq_at_points_from_precomput": [53, 75], "power_chisq_bin": [53, 75], "power_chisq_bins_from_sigmasq_seri": [53, 75], "power_chisq_from_precomput": [53, 75], "shift_sum": [53, 75], "chisq_accum_bin_cython": [53, 75], "chisq_accum_bin_numpi": [53, 75], "point_chisq_cod": [53, 75], "singledetsgchisq": [53, 75], "insert_option_group": [53, 75], "filterbank": [53, 76], "generate_with_delta_f_and_max_freq": [53, 76], "get_decompressed_waveform": [53, 76], "filterbankskymax": [53, 76], "livefilterbank": [53, 76], "get_templ": [53, 76], "getslic": [53, 76], "id_from_param": [53, 76], "round_up": [53, 76], "templatebank": [53, 76, 90, 95], "has_compressed_waveform": [53, 76], "filehandl": [53, 76], "extra_arg": [53, 64, 76], "end_frequ": [53, 76], "ensure_hash": [53, 76], "ensure_standard_filter_column": [53, 76], "parse_approxim": [53, 76], "template_thin": [53, 76], "add_approximant_arg": [53, 76], "boolargs_from_apprxstr": [53, 76], "find_variable_start_frequ": [53, 76], "parse_approximant_arg": [53, 76], "sigma_cach": [53, 76], "tuple_to_hash": [53, 76], "compressedwaveform": [53, 76], "load_to_memori": [53, 76], "mismatch": [53, 58, 73, 74, 76], "clear_cach": [53, 76], "decompress": [53, 76, 90], "from_hdf": [53, 76], "sample_point": [53, 76], "compress_waveform": [53, 76], "fd_decompress": [53, 76], "inline_linear_interp": [53, 76], "mchirp_compress": [53, 76], "rough_time_estim": [53, 76], "spa_compress": [53, 76], "vecdiff": [53, 76], "decomp_ccode_doubl": [53, 76], "decomp_ccode_float": [53, 76], "basecbcgener": [53, 76], "possible_arg": [53, 76], "basefdomaindetframegener": [53, 76], "detector_nam": [53, 65, 76], "current_param": [53, 60, 63, 76], "rframe_gener": [53, 76], "frozen_location_arg": [53, 76], "location_arg": [53, 76], "select_rframe_gener": [53, 76], "set_epoch": [53, 76], "static_arg": [53, 55, 65, 76], "basegener": [53, 76], "frozen_param": [53, 76], "fdomaincbcgener": [53, 63, 76], "fdomaincbcmodesgener": [53, 76], "fdomaindetframegener": [53, 63, 76], "fdomaindetframemodesgener": [53, 76], "fdomaindetframetwopolgener": [53, 76], "fdomaindetframetwopolnorespgener": [53, 76], "fdomainfreqtauringdowngener": [53, 76], "fdomainmassspinringdowngener": [53, 76], "tdomaincbcgener": [53, 76], "tdomaincbcmodesgener": [53, 76], "tdomainfreqtauringdowngener": [53, 76], "tdomainmassspinringdowngener": [53, 76], "tdomainsupernovaegener": [53, 76], "select_waveform_gener": [53, 76], "select_waveform_modes_gener": [53, 76], "multiband_fd_waveform": [53, 76], "nltides_fourier_phase_differ": [53, 76], "nonlinear_tidal_spa": [53, 76], "parameterlist": [53, 76], "asdict": [53, 76], "aslist": [53, 76], "default_dict": [53, 76], "description_dict": [53, 76], "dtype_dict": [53, 76], "label_dict": [53, 76], "nodefault": [53, 76], "add_custom_waveform": [53, 76, 84], "add_length_estim": [53, 76], "retrieve_waveform_plugin": [53, 76], "premerger_taylorf2": [53, 76], "kerr_factor": [53, 76], "fd_damped_sinusoid": [53, 76], "fd_output_vector": [53, 76], "format_lmn": [53, 76], "get_fd_from_final_mass_spin": [53, 76], "get_fd_from_freqtau": [53, 76], "get_td_from_final_mass_spin": [53, 76], "get_td_from_freqtau": [53, 76], "lm_amps_phas": [53, 76], "lm_arbitrary_harmon": [53, 76], "lm_deltaf": [53, 76], "lm_deltat": [53, 76], "lm_ffinal": [53, 76], "lm_freqs_tau": [53, 76], "lm_tfinal": [53, 76], "multimode_bas": [53, 76], "parse_mod": [53, 76], "prop": [53, 71, 76], "qnm_freq_decai": [53, 76], "qnm_time_decai": [53, 76], "spher_harm": [53, 76], "td_damped_sinusoid": [53, 76], "td_output_vector": [53, 76], "fd_sine_gaussian": [53, 76], "findchirp_chirptim": [53, 76], "spa_amplitude_factor": [53, 76], "spa_dist": [53, 76], "spa_length_in_tim": [53, 76], "spa_tmplt_end": [53, 76], "spa_tmplt_engin": [53, 76], "spa_tmplt_norm": [53, 76], "spa_tmplt_precondit": [53, 76], "cbrt_lookup": [53, 76], "get_cbrt": [53, 76], "get_log": [53, 76], "logv_lookup": [53, 76], "spa_tmplt_inline_sequ": [53, 76], "get_corecollapse_bounc": [53, 76], "amplitude_from_frequencyseri": [53, 76], "amplitude_from_polar": [53, 76, 83], "apply_fd_time_shift": [53, 76], "apply_fseries_time_shift": [53, 76], "ceilpow2": [53, 76], "coalign_waveform": [53, 76], "fd_taper": [53, 76], "fd_to_td": [53, 76], "frequency_from_polar": [53, 76, 83], "phase_from_frequencyseri": [53, 76], "phase_from_polar": [53, 76, 83], "taper_timeseri": [53, 76], "td_taper": [53, 65, 76], "time_from_frequencyseri": [53, 76], "fstimeshift": [53, 76], "fstimeshift32": [53, 76], "failedwaveformerror": [53, 63, 76], "nowaveformerror": [53, 76], "fd_approxim": [53, 76, 83], "filter_approxim": [53, 76], "get_fd_det_waveform": [53, 76], "get_fd_det_waveform_sequ": [53, 76], "get_fd_waveform_from_td": [53, 76], "get_fd_waveform_sequ": [53, 76], "get_sgburst_waveform": [53, 76], "get_td_det_waveform_from_fd_det": [53, 76], "get_td_waveform_from_fd": [53, 76], "get_template_amplitude_norm": [53, 76], "get_two_pol_waveform_filt": [53, 76], "get_waveform_end_frequ": [53, 76], "get_waveform_filt": [53, 76], "get_waveform_filter_length_in_tim": [53, 73, 76], "get_waveform_filter_norm": [53, 76], "print_fd_approxim": [53, 76], "print_sgburst_approxim": [53, 76], "print_td_approxim": [53, 76], "sgburst_approxim": [53, 76], "td_approxim": [53, 76, 83], "td_waveform_to_fd_waveform": [53, 76], "waveform_norm_exist": [53, 76], "default_mod": [53, 76], "fd_waveform_mode_approxim": [53, 63, 76], "get_fd_waveform_mod": [53, 76], "get_glm": [53, 76], "get_imrphenomxh_mod": [53, 76], "get_nrsur_mod": [53, 76], "get_td_waveform_mod": [53, 76], "sum_mod": [53, 76], "td_waveform_mode_approxim": [53, 63, 76], "censorforeground": [53, 77, 85], "current_retention_level": [53, 77, 85, 88, 89], "mergeexecut": [53, 77, 85], "pycbcaddstatmap": [53, 77, 85], "create_nod": [53, 77, 85, 89, 97], "pycbcbank2hdfexecut": [53, 77, 85], "pycbccombinestatmap": [53, 77, 85], "pycbcdistributebackgroundbin": [53, 77, 85], "pycbcexcludezerolag": [53, 77, 85], "pycbcfindcoincexecut": [53, 77, 85], "pycbcfindsnglsexecut": [53, 77, 85], "file_input_opt": [53, 77, 85], "pycbcfitbytemplateexecut": [53, 77, 85], "pycbcfitoverparamexecut": [53, 77, 85], "pycbchdfinjfindexecut": [53, 77, 85], "pycbcsnglsstatmapexecut": [53, 77, 85], "pycbcsnglsstatmapinjexecut": [53, 77, 85], "pycbcstatmapexecut": [53, 77, 85], "pycbcstatmapinjexecut": [53, 77, 85], "pycbctrig2hdfexecut": [53, 77, 85], "convert_bank_to_hdf": [53, 77, 85], "convert_trig_to_hdf": [53, 77, 85], "find_injections_in_hdf_coinc": [53, 77, 85], "get_ordered_ifo_list": [53, 77, 85], "make_foreground_censored_veto": [53, 77, 85], "merge_single_detector_hdf_fil": [53, 77, 85], "rerank_coinc_followup": [53, 77, 85], "select_files_by_ifo_combin": [53, 77, 85], "setup_combine_statmap": [53, 77, 85], "setup_exclude_zerolag": [53, 77, 85], "setup_interval_coinc": [53, 77, 85], "setup_interval_coinc_inj": [53, 77, 85], "setup_sngl": [53, 77, 85], "setup_sngls_inj": [53, 77, 85], "setup_sngls_statmap": [53, 77, 85], "setup_sngls_statmap_inj": [53, 77, 85], "setup_statmap": [53, 77, 85], "setup_statmap_inj": [53, 77, 85], "setup_trigger_fit": [53, 77, 85], "parse_workflow_ini_fil": [53, 77, 85], "get_cli_opt": [53, 77, 85, 88], "interpolate_ex": [53, 77, 85, 88], "perform_exe_expans": [53, 77, 85, 88], "resolve_file_url": [53, 77, 85, 88], "resolve_url": [53, 77, 85, 88], "section_to_cli": [53, 77, 85, 88], "add_workflow_command_line_group": [53, 74, 77, 85, 88], "calledprocesserrormod": [53, 77, 85], "all_trigg": [53, 77, 80, 85, 88, 92, 93], "final_result": [53, 77, 85, 88], "intermediate_product": [53, 77, 85, 88], "keep_but_raise_warn": [53, 77, 85], "merged_trigg": [53, 77, 80, 85, 88, 93], "add_ini_profil": [53, 77, 85], "add_opt": [53, 77, 85], "get_opt": [53, 77, 85], "get_transform": [53, 77, 85], "has_opt": [53, 74, 77, 85], "time_dependent_opt": [53, 77, 85], "update_current_retention_level": [53, 77, 85], "update_current_tag": [53, 77, 85], "update_output_directori": [53, 77, 85], "add_metadata": [53, 77, 85], "cache_entri": [53, 77, 85], "from_path": [53, 77, 85], "filelist": [53, 66, 71, 77, 85, 86, 89, 90, 97, 98], "categorize_by_attr": [53, 77, 85], "convert_to_lal_cach": [53, 77, 85], "entry_class": [53, 77, 85], "find_all_output_in_rang": [53, 77, 85], "find_output": [53, 77, 85], "find_output_at_tim": [53, 77, 85], "find_output_in_rang": [53, 77, 85], "find_output_with_ifo": [53, 77, 85], "find_output_with_tag": [53, 77, 85], "find_output_without_tag": [53, 77, 85], "find_outputs_in_rang": [53, 77, 85], "get_times_covered_by_fil": [53, 77, 85], "to_file_object": [53, 77, 85], "add_multiifo_input_list_opt": [53, 77, 85], "add_multiifo_output_list_opt": [53, 77, 85], "get_command_lin": [53, 77, 85], "new_multiifo_output_list_opt": [53, 77, 85], "new_output_file_opt": [53, 77, 85], "resolve_td_opt": [53, 77, 85], "segfil": [53, 77, 85, 86, 96], "from_multi_segment_list": [53, 77, 85], "from_segment_list": [53, 77, 85], "from_segment_list_dict": [53, 77, 85], "from_segment_xml": [53, 77, 85], "parse_segdict_kei": [53, 77, 85], "remove_short_sci_seg": [53, 77, 85], "return_union_seglist": [53, 77, 85], "to_segment_xml": [53, 77, 85], "exec_sites_str": [53, 77, 85], "execute_nod": [53, 77, 85], "get_ifo_combin": [53, 77, 85], "output_map": [53, 77, 80, 85], "save_config": [53, 77, 85], "staging_sit": [53, 77, 85], "staging_site_str": [53, 77, 85], "add_workflow_settings_cli": [53, 77, 85], "get_full_analysis_chunk": [53, 77, 85], "get_random_label": [53, 77, 85], "make_analysis_dir": [53, 77, 85], "make_external_cal": [53, 77, 85], "resolve_url_to_fil": [53, 77, 85], "convert_cachelist_to_filelist": [53, 77, 85, 86], "datafind_keep_unique_backup": [53, 77, 85, 86], "get_missing_segs_from_frame_file_cach": [53, 77, 85, 86], "get_science_segs_from_datafind_out": [53, 77, 85, 86], "get_segment_summary_tim": [53, 77, 85, 86], "log_datafind_command": [53, 77, 85, 86], "run_datafind_inst": [53, 77, 85, 86], "setup_datafind_from_pregenerated_lcf_fil": [53, 77, 85, 86], "setup_datafind_runtime_cache_multi_calls_perifo": [53, 77, 85, 86], "setup_datafind_runtime_cache_single_call_perifo": [53, 77, 85, 86], "setup_datafind_runtime_frames_multi_calls_perifo": [53, 77, 85, 86], "setup_datafind_runtime_frames_single_call_perifo": [53, 77, 85, 86], "setup_datafind_workflow": [53, 77, 85, 86], "pycbcbintriggerratesdqexecut": [53, 77, 85], "pycbccalculatedqexecut": [53, 77, 85], "pycbccalculatedqflagexecut": [53, 77, 85], "pycbcrerankdqexecut": [53, 77, 85], "setup_dq_rerank": [53, 77, 85], "pycbcgrbinjcombinerexecut": [53, 77, 85], "pycbcgrbinjfinderexecut": [53, 77, 85], "pycbcgrbtrigclusterexecut": [53, 77, 85], "pycbcgrbtrigcombinerexecut": [53, 77, 85], "fermi_core_tail_model": [53, 77, 85], "get_coh_ptf_fil": [53, 77, 85], "get_ipn_sky_fil": [53, 77, 85], "get_sky_grid_scal": [53, 77, 85], "make_exttrig_fil": [53, 77, 85], "make_gating_nod": [53, 77, 85], "select_grb_pp_class": [53, 77, 85], "set_grb_start_end": [53, 77, 85], "setup_pygrb_pp_workflow": [53, 77, 85], "create_fits_fil": [53, 77, 85, 92], "create_posterior_fil": [53, 77, 85], "get_diagnostic_plot": [53, 77, 85], "get_plot_group": [53, 77, 85], "make_diagnostic_plot": [53, 77, 85], "make_inference_acceptance_rate_plot": [53, 77, 85], "make_inference_dynesty_run_plot": [53, 77, 85], "make_inference_dynesty_trace_plot": [53, 77, 85], "make_inference_inj_recovery_plot": [53, 77, 85], "make_inference_plot": [53, 77, 85], "make_inference_plot_mcmc_histori": [53, 77, 85], "make_inference_posterior_plot": [53, 77, 85], "make_inference_pp_plot": [53, 77, 85], "make_inference_pp_t": [53, 77, 85], "make_inference_prior_plot": [53, 77, 85], "make_inference_samples_plot": [53, 77, 85], "make_inference_skymap": [53, 77, 85], "make_inference_summary_t": [53, 77, 85], "make_posterior_workflow": [53, 77, 85], "pycbcmergehdfexecut": [53, 77, 85, 89], "pycbcoptimalsnrexecut": [53, 77, 85, 89], "compute_inj_optimal_snr": [53, 77, 85, 89], "cut_distant_inject": [53, 77, 85, 89], "inj_to_hdf": [53, 77, 85, 89], "setup_injection_workflow": [53, 77, 85, 89], "veto_inject": [53, 77, 85, 89], "jobsegment": [53, 77, 85], "get_data_times_for_job": [53, 77, 85], "get_valid_times_for_job": [53, 77, 85], "pick_tile_s": [53, 77, 85], "lalappsinspinjexecut": [53, 77, 85], "ligolwaddexecut": [53, 77, 85], "ligolwcbcaligntotalspinexecut": [53, 77, 85], "ligolwcbcjitterskylocexecut": [53, 77, 85], "pycbcinspiralexecut": [53, 77, 85], "get_valid_tim": [53, 77, 85], "zero_pad_data_extend": [53, 77, 85], "pycbcmultiinspiralexecut": [53, 77, 85], "pycbctmpltbankexecut": [53, 77, 85], "create_nodata_nod": [53, 77, 85], "pycbcconditionstrainexecut": [53, 77, 85], "pycbccreateinjectionsexecut": [53, 77, 85], "pycbcdarkvsbrightinjectionsexecut": [53, 77, 85], "pycbchdfsplitinjexecut": [53, 77, 85], "pycbcinferenceexecut": [53, 77, 85], "pycbcsplitbankexecut": [53, 77, 85], "pycbcsplitbankxmlexecut": [53, 77, 85], "pycbcsplitinspinjexecut": [53, 77, 85], "identify_needed_data": [53, 77, 85], "int_gps_time_to_str": [53, 77, 85], "multi_ifo_coherent_job_setup": [53, 77, 85], "select_generic_execut": [53, 77, 85], "select_matchedfilter_class": [53, 77, 85], "select_tmpltbank_class": [53, 77, 85], "sngl_ifo_job_setup": [53, 77, 85], "setup_matchedfltr_dax_gener": [53, 77, 85, 90], "setup_matchedfltr_dax_generated_multi": [53, 77, 85, 90], "setup_matchedfltr_workflow": [53, 77, 85, 90], "plotqscanexecut": [53, 77, 85], "singletemplateexecut": [53, 77, 85], "singletimefreqexecut": [53, 77, 85], "make_coinc_info": [53, 77, 85], "make_inj_info": [53, 77, 85], "make_plot_waveform_plot": [53, 77, 85], "make_qscan_plot": [53, 77, 85], "make_single_template_plot": [53, 77, 85], "make_singles_timefreq": [53, 77, 85], "make_skipped_html": [53, 77, 85], "make_sngl_ifo": [53, 77, 85], "make_trigger_timeseri": [53, 77, 85], "setup_foreground_minifollowup": [53, 77, 85], "setup_injection_minifollowup": [53, 77, 85], "setup_single_det_minifollowup": [53, 77, 85], "add_condorpool_copy_sit": [53, 77, 85], "add_condorpool_shared_sit": [53, 77, 85], "add_condorpool_symlink_sit": [53, 77, 85], "add_ini_site_profil": [53, 77, 85], "add_local_sit": [53, 77, 85], "add_osg_sit": [53, 77, 85], "add_sit": [53, 77, 85], "add_site_pegasus_profil": [53, 77, 85], "make_catalog": [53, 77, 85], "add_profil": [53, 77, 85], "create_transform": [53, 77, 85], "add_pfn": [53, 77, 85], "dax_repr": [53, 77, 85], "has_pfn": [53, 77, 85], "insert_into_dax": [53, 77, 85], "output_map_str": [53, 77, 85], "add_arg": [53, 77, 85], "add_input": [53, 77, 85], "add_input_arg": [53, 77, 85], "add_input_list_opt": [53, 77, 85], "add_input_opt": [53, 77, 85], "add_list_opt": [53, 77, 85], "add_output": [53, 77, 85], "add_output_arg": [53, 77, 85], "add_output_list_opt": [53, 77, 85], "add_output_opt": [53, 77, 85], "add_raw_arg": [53, 77, 85], "profileshortcut": [53, 77, 85], "set_categori": [53, 77, 85], "set_execution_sit": [53, 77, 85], "set_memori": [53, 77, 85], "set_num_cpu": [53, 77, 85], "set_num_retri": [53, 77, 85], "set_prior": [53, 77, 85], "set_storag": [53, 77, 85], "set_univers": [53, 77, 85], "subworkflow": [53, 77, 85], "add_into_workflow": [53, 77, 85], "add_planner_arg": [53, 77, 85], "set_subworkflow_properti": [53, 77, 85], "is_same_a": [53, 77, 85], "add_contain": [53, 77, 85], "add_explicit_depend": [53, 77, 85], "add_nod": [53, 77, 85], "add_subworkflow_depend": [53, 77, 85], "add_transform": [53, 77, 85], "add_workflow": [53, 77, 85], "plan_and_submit": [53, 77, 85], "traverse_workflow_io": [53, 77, 85], "plotexecut": [53, 77, 85], "excludestr": [53, 77, 85], "make_binned_hist": [53, 77, 85], "make_coinc_snrchi_plot": [53, 77, 85], "make_dq_percentile_plot": [53, 77, 85], "make_dq_trigger_rate_plot": [53, 77, 85], "make_foreground_t": [53, 77, 85], "make_foundmissed_plot": [53, 77, 85], "make_gating_plot": [53, 77, 85], "make_ifar_plot": [53, 77, 85], "make_inj_t": [53, 77, 85], "make_range_plot": [53, 77, 85], "make_results_web_pag": [53, 77, 85], "make_seg_plot": [53, 77, 85], "make_seg_t": [53, 77, 85], "make_segments_plot": [53, 77, 85], "make_sensitivity_plot": [53, 77, 85], "make_single_hist": [53, 77, 85], "make_singles_plot": [53, 77, 85], "make_snrchi_plot": [53, 77, 85], "make_snrifar_plot": [53, 77, 85], "make_snrratehist_plot": [53, 77, 85], "make_spectrum_plot": [53, 77, 85], "make_template_plot": [53, 77, 85], "make_throughput_plot": [53, 77, 85], "make_veto_t": [53, 77, 85], "requirestr": [53, 77, 85], "make_average_psd": [53, 77, 85], "make_psd_fil": [53, 77, 85], "merge_psd": [53, 77, 82, 85, 94], "setup_psd_calcul": [53, 77, 85], "setup_psd_pregener": [53, 77, 85], "setup_psd_workflow": [53, 77, 85], "generate_triggered_seg": [53, 77, 85, 96], "get_flag_segments_fil": [53, 77, 85, 96], "get_segments_fil": [53, 77, 85, 96], "get_triggered_coherent_seg": [53, 77, 85, 96], "save_veto_defin": [53, 77, 85, 96], "select_splitfilejob_inst": [53, 77, 85, 97], "setup_splittable_dax_gener": [53, 77, 85, 97], "setup_splittable_workflow": [53, 77, 85, 97], "setup_tmpltbank_dax_gener": [53, 77, 85, 98], "setup_tmpltbank_pregener": [53, 77, 85, 98], "setup_tmpltbank_without_fram": [53, 77, 85, 98], "setup_tmpltbank_workflow": [53, 77, 85, 98], "wrapper": [53, 56, 63, 66, 74, 76, 77, 88, 90, 98], "element": [53, 55, 56, 61, 62, 63, 65, 66, 70, 71, 72, 73, 74, 76], "subclass": [53, 56, 57, 61, 66, 72, 74, 77, 89, 95], "tupl": [53, 54, 55, 56, 58, 60, 61, 63, 64, 66, 69, 70, 71, 72, 74, 75, 76, 77], "ordin": 53, "5e": [53, 70], "324": 53, "logarithm": [53, 55, 60], "decrement": 53, "presum": [53, 77, 86, 89], "minv": 53, "maxv": 53, "intend": [53, 55, 63, 76, 77, 80, 84, 86, 90], "irregular": 53, "strict": [53, 57, 63, 74], "monoton": [53, 56, 76], "11": [53, 56, 70, 77, 80], "inf": [53, 55, 58, 63, 64, 65, 71], "13": [53, 55, 70, 80], "17": [53, 80, 87, 93], "traceback": 53, "valueerror": [53, 55, 61, 63, 64, 70, 71, 74, 77, 86], "linearli": [53, 70], "inclus": 53, "27": 53, "indexerror": 53, "overflow": [53, 71, 73], "infin": [53, 69], "99999999": 53, "999": 53, "92401774": 53, "54987973": 53, "70997595": 53, "62008869": 53, "builtin": 53, "manipul": [53, 56, 72, 73, 76], "min_bound": 53, "max_bound": 53, "btype_min": 53, "btype_max": 53, "btype_": 53, "isntanc": 53, "keyword": [53, 55, 56, 61, 63, 64, 65, 66, 69, 70, 71, 74, 76, 77, 84, 86, 88], "bool": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 66, 71, 72, 74, 76, 77], "finit": [53, 61, 78], "conditioned_x": 53, "lw": [53, 66, 71], "vline": 53, "linestyl": [53, 71], "betewen": 53, "off": [53, 55, 58, 60, 61, 63, 71, 76, 77, 80, 92, 93, 96], "neither": [53, 64, 93], "_bound": 53, "notimplementederror": [53, 55, 65], "attributeerror": [53, 63, 66], "expos": [53, 61], "namespac": [53, 56, 60, 61, 63, 74, 77, 88], "xi1": 53, "xi2": 53, "plane": [53, 58], "secondari": [53, 66], "ref_mass": 53, "lambdav": 53, "lambda": [53, 66, 73, 80, 98], "1302": 53, "4499": 53, "mathrm": [53, 55, 60, 63, 69], "dquadmon": 53, "frac": [53, 55, 58, 63], "tau0": 53, "tau3": 53, "tau_0": [53, 73, 90], "tau_3": [53, 73], "f0": [53, 55, 58, 73, 76, 80, 88, 98], "tau": [53, 55, 58, 64, 69, 76, 80], "damp": [53, 55, 76], "keyerror": [53, 61], "harmon": [53, 56, 60, 63, 76, 94], "unphys": 53, "nan": [53, 61, 63, 65, 70], "seobnrv4phm": [53, 83], "nrsur7dq4": [53, 83], "eobnr": 53, "str": [53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 96], "nrsur7dq4remn": 53, "xlalsimimreobfinalmassspin": 53, "xlalsimimreobfinalmassspinprec": 53, "final_mass": [53, 55, 76], "final_spin": [53, 55, 76], "overton": [53, 76], "fundament": 53, "current_l": 53, "current_m": 53, "new_l": 53, "new_m": 53, "kerr": [53, 67, 76], "m2": [53, 56, 66, 69, 73, 76, 81], "m1": [53, 56, 66, 69, 73, 76, 81], "tov_fil": 53, "eo": [53, 67, 73, 80, 98], "journal": 53, "ap": 53, "prd": [53, 67], "1103": 53, "physrevd": 53, "91": 53, "043002": 53, "force_r": 53, "heavier": [53, 73, 80], "lighter": [53, 73, 80], "in_second": 53, "f_low": [53, 70, 73, 75, 80, 83, 98], "bwtween": 53, "f_isco": 53, "tide": [53, 76], "nl": [53, 76], "delta_phi": 53, "overhead": [53, 66], "perpendicular": 53, "2h": [53, 67, 73, 80, 98], "remnant": [53, 66, 67, 73, 80, 98], "discuss": [53, 56, 67, 75, 80, 87, 90, 91, 92, 97, 98], "foucart": [53, 67], "hinder": [53, 67], "nissank": [53, 67], "98": [53, 67, 77, 80], "081501": [53, 67], "2018": [53, 56, 63, 67, 80], "misalign": 53, "isso": [53, 67], "approach": [53, 86], "stone": [53, 60, 67], "loeb": [53, 67], "berger": [53, 67], "87": [53, 67], "084053": [53, 67], "2013": [53, 67, 80], "devis": 53, "86": [53, 70], "124007": [53, 80], "2012": [53, 80], "spin1a": 53, "spin1pol": 53, "tilt": [53, 67], "w": [53, 56, 61, 67], "sqrt": [53, 55, 60, 63, 67, 76, 90], "radiu": [53, 55, 67, 73, 77], "pulsar": 53, "inertia": 53, "kilomet": 53, "dame": 53, "rho": [53, 58, 69], "cosmolog": 53, "quantiti": [53, 56, 58, 71], "mostli": [53, 91, 92], "hand": [53, 55, 71, 82], "luminosity_dist": 53, "comoving_dist": 53, "strip_unit": 53, "kwarg": [53, 55, 56, 57, 60, 61, 62, 63, 64, 66, 69, 70, 71, 72, 73, 75, 76, 77, 86, 98], "ag": 53, "flatlambdacdm": 53, "san": 53, "get_cosmologi": [53, 69], "default_cosmologi": [53, 69], "vc": 53, "interp": [53, 63], "cube": [53, 55, 64], "disttoz": 53, "reference_tim": 53, "t_gp": 53, "polarization_typ": 53, "tensor": 53, "vector": [53, 55, 56, 57, 58, 63, 71, 72, 74, 76], "scalar": [53, 56, 61, 72, 74], "fplu": 53, "fx": [53, 58, 71], "fb": 53, "breath": 53, "fcross": 53, "fy": 53, "fl": 53, "longitudn": 53, "strength": 53, "megaparsec": 53, "eff_dist": 53, "gcr": 53, "icr": 53, "au": 53, "det": [53, 61, 63], "light": [53, 56, 58, 81, 93], "travel": [53, 56, 58, 81, 93], "antenna": [53, 56, 63, 70, 71, 76, 81], "pattern": [53, 59, 76, 81, 93], "vary_polar": 53, "other_detector": 53, "t2": [53, 56], "other_loc": 53, "word": [53, 60, 63, 69, 73, 76, 86, 89], "meter": 53, "ref_tim": 53, "scalartyp": 53, "sattelit": 53, "correspod": 53, "yangl": 53, "xangl": 53, "height": [53, 71], "letter": 53, "geodet": 53, "arm": [53, 70], "north": [53, 55], "rule": [53, 60, 63, 80, 88, 92, 93, 96], "ellipsoid": 53, "charact": [53, 71, 74], "clearer": 53, "hope": [53, 80], "config_fil": [53, 61, 77], "hypothet": 53, "\u03c0": [53, 55], "underneath": 53, "f_plu": [53, 56], "f_cro": 53, "pretti": 53, "alphabet": 53, "comma": [53, 63, 93, 96], "flag_str": 53, "sign": [53, 58, 74, 77, 93, 96], "dict": [53, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 71, 72, 73, 74, 76, 77, 86, 96], "segmentlist": [53, 56, 71, 77, 86, 90, 98], "veto_def_filenam": 53, "categori": [53, 77, 88, 93, 95, 96], "parsed_definit": 53, "segment_nam": [53, 56, 63, 66, 77], "override_ifo": 53, "atm": 53, "distinct": [53, 57, 80, 90, 96, 98], "start_pad": [53, 96], "end_pad": [53, 96], "flag_nam": 53, "dqsegdb2": 53, "ex": [53, 54, 56, 59, 74, 76, 77, 80, 86, 88, 89, 90, 97], "ctype": [53, 69], "preferenti": 53, "pkg": 53, "libnam": 53, "architectur": 53, "fashion": [53, 93], "omit": [53, 58, 66, 72, 74, 80, 93], "suffix": [53, 76], "dylib": 53, "cdll": 53, "dir": [53, 80, 93, 94, 95], "tri": [53, 63, 66, 80, 92], "lexicograph": 53, "os": 53, "posix": 53, "library_nam": 53, "stub": [53, 74, 75], "sucess": [53, 93], "pkg_librari": 53, "pkg_libri": 53, "library_dir": 53, "include_dir": 53, "against": [53, 57, 58, 75, 77, 80, 86, 90, 98], "irrespect": 53, "area": [53, 56], "central": [53, 58, 72, 73, 74, 76], "trig_mc_det": 53, "mass_limit": 53, "mass_bdari": 53, "mass_gap": 53, "mass_gap_separ": 53, "extrem": [53, 73], "mchirp_uncertainti": 53, "classifi": [53, 84], "diagram": 53, "src_arg": 53, "candid": [53, 56, 58, 66, 96], "parser": [53, 55, 56, 57, 60, 61, 63, 64, 65, 69, 70, 71, 72, 73, 74, 75, 76, 77, 88, 96], "trig_mc": 53, "lim_h1": 53, "lim_h2": 53, "lim_v1": 53, "lim_v2": 53, "sequenc": [53, 56, 61, 66, 67, 71, 73, 76], "diagon": [53, 62, 71], "horizont": [53, 69, 71], "vertic": [53, 71], "x_min": 53, "x_max": 53, "distance_std": 53, "lal_cosmologi": 53, "planck15": 53, "planck15_lal_cosmologi": 53, "pesummari": 53, "blob": [53, 55, 64, 69], "del_z": 53, "mdet": 53, "del_mdet": 53, "kwd": [53, 55, 56, 63, 64, 65, 66, 71, 74, 75, 76, 77, 88], "ordereddict": 53, "fifo": 53, "confvar": 53, "optionpars": [53, 56, 57, 70, 72, 73, 74], "cli": [53, 56, 57, 60, 70, 72, 77, 88], "cokela": [53, 80], "0706": 53, "4437": 53, "appendix": [53, 56, 69, 70], "lalinspir": [53, 80], "tau0tau3": [53, 98], "s1z": [53, 56, 69], "s2z": [53, 56, 69], "return_mass_heavi": 53, "quadrat": [53, 58, 63, 74], "solut": [53, 63, 67], "invert": 53, "isco": [53, 67, 80], "buonanno": 53, "kidder": 53, "lehner": 53, "0709": 53, "3839": 53, "0801": 53, "4297v2": 53, "eq": [53, 55, 56, 63, 67, 69, 70, 71], "pan": 53, "et": [53, 55, 56, 58, 80], "al": [53, 55, 56, 58, 80], "0704": 53, "1964": 53, "nb": [53, 74, 76, 77, 86], "nonspin": [53, 73, 93], "07": 53, "omega_220": 53, "berti": 53, "cardoso": 53, "Will": [53, 64, 71, 72, 73, 74, 76, 77, 80, 98], "0512160": 53, "3732": 53, "inspiralbankgener": 53, "lorentzian": 53, "frd": [53, 80, 98], "captur": 53, "tail": [53, 56, 60, 77], "decai": [53, 62, 69, 76], "innermost": [53, 67], "stabl": [53, 67], "circular": [53, 56, 67, 74, 76], "particl": 53, "schwarzschild": 53, "s_1": [53, 58], "onto": [53, 56, 74], "s_2": [53, 58], "0810": 53, "5336v3": 53, "heaviest": [53, 73], "bodi": [53, 73, 80], "beta": [53, 58, 60, 61, 64, 74, 76], "approx": [53, 75, 98], "highest": [53, 56, 69], "taylortx": 53, "taylorfx": 53, "freqfunc": 53, "feobnrv2rd": 53, "n_point": [53, 72], "pn_2order": 53, "evolut": [53, 60, 64, 76, 81], "track": [53, 63, 86], "chi1": [53, 73], "chi2": [53, 73], "qm1": 53, "qm2": 53, "hybrid": [53, 63], "meco": [53, 63, 80, 98], "h_e": 53, "veloc": 53, "phiref": 53, "thetajn": 53, "phijl": 53, "spin12_deltaphi": 53, "l0": 53, "cone": 53, "vec": [53, 57, 58], "_1": 53, "2_1": 53, "_2": 53, "2_2": 53, "betwen": 53, "s1": [53, 56], "s2": 53, "m_chirp": 53, "cubic": [53, 72], "m_total": 53, "input_len": 53, "nearest": [53, 63, 71, 73, 74, 76, 80], "solar_mass": 53, "worker": [53, 77, 80, 93], "initarg": 53, "multiprocess": [53, 64, 90], "fcn": [53, 66], "funtion": [53, 60], "func": [53, 65, 69], "item": [53, 63, 66, 71, 73, 74, 77], "chunksiz": [53, 66], "catch": [53, 86, 88], "keyboard": 53, "interuppt": 53, "cleanli": 53, "mpi": [53, 64, 92], "require_mpi": 53, "f_dist": 53, "m_dist": [53, 69], "dbin": 53, "lost": 53, "mu_in": 53, "post": [53, 64, 73, 76, 77, 87, 90, 93], "mu_low": 53, "mu": [53, 55, 58, 69, 73], "mu_high": 53, "mass_bin": 53, "bin_typ": 53, "experi": [53, 69], "mbin": 53, "bin_num": 53, "bin_num2": 53, "thresh": [53, 56, 58, 69, 90], "hpd": 53, "credibl": 53, "multimod": 53, "contigu": [53, 76], "whole": [53, 66, 77, 86], "tol": [53, 74], "integrand": 53, "dp": 53, "dmu": 53, "trapezium": 53, "eff": [53, 55], "err": [53, 63, 71, 77, 92, 93], "logbin": 53, "pofmu": 53, "context": [53, 56, 57, 83], "num_thread": [53, 90], "device_num": 53, "ctx": 53, "found_d": 53, "missed_d": 53, "found_mchirp": 53, "missed_mchirp": 53, "distribution_param": 53, "limits_param": 53, "min_param": 53, "max_param": 53, "sim_to_bins_funct": 53, "volume_error": 53, "closer": 53, "d_min": 53, "neglig": [53, 58], "d_max": 53, "todo": 53, "collin": [53, 65], "usman": 53, "OR": [53, 70], "distancesquar": 53, "dlim": 53, "vol": 53, "vol_err": 53, "rigidli": 53, "alia": [53, 61, 64, 66, 77], "old_map": 53, "new_map": 53, "datatyp": [53, 58, 63, 64, 66], "classmethod": [53, 55, 56, 60, 61, 62, 63, 64, 65, 66, 72, 73, 74, 75, 76, 77], "cp": [53, 55, 60, 61, 62, 63, 64, 71, 72, 74, 77, 86, 89, 96, 98], "skip_opt": [53, 77, 88], "additional_opt": [53, 55], "varargs_delim": [53, 55, 62, 64], "cl": [53, 55, 62, 63, 95], "deprec": 53, "caretsian": 53, "00993347": 53, "00099667": 53, "09950042": 53, "52073522": 53, "39": [53, 55, 70], "48595679": 53, "input_arg": 53, "output_arg": 53, "transform_funct": 53, "59999999999999998": 53, "outvar1": 53, "outvar2": 53, "inputvar1": 53, "inputvar2": 53, "func1": 53, "func2": 53, "19650987609144363": 53, "redshift_mass": 53, "file_column": 53, "mass_lambda_fil": 53, "eos_index": 53, "piecewis": 53, "extract": [53, 56, 61, 64, 69, 71, 72, 76, 77, 92], "filepath": 53, "srcmass": [53, 92], "shut": [53, 63], "worri": [53, 66, 73, 80, 96], "m_src": 53, "tov": 53, "codomain": 53, "logitq": [53, 63], "4375183": 53, "21875915": 53, "97717521": 53, "mass1_param": [53, 92], "mass2_param": [53, 92], "mchirp_param": 53, "q_param": 53, "catesian": 53, "spsin": 53, "opposit": [53, 73], "fo": [53, 90, 98], "requested_param": 53, "valid_param": 53, "inferencefil": [53, 61, 64], "all_c": 53, "rorderd": 53, "carri": [53, 60, 64, 66, 73, 88], "worflowconfigpars": [53, 55, 72], "retriev": [53, 55, 56, 60, 61, 63, 64, 66, 72, 76, 77, 93, 96], "datefmt": 53, "formatt": 53, "iso": 53, "6801": 53, "millisecond": 53, "en": [53, 57, 83], "wikipedia": [53, 57, 83], "wiki": [53, 57, 83], "iso_8601": 53, "2022": 53, "18t09": 53, "53": 53, "554": 53, "00": [53, 63, 93], "timestamp": [53, 56, 74], "tz": 53, "creation": [53, 56, 63], "logrecord": 53, "strftime": 53, "iso8601": 53, "rfc": 53, "3339": 53, "localtim": 53, "signatur": 53, "gmtime": 53, "gmt": 53, "asctim": 53, "send": [53, 58, 65, 72, 77, 86, 88], "sigusr1": 53, "boolean": [53, 55, 56, 57, 58, 59, 60, 63, 66, 69, 70, 72, 73, 74, 75, 76, 77, 90, 98], "noth": [53, 55, 70, 72, 73, 80, 86, 90, 93, 97, 98], "stringlength": 53, "announc": 54, "90": [54, 77, 80, 93], "nump": 54, "informaton": 54, "yet": [54, 56, 61, 63, 64, 66, 92, 97], "cosin": 55, "sin": [55, 63, 66, 76], "costheta_0": 55, "costheta_1": 55, "theta_0": 55, "theta_1": 55, "cyclic_domain": 55, "2pi": [55, 62, 63, 83], "azimuthal_cyclic_domain": 55, "angluar": 55, "init": [55, 63, 66, 93], "south": 55, "northern": 55, "hemispher": 55, "initili": 55, "val1": 55, "val2": 55, "configpars": [55, 61, 63, 64, 71, 74, 76, 77, 86, 88, 89, 90, 96, 97, 98], "bandwidth": [55, 58, 74], "scott": [55, 60], "gaussian_kd": [55, 71], "set_bw": 55, "datagroup": 55, "retriv": [55, 58, 66], "ra_prior": 55, "param_nam": 55, "unrecogn": [55, 76], "bounds_requir": 55, "btype": 55, "obei": [55, 80, 88, 96], "collaps": [55, 58, 76], "lie": [55, 56, 73, 77], "convex": 55, "hull": 55, "princip": [55, 73, 76, 80, 98], "supernovae_convex_hul": 55, "coeff_0": 55, "coeff_1": 55, "file_path": 55, "column_index": 55, "quad": [55, 67], "accuraci": [55, 58, 73], "param1": [55, 71, 77], "custom_mod": 55, "custom_function_nam": 55, "custom_function_name2": 55, "_logpdf": 55, "_cdfinv": 55, "invcdf": 55, "instant": 55, "semi": [55, 70], "abitrari": 55, "desir": [55, 57, 58, 64, 66, 68, 69, 70, 73, 74, 76, 77, 80, 85, 90, 92, 93, 98], "cumul": [55, 56, 58, 74, 75, 77, 87, 93, 96], "erf": 55, "infti": [55, 63], "__call__": 55, "_mean": 55, "_var": 55, "foo_mean": 55, "foo_var": 55, "mass1_mean": 55, "mass1_var": 55, "phi_mean": 55, "phi_var": 55, "callabl": [55, 63, 69], "rest": [55, 65, 76, 80, 91, 92, 93], "n_test_sampl": 55, "mtotal_lt_30": 55, "mass_lim": 55, "uniform_prior": [55, 63], "prior_ev": 55, "reject": [55, 64, 65, 80, 90], "dm_1dm_2": 55, "mathcal": [55, 63], "_c": 55, "_cdq": 55, "partial": [55, 63, 67], "l416": 55, "const": [55, 74], "mathemat": 55, "law": [55, 56, 69], "dr": 55, "r_": 55, "probabilti": 55, "solv": [55, 66, 88, 93], "multipli": [55, 56, 57, 58, 63, 64, 70, 72, 73, 74, 76], "offset": [55, 56, 63, 71, 76, 84, 90, 93], "notat": [55, 66, 71], "distriubt": 55, "rdfreq": 55, "damping_tim": [55, 76], "norm_toler": 55, "norm_se": 55, "renorm": 55, "randomli": [55, 61, 80, 93, 97], "996": 55, "tighter": 55, "010": 55, "von_mis": 55, "fisher": 55, "concentr": 55, "rotation": 55, "invari": 55, "rayleigh": [55, 56], "fabrycki": 55, "winn": 55, "2009": [55, 80], "apj": 55, "696": 55, "1230": 55, "2\u03c0": 55, "mean_ra": 55, "mean_dec": 55, "spread": [55, 60], "interpret": [55, 57, 74, 77], "brigg": 55, "1999": 55, "122": 55, "503": 55, "angle_unit": 55, "xi_bound": 55, "chi_": 55, "latter": [55, 60, 61, 80, 91, 92], "xi_1": 55, "xi_2": 55, "3777589082278725": 55, "36": [55, 67, 70], "90885758394699": 55, "51": 55, "294212757995254": 55, "109058546060346": 55, "36220145743631": 55, "34": [55, 83], "49594465315212": 55, "47": 55, "531953033719454": 55, "f8": [55, 66], "025": 55, "150914": 55, "prior_sect": [55, 63], "constraint_sect": [55, 63], "vargs_sect": 55, "sargs_sect": 55, "snr_trigger": 56, "projection_matrix": 56, "coinc_snr": 56, "26": [56, 63, 76], "harri": [56, 80], "fairhurst": 56, "2011": [56, 69], "1012": 56, "4939": 56, "normalis": 56, "matrix": [56, 63, 73], "rho_coh": 56, "surviv": [56, 72], "snrv": [56, 58, 75], "deector": 56, "snr_dict": 56, "time_delay_idx": 56, "rho_coinc": 56, "coinc_trigg": 56, "idx_dict": 56, "time_delai": 56, "coinc_idx": 56, "idx": [56, 58, 66, 70, 73], "t_delay_idx": 56, "f_cross": 56, "1712": 56, "04724": 56, "williamson": 56, "2014": [56, 69, 80, 85], "1410": 56, "6042": 56, "unrestrict": 56, "dorrington": 56, "2019": [56, 77], "orca": 56, "cardiff": 56, "ac": 56, "uk": 56, "eprint": 56, "128124": 56, "degre": [56, 71, 75, 77, 90], "freedom": [56, 75, 90], "net_chisq": 56, "apply_cut": 56, "null_min": 56, "null_grad": 56, "null_step": 56, "null": [56, 66, 71], "elsewher": [56, 95], "downweight": 56, "retain": [56, 90], "gradient": 56, "suviv": 56, "network_snr": 56, "rw_snr": 56, "rw_snr_threshold": 56, "reweight": [56, 69], "rw_snr_threshhold": 56, "expir": [56, 93], "initial_s": 56, "1048576": [56, 90, 98], "unord": 56, "timer": [56, 72], "num_templ": 56, "analysis_block": 56, "background_statist": 56, "sngl_rank": 56, "stat_fil": [56, 77], "ifar_limit": 56, "timeslide_interv": 56, "035": 56, "coinc_threshold": [56, 58], "002": 56, "return_background": 56, "background": [56, 69, 77, 85, 93, 96], "coinc_result": [56, 66], "updated_singl": 56, "num_coinc": 56, "analysis_chunk": 56, "coinc_stat": 56, "alarm": [56, 69], "inter": 56, "ifar_satur": 56, "tie": 56, "breaker": 56, "trial": [56, 71, 77], "restor": [56, 74], "num_r": 56, "max_tim": 56, "min_buffer_s": 56, "buffer_incr": 56, "resize_invalid_fract": 56, "buffer_index": 56, "valid_start": 56, "background_bin": [56, 77], "time1": [56, 66], "time2": [56, 66], "timeslide_id": [56, 66], "slide": [56, 69, 77, 87, 90, 93, 97], "timeslid": [56, 71, 87, 88, 93], "cindex": 56, "time_coinc": 56, "particip": 56, "cython": 56, "pure": 56, "num_above_zero": 56, "slide_step": 56, "idx1": 56, "idx2": 56, "slop": 56, "003": [56, 76], "pivot": [56, 77], "tof": 56, "stage": [56, 57, 77, 80, 85, 88, 90, 93, 95, 96, 97, 98], "subsequ": [56, 74, 76, 77, 83, 86, 93], "start1": 56, "start2": 56, "end1": 56, "end2": 56, "timeslide_offset": 56, "slid": [56, 71, 85], "timseslide_offset": 56, "log_rat": 56, "flight": [56, 87], "underflow": 56, "extent": [56, 58, 77], "allowed_area": 56, "n_ifo": 56, "expected_log_r": 56, "occupi": 56, "template_cut_dict": 56, "preselect": 56, "findtrig": 56, "anyth": [56, 57, 65, 71, 80, 91, 92, 93], "cut_funct": 56, "cut_threshold": 56, "down": [56, 71, 74, 76, 80, 90, 93, 95], "fits_by_tid": 56, "tids_out": 56, "parameter_cut_funct": 56, "cut_thresh": 56, "trigger_cut_dict": 56, "idx_out": 56, "cut_dict": 56, "new_cut": 56, "strictest": 56, "inputstr": 56, "median_sigma": 56, "column_typ": 56, "tcolumn": 56, "window_s": 56, "gwstrain": [56, 70], "num_keep": 56, "statnam": [56, 60, 63], "log_chirp_width": 56, "outnam": [56, 66], "ncore": 56, "nfilter": 56, "ntemplat": 56, "run_tim": 56, "setup_tim": 56, "tnum_finish": 56, "network_column": 56, "network_column_typ": 56, "eventmanagermultidetbas": 56, "perform_coincid": 56, "coinc_window": [56, 58], "window_length": 56, "absolut": [56, 72, 73, 74, 93], "absvalu": 56, "tlen": [56, 58, 83], "leftlen": 56, "reduced_x2": 56, "fac": 56, "s5y1": 56, "weigth": 56, "sg_chisq": [56, 58, 75], "1208": 56, "3491": 56, "glue": [56, 77, 86, 96], "lsctabl": [56, 66], "brchisq": 56, "min_expected_psdvar": 56, "65": [56, 76, 83], "bchisq": [56, 75], "brchisq_threshold": 56, "psd_var_val_threshold": 56, "bstat": 56, "fstat": 56, "skip_background": 56, "foreground": [56, 66, 69, 87], "louder": 56, "decim": [56, 58, 71, 77, 87, 93], "cum_back_num": 56, "fore_n_loud": 56, "combo_kei": 56, "argpars": [56, 60, 61, 63, 69, 71, 73, 74, 77, 88], "argumentpars": [56, 60, 61, 63, 69, 71, 72, 73, 74, 76, 77, 88], "parse_arg": [56, 60, 61, 63], "significance_dict": 56, "back_stat": 56, "fore_stat": 56, "dec_fac": 56, "n_louder": 56, "fit_funct": 56, "exponenti": [56, 69], "fit_threshold": 56, "count": [56, 61, 69, 73], "back_cnum": 56, "fn_louder": 56, "assign": [56, 60, 63, 66, 73, 76, 80, 92, 98], "far": [56, 64, 69, 76, 77, 80, 93], "reduced_chisq_threshold": 56, "duration_threshold": 56, "fit_fil": 56, "sngl_ifar_est_dist": 56, "fixed_ifar": 56, "data_read": [56, 58], "rerank": 56, "bin_dict": 56, "dq_dict": 56, "dq_valu": 56, "rescal": [56, 57, 63, 77, 80, 98], "lognoisel": 56, "benchmark_logr": 56, "falloff": [56, 69], "limifo": 56, "quiet": 56, "to_shift": 56, "sngls_list": 56, "unus": [56, 59, 73], "rework": 56, "neg": [56, 61, 70, 71, 74, 76], "single_info": 56, "slope": [56, 63], "kname": 56, "triger": 56, "lookup": 56, "ratio_kd": 56, "max_chirp_mass": [56, 73, 80, 98], "roughli": 56, "loud": [56, 58, 72], "swamp": 56, "benchmark_logvol": 56, "reference_ifo": 56, "phasetd": 56, "expfitbg": 56, "alphabelow": 56, "rate_dict": 56, "s0": 56, "bunch": [56, 80], "template_num": 56, "alphai": 56, "ratei": 56, "largest": [56, 61, 63, 73, 75, 77], "alphamax": 56, "pregenerate_hist": 56, "2017": [56, 69], "3847": 56, "1538": 56, "4357": 56, "aa8f50": 56, "endtim": [56, 77, 86], "quadratur": [56, 63], "runtimeerror": 56, "statistic_opt_group": 56, "default_ranking_statist": 56, "default_ranking_statis": 56, "strain_opt_group": 56, "argument_group": 56, "stat_kwarg_list": 56, "kwarg1": 56, "value1": [56, 77, 88], "kwarg2": 56, "value2": [56, 77, 88], "kwarg3": 56, "value3": 56, "stat_kwarg_dict": 56, "_basethresholdclust": 56, "instanti": [56, 57, 66], "uint32": 56, "event_v": 56, "event_loc": 56, "kolmogorov": 56, "smirnov": 56, "sigma_alpha": 56, "fit_exponenti": 56, "xval": 56, "xrang": 56, "exponential_fit": 56, "expfit": 56, "exponential_fit_1": 56, "kstest": 56, "ks_stat": 56, "ks_pval": 56, "hypothesi": 56, "perfect": 56, "revers": [56, 57, 75, 84, 90], "exp": [56, 63, 69, 84], "x_t": 56, "par": 56, "minpar": 56, "maxpar": 56, "nbin": [56, 63], "binind": 56, "bins_idx": 56, "injfil": 56, "bankfil": 56, "trigfil": 56, "translat": [56, 71, 73, 80, 98], "popular": 56, "hdf5": [56, 66, 69, 73, 74, 76, 77, 85], "anitz": 56, "documentm": [56, 75], "tid": 56, "parval": 56, "xml_file": [56, 71, 77], "include_vers": 56, "comment": [56, 60, 61, 66, 80, 87, 88, 92], "segment_fil": [56, 77, 96], "veto_fil": [56, 66, 71, 77, 89], "backend_list": 57, "front": [57, 79, 80, 82, 93], "invec": 57, "outvec": 57, "nbatch": 57, "divis": 57, "pycbc_align": 57, "cufft": 57, "callback": [57, 90], "out_callback": 57, "pycbc_cufft": 57, "_basefft": 57, "objet": 57, "intent": 57, "invoc": [57, 93, 95], "unlik": [57, 63, 74, 76, 80], "NOT": [57, 77, 89, 90, 98], "_baseifft": 57, "prec": 57, "ityp": 57, "otyp": 57, "mlvl": 57, "decid": [57, 77, 80, 88, 90, 93, 96, 98], "shortest": 57, "optgroup": 57, "fft_option": 57, "idtyp": 57, "odtyp": 57, "inplac": [57, 63, 74], "expend": 57, "action": [57, 60, 61, 71, 74, 77, 88], "prune": 57, "decomposit": 57, "coolei": 57, "93tukey_fft_algorithm": 57, "minor": [57, 79], "twiddl": 57, "transpos": 57, "n2": 57, "fftwf": 57, "pruned_fft": [57, 58, 90], "pretranspos": 57, "easier": [57, 85, 88, 93, 96], "explicit": [57, 63, 77, 80], "ni": [57, 60], "asid": 57, "fft_group": 57, "unbias": 58, "side": [58, 70, 71, 72, 74, 75, 76, 90], "autocovari": 58, "hat": [58, 66], "sum_": [58, 63, 76], "x_": [58, 76], "tuneabl": 58, "madra": 58, "sokal": 58, "109": 58, "1988": 58, "ceil": [58, 61, 76], "snr_threshold": [58, 71, 75, 90], "chisq_bin": [58, 75, 90], "maxel": 58, "134217728": 58, "snr_abort_threshold": 58, "max_triggers_in_batch": 58, "batch": 58, "progress": [58, 90, 93, 95], "reader": [58, 72], "high_frequency_cutoff": [58, 60, 63, 72, 74, 75, 76], "segment_list": 58, "template_output": 58, "use_clust": 58, "downsample_factor": [58, 90], "upsample_threshold": [58, 90], "upsample_method": 58, "gpu_callback_method": [58, 90], "cluster_funct": 58, "segnum": 58, "template_norm": 58, "hplu": [58, 76], "hcross": [58, 76], "hplus_norm": 58, "hcross_norm": 58, "h_quantiti": 58, "me": [58, 80], "IN": [58, 89, 90, 98], "trig_tim": [58, 77], "095": 58, "check_stat": 58, "anywai": [58, 95], "contamin": 58, "ligotimegp": [58, 59, 74, 76, 77], "bad": [58, 63, 82, 96], "hphccorr": 58, "hpnorm": [58, 75], "hcnorm": [58, 75], "analyse_slic": 58, "maximis": 58, "1603": 58, "02444": 58, "encourag": 58, "implicit": [58, 93], "hx": 58, "imaginari": [58, 72, 74, 76], "quick": [58, 66, 80], "overestim": [58, 76], "hpsigmasq": 58, "hcsigmasq": 58, "det_stat": 58, "1709": [58, 75], "09181": 58, "contrast": 58, "encod": 58, "coinc_tim": [58, 69], "lookback": [58, 69], "dal": 58, "canton": 58, "2021": 58, "2008": [58, 80], "07494": 58, "fhigh": [58, 80], "df": [58, 76, 80, 98], "kmin": [58, 60, 63, 75, 76], "kmax": [58, 60, 63, 75], "vec1": 58, "vec2": 58, "v1_norm": 58, "v2_norm": 58, "subsample_interpol": 58, "return_phas": 58, "fourth": 58, "spectral": [58, 70, 74, 75, 78, 92], "discontinu": [58, 76], "move": [58, 71, 86, 93, 94, 95], "dc": 58, "nyquist": [58, 63, 72, 74], "h_norm": 58, "corr_out": 58, "alloc": [58, 76, 93], "caller": 58, "minimize_scalar": 58, "duncan": [58, 71, 80], "brown": [58, 71, 80], "thesi": 58, "unnorm": [58, 75], "_basecorrel": 58, "neighbour": [58, 70], "tile": [58, 74, 75, 77, 90, 98], "percentag": [58, 71], "qplane_tile_dict": 58, "fseri": [58, 70, 76], "return_complex": [58, 63, 74], "tuppl": 58, "saml": 58, "constructor": [58, 64, 71, 77, 89], "fir": [58, 74, 81], "filtered_seri": [58, 74], "filter_ord": 58, "attenu": [58, 74, 90, 98], "typeerror": [58, 65, 66, 74], "time_seri": 58, "kaiser": [58, 65, 74, 76], "lobe": [58, 74], "zeros_offset": 58, "f1": [58, 74], "f2": [58, 74, 93], "notch": [58, 74], "achiev": [58, 66, 70], "butterworth": 58, "resmpl": 58, "h_plus_sampl": 58, "h_plu": [58, 76], "qt": 58, "s_3": 58, "s_n": [58, 63], "s_4": 58, "s_m": 58, "omega": 58, "bilinearli": 58, "100hz": 58, "1hz": 58, "filtered_data": 58, "zpk_filter": 58, "url_typ": 59, "span": [59, 68, 77, 86, 90], "represent": [59, 65, 72, 73, 76, 77, 86], "h1_er_c00_l1": 59, "gsiftp": [59, 86, 88, 93], "h1_ldas_c02_l2": [59, 88], "968995968": 59, "check_integr": [59, 60, 61], "locatin": 59, "checksum": [59, 77], "incompat": [59, 74], "unusu": 59, "circumst": 59, "gw170608": 59, "cmd": [60, 61, 71, 77], "config_group": [60, 61], "copy_info": [60, 61], "copy_metadata": [60, 61], "copy_sampl": [60, 61], "data_group": [60, 61], "effective_nsampl": [60, 61, 64], "extra_args_pars": [60, 61], "get_slic": [60, 61], "getattr": [60, 61], "injections_group": [60, 61], "log_evid": [60, 61], "read_config_fil": [60, 61], "read_data": [60, 61], "read_psd": [60, 61], "read_random_st": [60, 61], "sampler_group": [60, 61], "samples_from_cli": [60, 61], "samples_group": [60, 61], "write_command_lin": [60, 61], "write_config_fil": [60, 61], "write_data": [60, 61], "write_effective_nsampl": [60, 61], "write_inject": [60, 61], "write_kwargs_to_attr": [60, 61], "write_logevid": [60, 61], "write_psd": [60, 61, 77], "write_random_st": [60, 61], "write_stild": [60, 61], "write_strain": [60, 61], "format_attr": [60, 61], "is_burned_in": [60, 61], "last_iter": [60, 61], "raw_acl": [60, 61, 64], "raw_act": [60, 61, 64], "write_niter": [60, 61], "ensemble_read_raw_sampl": [60, 61], "nsamples_in_chain": [60, 61], "thin_samples_for_writ": [60, 61], "parsetempsarg": [60, 61], "run_end_tim": [60, 61], "run_start_tim": [60, 61], "update_checkpoint_histori": [60, 61], "write_run_end_tim": [60, 61], "write_run_start_tim": [60, 61], "read_pickled_data_from_checkpoint_fil": [60, 61], "write_pickled_data_into_checkpoint_fil": [60, 61], "write_raw_sampl": [60, 61], "read_acceptance_fract": [60, 61], "write_acceptance_fract": [60, 61], "read_acceptance_r": [60, 61], "read_acceptance_ratio": [60, 61], "swap_interv": [60, 61, 64], "write_acceptance_ratio": [60, 61], "write_temperature_data": [60, 61], "read_raw_samples_from_fil": [60, 61], "write_samples_to_fil": [60, 61], "read_beta": [60, 61], "read_ensemble_attr": [60, 61], "starting_beta": [60, 61, 64], "write_beta": [60, 61], "write_ensemble_attr": [60, 61], "delimit": [60, 61, 72, 74], "noinputfileerror": [60, 61], "printfileparam": [60, 61], "resultsargumentpars": [60, 61], "add_results_option_group": [60, 61], "parse_known_arg": [60, 61], "get_common_paramet": [60, 61], "get_file_typ": [60, 61], "injections_from_cli": [60, 61], "results_from_cli": [60, 61], "validate_checkpoint_fil": [60, 61], "epsieatadaptiveangular": [60, 62], "epsieadaptiveangular": [60, 62], "epsieangular": [60, 62], "epsieatadaptiveboundednorm": [60, 62], "epsieadaptiveboundednorm": [60, 62], "epsieboundednorm": [60, 62], "epsieadaptiveboundeddiscret": [60, 62], "epsieadaptivenormaldiscret": [60, 62], "epsieboundeddiscret": [60, 62], "epsienormaldiscret": [60, 62], "epsieatadaptivenorm": [60, 62], "epsieadaptivenorm": [60, 62], "epsienorm": [60, 62], "epsie_adaptive_from_config": [60, 62], "epsie_at_adaptive_from_config": [60, 62], "epsie_from_config": [60, 62], "get_epsie_adaptation_set": [60, 62], "get_epsie_discrete_successive_set": [60, 62], "get_param_boundari": [60, 62], "get_vari": [60, 62], "load_opt": [60, 62], "epsie_proposals_from_config": [60, 62, 64], "current_stat": [60, 63], "default_stat": [60, 63, 64], "extra_args_from_config": [60, 63], "get_current_stat": [60, 63], "logjacobian": [60, 63, 64], "logposterior": [60, 63], "logprior": [60, 63, 64], "prior_rv": [60, 63], "write_metadata": [60, 63, 64], "modelstat": [60, 63], "getstat": [60, 63], "getstatsdict": [60, 63], "samplingtransform": [60, 63], "check_for_cartesian_spin": [60, 63], "read_sampling_params_from_config": [60, 63], "basedatamodel": [60, 63], "lognl": [60, 63, 92], "likelihood_wrapp": [60, 63], "novaliddataerror": [60, 63], "check_for_nan": [60, 63], "check_validtim": [60, 63], "create_data_pars": [60, 63], "data_from_cli": [60, 63], "data_opts_from_config": [60, 63], "detectors_with_valid_data": [60, 63], "fd_data_from_strain_dict": [60, 63], "gate_overwhitened_data": [60, 63], "strain_from_cli_multi_ifo": [60, 63], "basegatedgaussian": [60, 63], "det_lognl": [60, 63], "det_lognorm": [60, 63], "get_gate_tim": [60, 63], "get_gate_times_hmeco": [60, 63], "get_gated_data": [60, 63], "get_gated_waveform": [60, 63], "get_residu": [60, 63], "get_waveform": [60, 63], "td_data": [60, 63], "get_gated_residu": [60, 63], "basegaussiannois": [60, 63], "ignore_failed_waveform": [60, 63], "psd_segment": [60, 63], "set_psd_seg": [60, 63], "whitened_data": [60, 63, 74], "det_cplx_loglr": [60, 63], "det_optimal_snrsq": [60, 63], "multi_loglikelihood": [60, 63], "multi_signal_support": [60, 63], "create_waveform_gener": [60, 63], "get_values_from_inject": [60, 63], "hstatic_param": [60, 63], "hvariable_param": [60, 63], "hierarchicalparam": [60, 63], "fullnam": [60, 63], "delim": [60, 63], "from_subnam": [60, 63], "model_delim": [60, 63], "hpiter": [60, 63], "map_param": [60, 63], "phase_fac": [60, 63], "calculate_hihj": [60, 63], "combine_layout": [60, 63], "init_from_frequ": [60, 63], "likelihood_funct": [60, 63], "max_curvature_from_refer": [60, 63], "setup_antenna": [60, 63], "summary_product": [60, 63], "ref_snr": [60, 63], "setup_bin": [60, 63], "likelihood_part": [60, 63], "likelihood_parts_det": [60, 63], "likelihood_parts_multi": [60, 63], "likelihood_parts_multi_v": [60, 63], "likelihood_parts_v": [60, 63], "likelihood_parts_v_pol": [60, 63], "likelihood_parts_v_pol_tim": [60, 63], "likelihood_parts_v_tim": [60, 63], "likelihood_parts_vector": [60, 63], "likelihood_parts_vectorp": [60, 63], "likelihood_parts_vectort": [60, 63], "snr_predictor": [60, 63], "snr_predictor_dom": [60, 63], "distmarg": [60, 63], "distance_interpol": [60, 63], "distance_margin": [60, 63], "draw_ifo": [60, 63], "draw_sky_tim": [60, 63], "draw_tim": [60, 63], "get_precalc_antenna_factor": [60, 63], "marginalize_loglr": [60, 63], "premarg_draw": [60, 63], "reset_vector_param": [60, 63], "setup_margin": [60, 63], "setup_peak_lock": [60, 63], "snr_draw": [60, 63], "draw_sampl": [60, 63], "marginalize_likelihood": [60, 63], "setup_distance_marg_interpol": [60, 63], "str_to_bool": [60, 63], "str_to_tupl": [60, 63], "callmodel": [60, 63, 64], "available_model": [60, 63], "get_model": [60, 63], "read_from_config": [60, 63], "register_model": [60, 63], "resume_from_checkpoint": [60, 64], "create_new_output_fil": [60, 64], "initial_dist_from_config": [60, 64], "setup_output": [60, 64], "cubemodel": [60, 64], "log_likelihood": [60, 64], "prior_transform": [60, 64], "call_global_loglikelihood": [60, 64], "call_global_logprior": [60, 64], "setup_cal": [60, 64], "base_shap": [60, 64], "checkpoint_from_config": [60, 64], "checkpoint_sign": [60, 64], "ckpt_signal_from_config": [60, 64], "clear_sampl": [60, 64], "get_thin_interv": [60, 64], "max_samples_per_chain": [60, 64], "p0": [60, 64], "po": [60, 64], "set_burn_in": [60, 64], "set_burn_in_from_config": [60, 64], "set_p0": [60, 64], "set_start_from_config": [60, 64], "set_state_from_fil": [60, 64], "set_target_from_config": [60, 64], "set_thin_interval_from_config": [60, 64], "target_eff_nsampl": [60, 64], "target_niter": [60, 64], "thin_safety_factor": [60, 64], "write_result": [60, 64], "blob_data_to_dict": [60, 64], "ensemble_compute_acf": [60, 64], "ensemble_compute_acl": [60, 64], "get_optional_arg_from_config": [60, 64], "raw_samples_to_dict": [60, 64], "betas_from_config": [60, 64], "acl_from_raw_acl": [60, 64], "read_betas_from_hdf": [60, 64], "call_reconstruct": [60, 64], "logz": [60, 64], "logz_err": [60, 64], "estimate_nmcmc": [60, 64], "sample_rwalk_mod": [60, 64], "burn_in_class": [60, 64], "calculate_logevid": [60, 64], "check_if_finish": [60, 64], "get_posterior_sampl": [60, 64], "importance_dlogz": [60, 64], "importance_logz": [60, 64], "transform_prior": [60, 64], "adaptation_lag": [60, 64], "adaptation_tim": [60, 64], "ensembl": [60, 61, 64], "scale_factor": [60, 64], "load_from_config": [60, 64], "burn_in_test": 60, "test_is_burned_in": 60, "test_burn_in_it": 60, "did": [60, 61], "not_burned_in_it": 60, "samples1": 60, "samples2": 60, "thershold": 60, "lnps_per_walk": 60, "burn_in_idx": 60, "gone": 60, "past": [60, 96], "halfwai": [60, 71], "logpost": 60, "kullback": 60, "leibler": 60, "diverg": 60, "hist_min": 60, "hist_max": 60, "hist_bin": 60, "fd": [60, 76, 81, 84], "doan": 60, "rice": 60, "sturg": 60, "freedman": 60, "diaconi": 60, "hist_rang": 60, "kernel": [60, 93], "pdf1": 60, "718281828459045": 60, "nat": 60, "jensen": 60, "shannon": 60, "pdf2": 60, "arithmet": 60, "am": 60, "billion": 60, "hme": 60, "formal": [60, 67], "infinit": [60, 70, 76], "prone": 60, "mcmc_std": 60, "simpson": 60, "thermodynam": [60, 64], "trapezoid": 60, "trapzoid": 60, "trapezoid_correct": 60, "gelman": 60, "rubin": 60, "diagnost": [60, 77, 92, 93, 94], "auto_burn_in": 60, "univari": [60, 63], "reduct": [60, 93], "psrf": 60, "potenti": [60, 73, 80], "conerverg": 60, "calucl": 60, "ncalcul": 60, "seg_length": 60, "end_idx": 60, "ref_start": 60, "ref_end": 60, "seg_start": 60, "narg": [60, 61, 74], "dest": [60, 61, 74], "_label": 60, "opton": 60, "add_argu": 60, "shlex": 60, "parameters_label": 60, "odot": 60, "z_arg": 60, "z_arg_label": 60, "latex": [60, 71], "colour": [60, 68], "plot_posterior": [60, 77, 91, 92], "parameter_nam": 61, "read_arg": 61, "write_arg": 61, "former": [61, 80, 91, 92], "skip_arg": [61, 63], "create_miss": 61, "array_class": 61, "return_cp": 61, "restart": [61, 91, 92], "stringio": 61, "set_stat": 61, "defaut": 61, "overriden": [61, 76, 77, 80, 88, 90], "config_pars": 61, "atom": 61, "subgroup": 61, "recurs": 61, "overwritten": [61, 66, 72, 76, 86, 88], "injection_fil": [61, 63, 65, 77, 80, 90, 98], "lnz": [61, 64], "dlnz": [61, 64], "dlog_evid": 61, "random_st": 61, "get_stat": 61, "stilde_dict": [61, 63, 72], "strain_dict": [61, 63, 70, 72], "unicod": 61, "decod": 61, "obj": [61, 71, 76], "bytes_": 61, "baseinfer": 61, "thin_": 61, "start_it": 61, "thin_bi": 61, "sampel": 61, "unthin": 61, "vararg": 61, "commonmcmcmetadatio": 61, "fewer": [61, 63], "base_nest_fil": 61, "multitemperedmcmcio": 61, "unix": [61, 93], "began": 61, "histori": [61, 64, 77, 96], "checkpoint_histori": 61, "_update_sampler_histori": 61, "curent": 61, "attrbut": 61, "raw_sampl": [61, 64], "unweight": 61, "shuffl": 61, "pickel": 61, "acceptance_fract": 61, "swap": [61, 64], "attemp": 61, "acceptance_ratio": 61, "swap_index": 61, "importance_lnz": 61, "importance_dlnz": 61, "immedi": [61, 73, 76, 77, 80, 93, 95], "behvior": 61, "defaultparam": 61, "autoparamlabel": 61, "preload": 61, "seen": [61, 65, 69, 77, 85, 89], "nor": [61, 66, 74, 91, 93], "releat": 61, "ioerror": 61, "file_typ": 61, "injection_samples_map": [61, 77], "remap": 61, "load_sampl": 61, "fp_all": 61, "samples_al": 61, "checkpoint_fil": 61, "backup_fil": 61, "check_nsampl": [61, 64], "invalid": [61, 65, 70, 72, 90, 93], "checkpoint_valid": 61, "adaptation_dur": 62, "componentwis": 62, "start_step": 62, "target_r": 62, "jump_interv": 62, "atadaptiveangular": 62, "adaptiveboundednorm": 62, "with_boundari": 62, "adaptive_angular_propos": 62, "adaptiveangularpropos": 62, "adaptiveangular": 62, "adaptive_angular": 62, "cov": [62, 63], "jump_interval_dur": 62, "atadaptiveboundednorm": 62, "adaptiveboundedpropos": 62, "adaptive_bounded_propos": 62, "adaptive_bounded_norm": 62, "boundednorm": 62, "mchrip": 62, "adaptiveboundeddiscret": 62, "adaptive_bounded_discret": 62, "prior_width": 62, "adaptivenormaldiscret": 62, "adaptive_normal_discret": 62, "boundeddiscret": 62, "bounded_discret": 62, "19": [62, 70, 90, 93], "normaldiscret": 62, "atadaptivenorm": 62, "atadaptivepropos": 62, "adaptivepropos": 62, "adaptive_propos": 62, "adaptivenorm": 62, "adaptive_norm": 62, "boundary_arg_nam": 62, "adaptivesupport": 62, "adaptation_decai": 62, "start_iter": 62, "basepropos": 62, "AT": 62, "train": 62, "global": [62, 64, 71, 80], "pop": [62, 69], "var_": 62, "160": 62, "eggbox": 63, "prod_": 63, "theta_": 63, "multivariate_norm": 63, "covari": [63, 73], "8628770664093453": 63, "rosenbrock": 63, "volcano": 63, "bay": 63, "theorem": [63, 70], "posteror": 63, "_loglikelihood": 63, "_noprior": 63, "replace_paramet": 63, "understood": [63, 65, 66, 76, 90, 91], "parameter": 63, "sole": 63, "hasn": [63, 64], "cast": [63, 64, 66, 76], "ride": 63, "postion": 63, "impli": [63, 93], "assertionerror": [63, 77], "mathbf": 63, "p_x": 63, "p_y": 63, "ij": 63, "g_i": 63, "y_j": 63, "spinn": 63, "section_group": 63, "logitspin1_a": 63, "replaced_param": 63, "mofdel": 63, "no_save_data": 63, "propeti": [63, 66], "_loglr": 63, "_lognl": 63, "loop_polar": 63, "base_model": [63, 70], "data_sect": 63, "onlin": 63, "contin": 63, "unwrap": [63, 76], "fold": [63, 77], "symmetri": 63, "gps_start": 63, "gps_end": 63, "shift_to_valid": 63, "max_shift": 63, "nearbi": [63, 73, 80], "use_start": 63, "use_end": 63, "check_for_valid_tim": 63, "shift_psd_times_to_valid": 63, "err_on_missing_detector": 63, "psd_strain_dict": 63, "psd_": 63, "_time": 63, "dctionari": 63, "filter_flow": 63, "wre": 63, "wasn": 63, "pad_data": [63, 80, 90, 98], "psd_estim": [63, 70], "psd_from_cli_multi_ifo": 63, "psd_dict": 63, "concurr": 63, "sleep": 63, "inpaint": 63, "highpass_waveform": 63, "d_i": 63, "n_i": 63, "alpha_i": 63, "gatefunc": 63, "hmeco": 63, "t_gate_start": 63, "t_gate_end": 63, "rtype": 63, "residu": 63, "haven": 63, "analyzed_detector": [63, 92], "_analysis_seg": 63, "_psd_segment": 63, "polarization_sampl": 63, "gatedgaussian": 63, "excis": [63, 74], "2105": 63, "05238": 63, "unwhiten": 63, "prependend": 63, "a__b__lognl": 63, "sum_i": 63, "h_i": 63, "a_i": 63, "b_i": 63, "k_": 63, "tild": 63, "_i": 63, "_n": 63, "lfloor": 63, "rfloor": 63, "manual": [63, 70, 77, 91, 94], "cancel": 63, "pypsd": 63, "seglen": 63, "fmin": [63, 73, 76], "38": [63, 76], "29": [63, 76, 77], "76": [63, 76], "tsig": 63, "2f": 63, "282": 63, "h1_cplx_loglr": 63, "177": 63, "00j": 63, "h1_optimal_snrsq": 63, "355": 63, "52": 63, "l1_cplx_loglr": 63, "104": 63, "67": [63, 83], "l1_optimal_snrsq": 63, "209": 63, "77": 63, "toggl": [63, 76], "835397": 63, "8757405131": 63, "101": 63, "ii": [63, 76], "enumer": 63, "283": 63, "92": 63, "opitm": 63, "opimt": 63, "generator_class": 63, "fdomain": 63, "update_cp": 63, "encas": 63, "quot": [63, 71], "hiearchic": 63, "h_": [63, 76, 77], "model1": 63, "model2": 63, "underscor": 63, "event1_event2__foo": 63, "__data": 63, "prece": 63, "hierachicalparam": 63, "subdata": 63, "possible_model": 63, "event1__mass": 63, "event1_event2__mass": 63, "e1_e2__foo": 63, "model_label": 63, "subp": 63, "constitu": 63, "crossterm": 63, "h_j": 63, "aris": [63, 72, 78], "coa_phase_sampl": 63, "n_d": 63, "0_i": 63, "equiv": 63, "int_0": 63, "gather": [63, 80, 89, 90, 92, 95, 97, 98], "int_": 63, "i_0": 63, "bessel": 63, "apparoxim": 63, "fiducial_param": 63, "earth_rot": 63, "earth_rotation_mod": 63, "coarser": 63, "1806": 63, "08792": 63, "fiduci": [63, 76, 84], "figucial_param": 63, "param_ref": 63, "powerlaw": 63, "tune": [63, 80], "predetermin": 63, "hihj": 63, "h00": 63, "fbin_ind": 63, "fedg": 63, "summari": [63, 71, 77, 86, 88, 91, 92, 93, 94, 95], "wf": [63, 77, 84], "supportedi": 63, "f_full": 63, "f_lo": 63, "f_hi": 63, "ep": 63, "barak": 63, "venumadhav": 63, "tunabl": 63, "fbin": 63, "loop": [63, 66, 72, 73, 77], "bookkeep": 63, "transpar": 63, "peak_snr_threshold": 63, "precalculate_marginalization_point": 63, "incoher": 63, "sh_total": 63, "hh_total": 63, "skip_vector": 63, "return_peak": 63, "prechosen": 63, "rec": [63, 66], "redraw": 63, "marginalize_sky_initial_sampl": 63, "marginin": 63, "appopri": 63, "logl": [63, 64], "hh": 63, "kwag": 63, "peak_lock_ratio": 63, "peak_lock_region": 63, "bother": 63, "inclu": 63, "beyond": [63, 76], "logw": 63, "favor": 63, "reconstuct": 63, "loglikehood": 63, "dist_marg": 63, "snr_rang": 63, "dist_loc": 63, "dist_weight": 63, "sval": 63, "ftype": 63, "callstat": 63, "return_all_stat": 63, "promot": 63, "call_model": 63, "model_nam": 63, "loglikelihood_funct": 64, "copy_prior": 64, "iteraiton": 64, "otherw": 64, "arrrai": 64, "samples_fil": [64, 77], "mape": 64, "eff_nsampl": 64, "stat_nam": 64, "nstat": 64, "start_index": [64, 76], "end_index": 64, "per_walk": 64, "autocorrl": 64, "min_nsampl": 64, "nd": 64, "temeratur": 64, "accessor": 64, "no_save_st": 64, "run_kwd": 64, "extra_kwd": 64, "internal_kwd": 64, "finalz": 64, "maxit": 64, "logl_max": 64, "n_effect": 64, "rwalk2": 64, "nact": 64, "autorcorrel": 64, "first_update_min_ncal": 64, "first_update_min_neff": 64, "drop": [64, 71, 80, 98], "ball": 64, "bond": 64, "initial_distribut": 64, "accept_ratio": 64, "old_act": 64, "acc": 64, "adap": 64, "johnveitch": 64, "farr": 64, "jl": 64, "sample_rwalk": 64, "bilbi": 64, "logpost_funct": 64, "ensemblesampl": 64, "ptsampler": 64, "ladder": 64, "geometr": 64, "parallelizt": 64, "samlper": 64, "usr2": 64, "unfortun": 64, "regardless": [64, 80], "default_propos": 64, "default_proposal_arg": 64, "gievn": 64, "default_props": 64, "checkpointin": 64, "subsect": [64, 74, 77, 96, 97], "epsieptsampl": 64, "importance_nested_sampl": 64, "evidence_toler": 64, "sampling_effici": 64, "criterion": 64, "hypercub": 64, "tmax": 64, "make_ladd": 64, "stretch": [64, 70, 86], "_chain": 64, "float1": 64, "float2": 64, "intial": [64, 72], "startup": 64, "log_dir": 64, "stepsampl": 64, "enable_plot": 64, "hit": 64, "sim_fil": [65, 69], "hdf_group": [65, 77], "_hdfinjectionset": 65, "distance_scal": 65, "inj_filter_rejector": [65, 72, 76], "injection_sample_r": [65, 80, 90, 98], "detector_gps_tim": 65, "h1_gps_time": 65, "ref_point": 65, "absmax": 65, "detector_phase_shift": 65, "detector_amp_scal": 65, "slice_start": 65, "slice_end": 65, "left_taper_width": 65, "right_taper_width": 65, "incoherent_from_fil": 65, "siminspiralt": [65, 66], "write_param": 65, "hdfinjectionset": 65, "simburstt": 65, "foat": 65, "apx": [65, 83], "hate": 65, "siminspir": 65, "coars": [65, 70, 80, 90], "chirp_time_window": 65, "match_threshold": 65, "coarsematch_deltaf": 65, "coarsematch_fmax": 65, "seg_buff": 65, "unncessari": 65, "inj_waveform": 65, "t_num": [65, 76], "justifi": 65, "ther": 65, "proce": [65, 88, 97], "fixm": [65, 69, 77, 80, 86, 90, 97], "columnlist": 66, "filter_func": 66, "col": [66, 71], "concaten": 66, "legaci": [66, 89, 90, 98], "pylal": 66, "snglinspiralutil": 66, "coinc_fil": [66, 71, 77], "bank_fil": [66, 69, 75, 77, 90, 95], "sngl_file": [66, 77], "n_loudest": [66, 77], "has_inc": 66, "ifos_list": 66, "file_nam": [66, 71, 74], "libver": 66, "userblock_s": 66, "swmr": 66, "rdcc_nslot": 66, "rdcc_nbyte": 66, "rdcc_w0": 66, "track_ord": 66, "fs_strategi": 66, "fs_persist": 66, "fs_threshold": 66, "fs_page_s": 66, "page_buf_s": 66, "min_meta_keep": 66, "min_raw_keep": 66, "lock": 66, "alignment_threshold": 66, "alignment_interv": 66, "meta_block_s": 66, "return_indic": 66, "colum": 66, "gating_veto_window": 66, "trigger_id": [66, 77], "trig_fil": [66, 71, 77, 82], "premask": 66, "logic_mask": 66, "cname": 66, "plottabl": 66, "rank_nam": 66, "rank_method": 66, "cluster_window": [66, 72, 90], "loudest": [66, 71, 77, 87, 90, 93], "valus": 66, "trigger_id1": 66, "trigger_id2": 66, "decimation_factor": 66, "memfp": 66, "dsetnam": 66, "stream": 66, "protocol": 66, "picklabl": 66, "grp": 66, "hdfile": [66, 69], "chisq_choic": 66, "h5file": 66, "dic": 66, "deal": [66, 73, 86, 93], "start_handl": 66, "uri_localnam": 66, "qname": 66, "__orig_endelementn": 66, "ilwdchar": 66, "__orig_startcolumn": 66, "use_in": 66, "ilwd": 66, "strip_ilwdchar": 66, "__orig_startstream": 66, "tablestream": 66, "__orig_startt": 66, "program_nam": 66, "sane": 66, "col_nam": 66, "col_typ": 66, "sensibl": [66, 90], "process_id": 66, "columnnam": 66, "contenthandl": 66, "fly": [66, 93], "loos": 66, "_outermost_": 66, "decor": 66, "snglinspir": [66, 73, 76], "event_id": 66, "nevent": 66, "searchsummari": 66, "seachsummari": 66, "coinc_ifo": 66, "gracedb_serv": 66, "extra_str": 66, "allski": 66, "annot": 66, "servic": [66, 93, 95], "recarrai": 66, "gravitationa": 66, "default_zero": 66, "obviou": [66, 93], "subfield": 66, "c0": [66, 72], "unexpect": 66, "misspel": 66, "fooo": 66, "arang": [66, 84], "narf": 66, "similarili": 66, "_virtualfield": 66, "preced": [66, 77, 79, 96], "predefin": [66, 77, 98], "19866933": 66, "3271947": 66, "41557185": 66, "47942554": 66, "cat": [66, 93, 95], "bankhdf": 66, "bank2hdf": [66, 87, 93], "1117400416": 66, "928800": 66, "71731389": 66, "10231435": 66, "99999857": 66, "67488706": 66, "00531888": 66, "11106491": 66, "7173138856887817": 66, "2124452590942383": 66, "1023143529891968": 66, "0074082612991333": 66, "9999985694885254": 66, "0578444004058838": 66, "6748870611190796": 66, "1758257150650024": 66, "0053188800811768": 66, "0020891427993774": 66, "111064910888672": 66, "0143394470214844": 66, "f4": 66, "000025987625122": 66, "0000133514404297": 66, "0002814531326294": 66, "0005437135696411": 66, "999999523162842": 66, "371169090270996": 66, "4072519540786743": 66, "4617927074432373": 66, "sim_tabl": [66, 71], "sim_arrai": 66, "27440691": 66, "85058105": 66, "61507106": 66, "0504961": 66, "33554196": 66, "02732205": 66, "spintaylort2": 66, "274406909942627": 66, "6340370178222656": 66, "8505810499191284": 66, "8336880207061768": 66, "6150710582733154": 66, "2336490154266357": 66, "11607": 66, "0504961013793945": 66, "6019821166992188": 66, "11608": 66, "3355419635772705": 66, "2164380550384521": 66, "11609": 66, "0273220539093018": 66, "2453839778900146": 66, "i8": 66, "optimal_snr": 66, "tricki": 66, "essenti": [66, 73, 80], "pointer": [66, 73, 74, 89, 90, 97, 98], "flexibl": [66, 80, 88, 95], "question": [66, 80, 87], "answer": 66, "stackoverflow": 66, "relax": 66, "substanti": 66, "assubarrai": 66, "fi": [66, 69, 91, 92], "subarrai": 66, "new_arrai": 66, "2954373": 66, "1366472": 66, "attrnam": 66, "persist": [66, 69], "whenev": [66, 80], "arr": [66, 71], "virut": 66, "modulo": 66, "fromarrai": 66, "cast_to_dtyp": 66, "tablenam": 66, "validcolumn": 66, "fromrecord": 66, "boolen": 66, "return_valu": 66, "leftover_indic": 66, "popluat": 66, "leftov": 66, "s8": 66, "seobnr_rom_doublespin": 66, "s23": 66, "int64": 66, "possible_field": 66, "quicksort": 66, "mergesort": 66, "heapsort": 66, "additional_field": 66, "field_kwarg": 66, "_fieldarraywithdefault": 66, "warr": 66, "d_l": 66, "retri": 66, "failur": [66, 77, 86, 91, 92, 93, 95], "download_fil": 66, "flaki": 66, "ns_compact": 67, "ns_b_mass": 67, "bh_spin_mag": 67, "bh_spin_pol": 67, "baryon": 67, "ns_mass": 67, "ns_g_mass": 67, "ns_sequenc": 67, "equilibrium": 67, "eos_nam": 67, "grav": [67, 80], "msun": [67, 80], "max_ns_g_mass": 67, "massiv": [67, 80], "solver": 67, "perez": 67, "giz": 67, "pg": 67, "incl": 67, "bardeen": 67, "press": 67, "teukolski": 67, "1972": 67, "articl": 67, "adsab": 67, "harvard": 67, "1972apj": 67, "178": 67, "347b": 67, "polynomi": 67, "pm": [67, 71], "qquad": 67, "isco_eq": 67, "equatori": 67, "frequencyseriesseri": 68, "psd_name": [68, 70], "low_fr": 68, "low_frequency_cutof": 68, "sd": 68, "filter_dur": 68, "nosi": 68, "disjoint": 68, "t2100060": 69, "coinc_typ": 69, "bin_param": 69, "bin_lo": 69, "bin_hi": 69, "full_fil": 69, "chunk": [69, 70, 71, 72, 90, 93, 98], "ctime": 69, "statval": 69, "tdict": 69, "cstring": 69, "test_tim": 69, "exactli": [69, 74, 93], "maxval": 69, "bg": 69, "ctstring": 69, "bg_rate": 69, "sg_rate": 69, "inj_fil": [69, 71, 77, 89], "fg_file": 69, "mincount": 69, "lo": 69, "hi": 69, "bankf": 69, "lo_mchirp": 69, "hi_mchirp": 69, "ct": 69, "zerolag": [69, 77], "poisson": [69, 80], "injstat": 69, "rhomin": 69, "fullf": 69, "tmplt_filter": 69, "mc_lo": 69, "mc_hi": 69, "cty": 69, "ultim": [69, 93], "ratesandpopul": 69, "o1_script": 69, "lvc_rates_calc_posterior": 69, "t1700029": 69, "texunit": 69, "mbox": 69, "texsymb": 69, "rv_continu": 69, "array_lik": 69, "logbf": 69, "laguerre_n": 69, "lambda0": 69, "lambda_1": 69, "plot_styl": 69, "semilogx": 69, "plot_extens": 69, "middl": [69, 77], "credible_interv": 69, "rankstat": 69, "p_b": 69, "ntop": 69, "plot_lim": 69, "spec_json": 69, "json": 69, "exp_fac": 69, "spec_d": 69, "prerequisit": 69, "astro": 69, "calc": 69, "bank_data": 69, "netsnr": 69, "horizon": [69, 72], "ref_dhor": 69, "sens_ifo": 69, "trig_ifo": 69, "padata": 69, "trdata": 69, "p_astro": 69, "p_terr": 69, "specfil": 69, "trigger_data": 69, "satur": 69, "op": 69, "despatch": 69, "live_pastro_group": 69, "z_arrai": 69, "merger_r": 69, "interp1d": [69, 76], "average_tim": 69, "rate_den": 69, "maxz": 69, "npoint": 69, "3yr": 69, "coalescence_rate_interp": 69, "peas": [69, 70], "02717v3": 69, "redshit": 69, "dt_dz": 69, "dz": 69, "total_r": 69, "dl": 69, "stai": [69, 77, 89], "almost": [69, 74, 93], "sfr_func": 69, "td_model": 69, "rho_loc": 69, "symbol": [69, 93], "sfr": 69, "convolution_tran": 69, "rho_z": 69, "a2": 69, "norm_coalescence_r": 69, "timescal": [69, 76], "radiat": [69, 76], "p_t": 69, "msolar": 69, "yr": 69, "0804": 69, "4008": 69, "madau": 69, "dickinson": 69, "1403": 69, "0007": 69, "k_imf": 69, "66": 69, "frago": 69, "kimf": 69, "imf": 69, "salpet": 69, "broken": [69, 90, 93, 94, 97], "kroupa": 69, "1606": 69, "07887": 69, "1706": 69, "07053": 69, "occurr": 69, "log_fg_ratio": 69, "mu_log_vt": 69, "sigma_log_vt": 69, "maxfg": 69, "skew": 69, "achiv": 69, "ff": 69, "p_m1_m2": 69, "threhold": 69, "fname_statmap": 69, "fname_bank": 69, "statmap": [69, 77, 87, 93], "destin": [69, 74, 77], "minrp": 69, "maxrp": 69, "min_z": 69, "max_z": 69, "z_astro": 69, "mchirp_sampl": 69, "model_pdf": 69, "strategi": 69, "injection_chunk": 69, "vt": 69, "low_dist": 69, "high_dist": 69, "lomass": 69, "himass": 69, "lomass_2": 69, "himass_2": 69, "high_spin": 69, "v_min": 69, "v_max": 69, "hdffile": 69, "s_dist": 69, "d_dist": 69, "containign": 69, "born": 70, "low_freq_cutoff": [70, 72], "uniti": [70, 74], "simnoisepsd": 70, "lcst": 70, "sg": [70, 76, 90], "tn": 70, "man": [70, 93], "1088": 70, "1361": 70, "6382": 70, "ab1101": 70, "2500000000": 70, "om": 70, "csd": 70, "56": 70, "radler": 70, "58": 70, "59": 70, "fp_sq_approx": 70, "response_tdi_1p5": 70, "response_tdi_2p0": 70, "low_freq_compon": 70, "high_freq_compon": 70, "lisa_arm_length": 70, "omega_len": 70, "s_acc_nu": 70, "s_oms_nu": 70, "scird": 70, "114": 70, "galact": 70, "41": 70, "utilit": 70, "max_filter_len": [70, 74], "trunc_method": [70, 74], "grain": [70, 80], "0509116": 70, "bia": 70, "avg_method": 70, "num_seg": 70, "require_exact_data_fit": 70, "inconsist": 70, "freq_data": 70, "noise_data": 70, "freq_arr": 70, "herz": 70, "ifo_str": 70, "root_nam": 70, "short_seg": 70, "psd_long_seg": 70, "psd_durat": [70, 72], "psd_stride": [70, 72], "psd_avg_method": [70, 72], "low_freq": 70, "high_freq": 70, "composit": 70, "f_high": 70, "rough": [70, 76, 80], "parsev": 70, "480": 70, "psd_var": 70, "varaibl": 70, "srate": 70, "short_strid": 70, "substitut": [70, 76], "adjac": 70, "m_": 70, "fd_segment": 70, "dyn_range_factor": 70, "strain_seg": 70, "psd_model": 70, "asd_fil": [70, 80, 90, 98], "psd_segment_length": [70, 72, 80, 90, 98], "psd_segment_strid": [70, 80, 90, 98], "psd_inverse_length": [70, 72, 80, 90, 98], "psd_output": [70, 80, 90, 98], "frequnci": 70, "length_dict": 70, "delta_f_dict": 70, "low_frequency_cutoff_dict": 70, "psd_and_tim": 70, "include_data_opt": 70, "optiongroup": [70, 72, 73, 77, 88], "utc_tim": 71, "alog": 71, "resp": 71, "return_str": 71, "file_list": [71, 77], "file_list_fil": 71, "trigger_dict": 71, "sec": [71, 77], "fillvalu": [71, 77], "wkflow": 71, "science_seg": [71, 77, 90, 93, 98], "trigger_nam": 71, "out_dir": [71, 77, 89, 96, 97], "coherent_seg": 71, "fail_criterion": 71, "htmlparser": 71, "sanit": 71, "fig_kwd": 71, "keword": 71, "mpld3": 71, "pluginbas": 71, "register_plugin": 71, "prototyp": 71, "requiredprop": 71, "defaultprop": 71, "get_el": 71, "mousedown": 71, "hoffset": 71, "voffset": 71, "css": 71, "linehtmltooltip": 71, "button": [71, 95], "propag": 71, "typeof": 71, "undefin": 71, "dt0": 71, "last_t": 71, "dt1": 71, "last_": 71, "zoom_x": 71, "foreach": 71, "bind": 71, "zoomplugin": 71, "mpld3_zoomplugin": 71, "zoombutton": 71, "buttonfactori": 71, "buttonid": 71, "sticki": 71, "scroll": 71, "drag": 71, "onactiv": 71, "ondeactiv": 71, "ondraw": 71, "setstat": 71, "icon": 71, "enable_zoom": 71, "disable_zoom": 71, "pointhtmltooltip": 71, "premad": 71, "val_max": 71, "mpl": 71, "rcparam": 71, "psddict": 71, "output_filenam": [71, 97], "pygrb": [71, 77, 80, 95], "trig_valu": 71, "inj_valu": 71, "deterim": 71, "snr_val": 71, "vert_spik": 71, "new_snr": [71, 90], "chisq_index": 71, "chisq_nhigh": 71, "cont": 71, "shade_cont_valu": 71, "seg_fil": [71, 77, 86, 96], "seg_dict": 71, "slide_dict": [71, 77], "trial_dict": 71, "bestnr": 71, "veto_cat": 71, "all_veto_fil": 71, "geocent_tim": 71, "57": 71, "ph": 71, "null_thresh": 71, "sngl_snr_threshold": 71, "null_grad_thresh": 71, "null_grad_v": 71, "coh_ptf": [71, 77], "coincsnr": 71, "cohsnr": 71, "trigs_or_inj": 71, "ligolw_t": 71, "grab": 71, "xml_doc": 71, "return_dict": 71, "select_id": 71, "segmentlistdict": [71, 77, 96], "seg_def": 71, "segment_def_t": 71, "segment_def_id": 71, "table_nam": 71, "time_veto_max_stat": 71, "trig_stat": 71, "total_tri": 71, "deterin": 71, "num_mc_inj": 71, "inj_dist": 71, "cal_err": 71, "wf_err": 71, "max_dc_cal_err": 71, "multiinspir": 71, "slide_dict_or_list": 71, "slide_id": 71, "attach": [71, 76, 93], "tab": [71, 91, 93], "glitchgram": 71, "subtempl": 71, "gatewai": [71, 77, 89, 90, 97], "samples_arrai": 71, "use_kombin": 71, "kdearg": 71, "kombin": 71, "clustered_kd": 71, "optimized_kd": 71, "max_kde_sampl": 71, "height_ratio": 71, "width_ratio": 71, "no_diagon": 71, "gridspec": 71, "axis_dict": 71, "xparam": 71, "yparam": 71, "plot_dens": 71, "plot_contour": 71, "viridi": 71, "contour_color": 71, "label_contour": 71, "contour_linestyl": 71, "exclude_region": 71, "colormap": [71, 92], "exclue_region": 71, "fillcolor": 71, "grai": 71, "linecolor": 71, "navi": 71, "plot_marginal_lin": 71, "expected_valu": 71, "expected_color": 71, "plot_min": 71, "plot_max": 71, "pecentil": 71, "scalefac": 71, "font": 71, "expected_paramet": 71, "expected_parameters_color": 71, "plot_margin": 71, "plot_scatt": 71, "plot_maxl": 71, "marginal_percentil": 71, "contour_percentil": 71, "marginal_titl": 71, "marginal_linestyl": 71, "zval": 71, "show_colorbar": 71, "cbar_label": 71, "scatter_cmap": 71, "plasma": 71, "density_cmap": 71, "hist_color": 71, "line_color": 71, "fill_color": 71, "maginal_percentil": 71, "zvalu": 71, "maxmimum": 71, "fiducial_width": 71, "fiducial_height": 71, "maxtick": 71, "tick": 71, "270": 71, "sidewai": 71, "displai": [71, 77, 93, 95], "trail": [71, 74], "plus_error": 71, "use_scientific_not": 71, "include_error": 71, "use_relative_error": 71, "ndec": 71, "round": [71, 74, 76, 80, 90], "log10": [71, 91], "1f": 71, "spot": 71, "enclos": 71, "9278372067613837e": 71, "2351435286500487e": 71, "93": 71, "pm5": 71, "000000000000000000000393": 71, "err_plu": 71, "2700310560051804e": 71, "928": 71, "083": 71, "max_sig": 71, "sortabl": 71, "page_s": 71, "format_str": 71, "icu": 71, "tableo": 71, "cell": 71, "minimum_frequ": 72, "maximum_frequ": 72, "ifo_nam": 72, "spline": 72, "strain_adjust": 72, "cubic_splin": 72, "recalib_": 72, "lindex": 72, "rindex": 72, "data1": 72, "data2": 72, "bin_siz": 72, "inner_prod": 72, "amp": [72, 76, 83], "tref": 72, "avg_bin": 72, "wander": 72, "complex_list": 72, "freq_lin": 72, "t1400682": 72, "logspac": 72, "d0": 72, "a_tst0": 72, "a_pu0": 72, "caviti": 72, "cc": 72, "t0": 72, "spring": 72, "recycl": 72, "delta_qinv": 72, "delta_fc": 72, "kappa_c": 72, "kappa_tst_r": 72, "kappa_tst_im": 72, "kappa_pu_r": 72, "kappa_pu_im": 72, "kappa_a": 72, "f_c": 72, "qinv": 72, "a_": [72, 76], "tst0": 72, "pu0": 72, "physical_model": 72, "frame_src": 72, "max_buff": 72, "highpass_frequ": 72, "highpass_reduct": 72, "highpass_bandwidth": 72, "psd_sampl": 72, "trim_pad": 72, "autogating_threshold": 72, "autogating_clust": 72, "autogating_pad": 72, "autogating_width": 72, "autogating_tap": 72, "autogating_dur": 72, "autogating_psd_segment_length": 72, "autogating_psd_strid": 72, "state_channel": 72, "data_quality_channel": 72, "idq_channel": 72, "idq_state_channel": 72, "idq_threshold": 72, "dyn_range_fac": 72, "902958103587057e": 72, "psd_abort_differ": 72, "psd_recalculate_differ": 72, "force_update_cach": 72, "increment_update_cach": 72, "analyze_flag": 72, "data_quality_flag": 72, "dq_pad": 72, "databuff": 72, "countdown": 72, "blocksiz": 72, "timeout": 72, "min_dist": [72, 73], "max_dist": 72, "maxlen": 72, "influenc": 72, "overwhit": 72, "segment_length": [72, 90], "segment_start_pad": [72, 90], "segment_end_pad": [72, 90], "trigger_start": 72, "trigger_end": 72, "filter_inj_onli": 72, "injection_window": [72, 90], "allow_zero_pad": 72, "cumulative_index": 72, "npoints_tim": 72, "uid": 72, "r2c": 72, "c2r": 72, "corrupt_tim": 72, "high_freq_cutoff": 72, "output_intermedi": 72, "identif": 72, "downsampl": [72, 78, 90], "debug": [72, 73, 77, 86, 90, 91, 92, 97], "invec_data": 72, "normalize_by_r": 72, "copy_output": 72, "overwrit": [72, 93], "unintention": 72, "gating_fil": [72, 80, 90, 98], "inj_filter_rejector_dict": 72, "gate_param": 72, "tukei": 72, "conversion_opt": 73, "metricparam": 73, "ethincaparam": 73, "full_ethinca": 73, "ethinca": [73, 80, 98], "au_0": 73, "au_3": 73, "eigenvalu": 73, "eigenvector": 73, "gamma0": [73, 80, 98], "fmax_theor": 73, "gammav": 73, "numpy_arrai": 73, "slot": [73, 76], "proc_id": 73, "snglinspiralt": 73, "outputfil": 73, "tempbank": 73, "optdict": 73, "programnam": 73, "output_dur": 73, "modular": 73, "outdoc": 73, "xi": [73, 80], "bestmass": 73, "bestxi": 73, "direction_num": 73, "req_match": 73, "massrangeparam": 73, "fupper": [73, 80], "find_minimum": 73, "scalefactor": 73, "numiter": 73, "throw": [73, 74, 77, 80, 88], "extrema": 73, "assess": [73, 77, 89, 90], "depth": 73, "xi_i": [73, 80], "xi_ext": 73, "numjumppoint": 73, "chirpmassjumpfac": 73, "etajumpfac": 73, "spin1zjumpfac": 73, "spin2zjumpfac": 73, "chirpmass": 73, "tjo": 73, "awai": [73, 80, 92], "totmass": 73, "diff": 73, "new_xi": 73, "giveupthresh": 73, "took": [73, 93, 95], "xi_spac": 73, "maxima": 73, "minima": 73, "xi_min": 73, "xi_max": 73, "logj": 73, "loglogj": 73, "logloglogj": 73, "loglogloglogj": 73, "unmax_metr": 73, "psd_f": 73, "psd_amp": 73, "fmax": [73, 76, 90], "funct": 73, "vary_fmax": 73, "vary_dens": 73, "psd_x": 73, "delta_x": 73, "evenli": 73, "f_cutoff": 73, "f_upper": [73, 80, 98], "preservemo": 73, "transfom": 73, "expans": 73, "THE": [73, 89, 90, 98], "ident": [73, 77], "lambda_i": 73, "compos": 73, "compound": 73, "nomral": 73, "i7": 73, "deltaf": [73, 90], "new_psd_f": 73, "new_psd_amp": 73, "vsa": 73, "entrya": 73, "chi_i": 73, "mmdista": 73, "mus1": 73, "fupper1": 73, "mus2": 73, "fupper2": 73, "fmap": 73, "norm_map": 73, "chi_j": 73, "numpoint": 73, "input_freq": 73, "metric_freq": 73, "output_freq": 73, "mass_range_param": 73, "quadparam1": 73, "quadparam2": 73, "mu_i": 73, "point1": 73, "point2": 73, "xis1": 73, "xis2": 73, "outward": 73, "lattic": [73, 80], "mass_dict": 73, "schwarzisco": [73, 80, 98], "lightr": [73, 80, 98], "erd": [73, 80, 98], "named_frequency_cutoff": 73, "old_vector": 73, "rescale_factor": 73, "xi_j": 73, "point_1_chi": 73, "point_2_chi": 73, "distance_threshold": 73, "newtonian": [73, 76], "zeropn": [73, 80, 98], "onepn": [73, 80, 98], "onepointfivepn": [73, 80, 98], "twopn": [73, 80, 98], "twopointfivepn": [73, 80, 98], "threepn": [73, 80, 98], "threepointfivepn": [73, 80, 88, 90, 95, 98], "great": [73, 90], "maxv1": 73, "minv1": 73, "maxv2": 73, "minv2": 73, "maxv3": 73, "minv3": 73, "mindist": 73, "1st": 73, "2nd": 73, "hexagon": [73, 80, 98], "prog": 73, "indent_incr": 73, "max_help_posit": 73, "argumentdefaultshelpformatt": 73, "forum": 73, "topic": [73, 84], "comp": 73, "lang": 73, "bfbmtughw8i": 73, "nicer": 73, "specfic": 73, "crappi": 73, "tim": 73, "chase": 73, "previous": [73, 93, 96], "pnorder": 73, "freqstep": 73, "time_ethinca": 73, "option_group": 73, "match_req": 73, "minmass1": 73, "maxmass1": 73, "minmass2": 73, "maxmass2": 73, "maxnsspinmag": 73, "maxbhspinmag": 73, "maxtotmass": 73, "mintotmass": 73, "maxeta": 73, "mineta": 73, "min_chirp_mass": [73, 80, 98], "ns_bh_boundary_mass": [73, 80], "nsbhflag": 73, "remnant_mass_threshold": [73, 80, 98], "ns_eo": [73, 80, 98], "use_eos_max_ns_mass": 73, "delta_bh_spin": [73, 80, 98], "delta_ns_mass": [73, 80, 98], "massparam": [73, 74], "write_metr": 73, "unproject": 73, "metric_param": 73, "ref_freq": 73, "bin_spac": 73, "bin_range_check": 73, "partit": 73, "intermediari": [73, 93], "chi_coord": 73, "point_fupp": 73, "vary_fupp": 73, "concern": [73, 80, 93], "hdf_fp": 73, "sngl_tabl": 73, "sngl_inspiral_t": [73, 80], "chi1_bin": 73, "chi2_bin": 73, "li": 73, "lot": [73, 80, 88, 90, 93], "chi_1": 73, "chi_2": 73, "frequency_list": 73, "upper_freq_formula": 73, "abrupt": [73, 76], "theshold": 73, "ndarr": 74, "devic": [74, 90], "initial_arrai": 74, "convienc": 74, "elementwis": 74, "meta": 74, "But": [74, 80], "reloc": 74, "agre": 74, "normwis": 74, "conjug": 74, "mult_fac": 74, "new_siz": 74, "unchang": [74, 77, 88], "dict_typ": 74, "allow_no_valu": 74, "comment_prefix": 74, "inline_comment_prefix": 74, "empty_lines_in_valu": 74, "default_sect": 74, "safeconfigpars": 74, "deepcopi": [74, 77], "issue16058": 74, "configfil": [74, 77, 80, 88, 93, 95], "overridetupl": [74, 77, 88], "parsedfilepath": [74, 77, 88], "deletetupl": [74, 77, 88], "skip_extend": 74, "overwrite_opt": [74, 77], "section1": [74, 77, 88], "section2": [74, 77, 88], "raise_error": [74, 77, 86, 88, 93, 94, 95], "simplic": 74, "supplement": [74, 80, 87], "defaultvalu": 74, "section_nam": [74, 77, 88], "test_str": [74, 77, 88], "extendedinterpol": [74, 77], "python2": [74, 77], "sharedopt": 74, "dataparam": 74, "copit": 74, "fpath": 74, "unedit": [74, 77], "await": 74, "newlin": 74, "multilin": 74, "backslash": 74, "thrown": [74, 77], "dtol": 74, "enforc": [74, 77, 92], "cycliclli": 74, "lal_data": 74, "bewar": 74, "option_str": 74, "metavar": 74, "defaultdict": 74, "colon": 74, "foobar": 74, "register_to_process_param": 74, "opt_list": 74, "required_bi": 74, "nearest_sampl": 74, "outsidd": 74, "trend": 74, "circularli": [74, 76], "convolv": 74, "segment_dur": 74, "taper_width": 74, "exciz": 74, "remove_corrupt": 74, "resampled_t": 74, "floor": 74, "max_filter_dur": 74, "return_psd": 74, "num_point": 75, "onesid": [75, 90], "twophas": 75, "reverse_templ": 75, "take_maximum_valu": 75, "maximal_value_dof": 75, "precomput": 75, "sn": 75, "anyon": [75, 80], "ever": 75, "corr_sn": 75, "hautocorr": 75, "maxvalu": 75, "chisquar": 75, "autochisquar": 75, "twosid": 75, "cdtype": 75, "tmplt_snr": 75, "tmplt_norm": 75, "bank_snr": 75, "bank_norm": 75, "tmplt_bank_match": 75, "bank_filt": 75, "corr": 75, "snr_norm": 75, "corr_plu": 75, "corr_cross": 75, "template_plu": 75, "template_cross": 75, "hplus_cross_corr": 75, "fastest": 75, "explainm": 75, "return_bin": 75, "commensur": 75, "preweight": 75, "slen": 75, "blen": 75, "08974": 75, "chisq_loc": 75, "bchisq_dof": 75, "filter_length": 76, "max_template_length": [76, 90], "enable_compressed_waveform": 76, "waveform_decompression_method": [76, 90], "max_freq": 76, "cached_mem": 76, "tempout": 76, "out_plu": 76, "out_cross": 76, "minimum_buff": 76, "min_buff": 76, "sindex": 76, "param_tupl": 76, "sting": 76, "thereof": 76, "default_field": [76, 90], "xmldoc": 76, "ot": 76, "stop_index": 76, "skip_field": 76, "write_compressed_waveform": 76, "recognis": 76, "oserror": 76, "approximant_str": 76, "apprxstr": 76, "apprx": [76, 90], "cond": [76, 90], "fieldarg": 76, "boolarg": 76, "f_start": 76, "max_length": 76, "shorter": [76, 77, 96, 98], "approximant_arg": 76, "warrai": 76, "tandem": [76, 92], "tuple_to_be_hash": 76, "nativ": [76, 88], "unsaf": 76, "unequ": 76, "load_now": 76, "compressed_waveform": 76, "decomp_scratch": 76, "maximim": 76, "garaunte": 76, "wors": 76, "inline_linear": 76, "interpolat": 76, "imin": 76, "ordinarili": 76, "min_seglen": 76, "02": 76, "df_multipl": 76, "fudge_length": 76, "fudge_min": 76, "necessarili": 76, "fudg": 76, "convserv": 76, "hinterp": 76, "rframegeneratorclass": 76, "recalib": 76, "frquenci": 76, "frozen": 76, "children": 76, "record_failur": 76, "repeat": [76, 92], "cbc_paramet": 76, "0x1110c1450": 76, "0x1110c1510": 76, "94": 76, "0x116637350": 76, "0x116637a50": 76, "rframe": 76, "decomps": 76, "ulm": 76, "vlm": 76, "hlm": 76, "f_220": 76, "tau_220": 76, "f_210": 76, "tau_210": 76, "amp220": 76, "amp210": 76, "phi220": 76, "phi210": 76, "lmn": 76, "211": 76, "317": 76, "274": 76, "0x51614d0": 76, "0x5161550": 76, "0x10e546710": 76, "0x115f37690": 76, "ringdown_fd_approxim": 76, "fouerier": 76, "frequeni": 76, "stitch": 76, "carefulli": 76, "subband": 76, "keyworkd": 76, "nonlinear": 76, "delta_psi": 76, "1808": 76, "07013": 76, "include_label": 76, "summar": [76, 77], "initlist": 76, "userlist": 76, "has_det_respons": 76, "f_0": 76, "t_0": [76, 92], "polnm": 76, "sinusoid": 76, "resolv": [76, 77, 88], "dphi": 76, "dbeta": 76, "0_": 76, "varphi": 76, "spheroid": 76, "hptild": 76, "hctild": 76, "quasi": 76, "nmode": 76, "331": 76, "220": 76, "330": 76, "lm": 76, "ref_amp": 76, "amp330": 76, "1107": 76, "0854": 76, "amplmn": 76, "philmn": 76, "degener": 76, "pollmn": 76, "pol220": 76, "polnmlmn": 76, "polnm220": 76, "delta_flmn": 76, "new_flmn": 76, "flmn": 76, "predict": [76, 77, 89], "delta_taulmn": 76, "new_taulmn": 76, "taulmn": 76, "hplustild": 76, "hcrosstild": 76, "f_lmn": 76, "tau_lmn": 76, "dphi220": 76, "dbeta220": 76, "t_final": 76, "ringup": 76, "superposit": 76, "input_param": 76, "freq_tau_approxim": 76, "td": [76, 81, 84], "domain_arg": 76, "f_decai": 76, "t_decai": 76, "psi_": 76, "nm": 76, "xlm": 76, "xlnm": 76, "im": 76, "tau_": 76, "f_": 76, "mn": 76, "beta_": 76, "10x": 76, "bursti": 76, "central_frequ": 76, "spa": 76, "flower": 76, "porder": 76, "lower_frequency_cutoff": 76, "pim": 76, "pfan": 76, "pfa2": 76, "pfa3": 76, "pfa4": 76, "pfa5": 76, "pfl5": 76, "pfa6": 76, "pfl6": 76, "pfa7": 76, "amp_factor": 76, "tmplt": 76, "precondit": 76, "bounc": 76, "postbounc": 76, "oscil": 76, "h_cross": 76, "tmeseri": 76, "gwamplitud": 76, "shifttim": 76, "shiftim": 76, "makecopi": 76, "accross": 76, "left_window": 76, "right_window": 76, "left_beta": 76, "right_beta": 76, "gwfrequenc": 76, "remove_start_phas": 76, "gwphase": 76, "tsdata": 76, "tapermethod": 76, "return_l": 76, "taper_non": 76, "taper_end": 76, "taper_startend": 76, "discont_threshold": 76, "1101767270538954": 76, "toward": 76, "untrustworthi": 76, "genener": 76, "subsitut": 76, "hrss": 76, "rss": 76, "rwrap": 76, "meaning": [76, 94], "outplu": 76, "outcross": 76, "buffer_length": 76, "pend": 76, "ffting": [76, 90], "expicitli": 76, "mathfrak": 76, "maginitud": 76, "y_": 76, "g_": 76, "imrphenomxhm": [76, 83], "nrsurrog": 76, "nrsur": 76, "h_x": [76, 77], "reuse_execut": [77, 89], "set_submit_subdir": [77, 89], "statmap_fil": 77, "background_fil": 77, "other_statmap_fil": 77, "veto_nam": [77, 89], "template_str": 77, "pivot_ifo": 77, "fixed_ifo": 77, "raw_fit_fil": 77, "inj_coinc_fil": 77, "inj_xml_fil": 77, "fap": 77, "sngls_file": 77, "full_data": [77, 90, 93], "injful": [77, 93], "fullinj": [77, 93], "xmlbank": 77, "hdfbank": 77, "xml_trigger_fil": 77, "ifocomb": 77, "ifo_id": 77, "bg_file": 77, "censored_nam": 77, "trigger_fil": 77, "ranking_fil": 77, "insp": 77, "final_bg_file_list": 77, "bg_file_list": 77, "full_data_trig_fil": 77, "inj_trig_fil": 77, "sngls_inj_fil": 77, "output_dir": [77, 80, 89, 90, 93, 95, 98], "preserve_orig_fil": 77, "preserv": 77, "teststr": [77, 88], "cpfile": 77, "parsed_filepath": 77, "configparset": 77, "ahop": [77, 85, 86, 88, 89, 93, 96, 97, 98], "initialization_inifil": [77, 88], "copy_to_cwd": [77, 88], "option_nam": [77, 88, 96], "lalapps_tmpltbank": [77, 80, 88, 98], "newstr": [77, 88], "macro": 77, "new_str": [77, 88], "magic": [77, 88], "drive": [77, 88], "detchar": [77, 88, 94, 95, 96], "some_gating_fil": [77, 88], "filea": [77, 88], "fileb": [77, 88], "filec": [77, 88], "option1": [77, 88], "option2": [77, 88], "permiss": [77, 88], "returncod": 77, "errfil": 77, "outfil": [77, 93], "cmdfile": 77, "profil": [77, 93], "retent": [77, 80, 88, 92, 93, 94, 95], "retain_fil": 77, "pegasu": [77, 80, 86, 94], "exe_nam": [77, 90, 98], "file_url": 77, "store_fil": 77, "use_tmp_subdir": 77, "stuff": [77, 96], "inspiral_s6lowmass": 77, "815901601": 77, "815902001": 77, "localhost": [77, 93], "spxiwh": [77, 80, 88, 89, 97, 98], "cacheentri": 77, "ifo_list": 77, "categor": 77, "currseg": 77, "usesplitlist": 77, "ligogpstim": 77, "pycbc_fil": 77, "current_seg": 77, "intersect": 77, "ahopefil": 77, "valid_seg": 77, "input1": 77, "input2": 77, "analysis_tim": 77, "sqlite": 77, "mapper": 77, "td_option": 77, "segment_dict": 77, "seg_summ_dict": 77, "seg_summ_list": 77, "segmentslist": 77, "segment_summari": [77, 86], "file_exist": 77, "segmentslistdict": 77, "segdict": 77, "minseglength": 77, "override_file_if_exist": 77, "storage_path": 77, "verbatim_ex": 77, "output_map_path": 77, "dax": [77, 80, 91, 92, 93, 94, 95], "exucut": 77, "include_subdax_opt": 77, "subdax": [77, 93], "fullseg": 77, "subdirectori": [77, 93], "cmdlist": 77, "out_basenam": 77, "external_cal": 77, "fail_on_error": 77, "stderr": [77, 93], "redirect": 77, "seriou": [77, 90], "secur": 77, "exploit": 77, "exitcod": [77, 93], "val_str": 77, "opt_1": 77, "value_a": 77, "value_b": 77, "value_c": 77, "curr_pfn": 77, "pfn": [77, 93], "cvfm": 77, "nonfsio": 77, "lfn": 77, "2000000000": 77, "emphas": 77, "child": 77, "datafindcache_list": [77, 86], "datafind_filelist": [77, 86], "backup_out": [77, 86], "orig_out": [77, 86], "datafindcach": [77, 86], "isfil": [77, 86], "outgrouplist": [77, 86], "missingframeseg": [77, 86], "datafindout": [77, 86], "missingfram": [77, 86], "newscienceseg": [77, 86], "sciencefil": [77, 86], "segmentnam": [77, 86], "summseglist": [77, 86], "frametyp": [77, 86], "starttim": [77, 86], "outputdir": [77, 86], "dfkwarg": [77, 86], "uniqueifi": [77, 86], "uniquifi": [77, 86], "dfcach": [77, 86], "cachefil": [77, 86], "lcf": [77, 80, 86, 90, 98], "scienceseg": [77, 86, 96, 98], "gwdatafind": [77, 86], "oppos": [77, 80, 86], "setup_datafind_runtime_single_call_perifo": [77, 86], "setup_datafind_runtime_gener": [77, 86], "outfilelist": [77, 86], "dagman": [77, 86, 93], "framefil": [77, 86], "get_science_seg": [77, 86], "sci_avlble_fil": [77, 86], "updatesegmenttim": [77, 86], "sci_avlble_nam": [77, 86], "dq_file": 77, "dq_type": 77, "binned_rate_fil": 77, "dq_label": 77, "analyzable_fil": 77, "pycbc_grb_inj_combin": 77, "ifo_tag": 77, "pycbc_grb_inj_find": 77, "inj_insp_fil": 77, "pycbc_grb_trig_clust": 77, "in_fil": 77, "pycbc_grb_trig_combin": 77, "seg_dir": 77, "insp_fil": 77, "sky_err": 77, "core_frac": 77, "core_sigma": 77, "tail_sigma": 77, "fermi": 77, "systemat": 77, "1909": 77, "03006": 77, "septemb": 77, "gbm": 77, "run_dir": [77, 82, 95], "bank_veto": 77, "summary_fil": 77, "bank_veto_bank": 77, "ipn": 77, "sky_points_fil": 77, "sky_error": [77, 95], "upscal": 77, "fermi_si": 77, "swift": 77, "sci_seg": 77, "exttrig": 77, "datafind_fil": 77, "outdir": 77, "condition_strain_nod": 77, "condition_strain_out": 77, "wflow": 77, "curr_ex": [77, 97], "exe_class": [77, 97], "pp_dir": 77, "inj_tag": [77, 89], "inference_fil": 77, "analysis_seg": 77, "extract_posterior": [77, 91, 92], "plot_sampl": [77, 92], "acceptance_r": 77, "plot_acceptance_r": [77, 92], "section_tag": 77, "rdir": 77, "plot_dynesty_run": 77, "plot_dynesty_traceplot": 77, "trace": 77, "inj_recoveri": [77, 91], "versu": [77, 91], "injection_param": 77, "samples_param": 77, "input_file_opt": 77, "output_file_extens": 77, "add_to_workflow": 77, "boiler": 77, "plate": 77, "plot_mcmc_histori": 77, "plot_prior_from_fil": 77, "corner": [77, 78, 91, 92], "plot_pp": [77, 91], "pp_table_summari": [77, 91], "table_summari": [77, 92], "plot_prior": [77, 92], "paras": 77, "fits_fil": 77, "plot_skymap": [77, 92], "skymap": [77, 92], "print_metadata": 77, "posterior_file_dir": 77, "summary_t": [77, 92], "summary_plot": [77, 92], "label1": 77, "label2": 77, "clariti": 77, "plot_posterior_summari": [77, 91, 92], "lalbel": 77, "plot_param": [77, 92], "worfkow": 77, "prior_plot": 77, "resul": 77, "posterior_plot": 77, "notyetcr": [77, 89, 90, 97], "precalc_psd_fil": [77, 89], "group_str": [77, 89], "distant": [77, 89], "inj_section_nam": [77, 89], "exttrig_fil": [77, 89], "subfunct": [77, 86, 89, 90, 98], "moudl": [77, 89], "data_length": 77, "valid_chunk": 77, "valid_length": 77, "curr_seg": 77, "curr_exe_class": 77, "num_job": 77, "allow_overlap": 77, "seg_siz": 77, "ligolw_add": [77, 93, 94, 95], "jobseg": 77, "ligolw_cbc_skyloc_jitt": 77, "data_seg": 77, "df_parent": 77, "job_data_seg": 77, "gate_fil": 77, "pycbc_multi_inspir": [77, 90], "dfparent": 77, "bankvetobank": 77, "ipn_fil": 77, "pycbc_geom_nonspin_bank": [77, 98], "declar": 77, "condordagmannod": 77, "clase": 77, "pycbc_dark_vs_bright_inject": [77, 95], "num_split": 77, "pycbc_hdf_splitinj": 77, "num_bank": 77, "pycbc_hdf5_splitbank": 77, "splitbank": [77, 95, 97], "resons": 77, "pycbc_splitbank": [77, 93, 95], "pycbc_split_inspinj": [77, 95], "curr_exe_job": 77, "get_valid": 77, "datalength": 77, "72": 77, "nonzero": 77, "out_fil": 77, "datafind_out": [77, 90, 98], "exe_tag": 77, "select_xxx_class": 77, "aforement": 77, "tmplt_bank": [77, 90, 98], "principl": [77, 90], "lalapps_inspir": [77, 88, 90], "jobutil": [77, 90], "serv": [77, 88, 90, 93], "bnsinject": [77, 90], "noinjectionanalysi": [77, 90], "inspiral_out": [77, 90], "pycbc_plot_qscan": 77, "pycbc_single_templ": 77, "pycbc_plot_singles_timefreq": 77, "file_substr": 77, "sort_ord": 77, "sort_var": 77, "injection_index": 77, "plot_waveform": 77, "time_window": 77, "make_qscan": 77, "singles_timefreq": 77, "data_read_nam": 77, "analyzed_nam": 77, "params_str": 77, "use_exact_inj_param": 77, "pycbc_single_template_plot": 77, "u_vals_": 77, "single_template_plot": 77, "caption": 77, "skipped_data": 77, "snippet": 77, "ifo_tim": 77, "special_tid": 77, "single_trigg": 77, "insp_seg": 77, "insp_data_nam": 77, "insp_anal_nam": 77, "dax_output": 77, "nth": 77, "cointain": 77, "minifollop": 77, "single_trig_fil": 77, "veto_segment_nam": 77, "statfil": 77, "supplementari": 77, "sitecat": 77, "condorpool_copi": 77, "local_path": 77, "local_url": 77, "condorpool_shar": 77, "condorpool_symlink": 77, "sitenam": 77, "pegasus_profil": [77, 80, 92, 93, 94, 95], "dax3": 77, "arch": 77, "x86_64": 77, "perspect": 77, "rep_cat": 77, "inp": 77, "megabyt": 77, "prioriti": 77, "nomenclatur": 77, "linkag": 77, "container_wflow": 77, "output_map_fil": 77, "cache_fil": [77, 80, 93, 95], "is_stag": 77, "bypass_stag": 77, "os_typ": 77, "os_releas": 77, "os_vers": 77, "my_workflow": 77, "dax_file_nam": 77, "parent_workflow": 77, "child_workflow": 77, "ye": 77, "tranform": 77, "submit_now": 77, "plan_now": 77, "substr": 77, "inj_trig": 77, "hierarchical_level": 77, "page_ifar": 77, "results_dir": 77, "orang": 77, "explicit_depend": 77, "seg_nam": 77, "title_text": 77, "closed_box": 77, "vetodef_fil": 77, "output_fmt": 77, "geom_nonspinbank": 77, "geom_aligned_bank": [77, 80], "pycbc_plot_psd_fil": [77, 92, 94], "indivud": [77, 96], "up_flag1": [77, 96], "up_flag2": [77, 96], "up_flag3": [77, 96], "down_flag1": [77, 96], "down_flag2": [77, 96], "intanc": [77, 96], "insuffici": [77, 96], "onsourc": [77, 96], "offsourc": [77, 96], "curr_sect": [77, 97], "executbl": [77, 97], "create_job": [77, 97], "input_t": [77, 97], "split_table_out": [77, 97], "lalapps_splitbank": [77, 97], "independent_ifo": [77, 98], "return_format": [77, 98], "concret": 78, "1242442818": 78, "1242442882": 78, "liter": 78, "strain_condit": 78, "strain_with_inject": 78, "o4": 78, "1234": [78, 93], "simulated_strain": 78, "author": [79, 82, 84], "patch": 79, "draft": 79, "dev0": 79, "someon": [79, 80], "travi": 79, "docker": 79, "cherri": 79, "pycbc_make_sbank_workflow": 80, "pycbc_make_uberbank_workflow": 80, "peopl": [80, 82, 87], "situat": [80, 93], "overcov": 80, "undercov": 80, "strong": 80, "he": 80, "advis": 80, "wast": [80, 93], "stupid": 80, "overcoverag": 80, "sathyaprakash": 80, "dhurandhar": 80, "rev": 80, "d44": 80, "3819": 80, "1991": 80, "eric": 80, "clifford": 80, "d52": 80, "848": 80, "1995": 80, "balasubramanian": 80, "d53": 80, "3033": 80, "1996": 80, "owen": 80, "benjamin": 80, "6749": 80, "d60": 80, "022002": 80, "1998": 80, "babak": 80, "quant": 80, "5477": 80, "2006": 80, "thoma": 80, "d76": 80, "102004": 80, "2007": 80, "d87": 80, "024033": 80, "d86": 80, "084017": 80, "ohm": 80, "frank": 80, "d88": 80, "024002": 80, "trivial": 80, "testnonspin": [80, 98], "zero_det_high_p": 80, "900000033": [80, 98], "900002081": [80, 98], "h1_ninja2_g1000176_early_recolored_cach": [80, 98], "900000024": [80, 98], "10653": [80, 98], "min_match": [80, 98], "pn_order": [80, 98], "min_mass1": [80, 98], "max_mass1": [80, 98], "min_mass2": [80, 98], "max_mass2": [80, 98], "max_total_mass": [80, 98], "min_total_mass": [80, 98], "max_eta": [80, 98], "min_eta": [80, 98], "psd_file_xml_ifo_str": [80, 90, 98], "psd_file_xml_root_nam": [80, 90, 98], "psd_num_seg": [80, 90, 98], "strain_high_pass": [80, 90, 98], "strain_low_pass": [80, 90, 98], "taper_data": [80, 90, 98], "hdf_store": [80, 90, 98], "fake_strain_se": [80, 90, 98], "fake_strain_from_fil": [80, 90, 98], "sgburst_injection_fil": [80, 90, 98], "injection_scale_factor": [80, 90, 98], "injection_f_ref": [80, 90, 98], "injection_f_fin": [80, 90, 98], "normalize_strain": [80, 90, 98], "zpk_z": [80, 90, 98], "zpk_p": [80, 90, 98], "zpk_k": [80, 90, 98], "wit": [80, 90, 98], "witness_frame_typ": [80, 90, 98], "tf": [80, 90, 98], "witness_tf_fil": [80, 90, 98], "witness_filter_length": [80, 90, 98], "bklisco": [80, 98], "lrd": [80, 98], "hybridmeco": [80, 98], "imrphenombfin": [80, 98], "imrphenomcfin": [80, 98], "imrphenomdpeak": [80, 98], "eobnrv2rd": [80, 98], "eobnrv2hmrd": [80, 98], "seobnrv1rd": [80, 98], "seobnrv1peak": [80, 98], "seobnrv2rd": [80, 98], "seobnrv2peak": [80, 98], "seobnrv4rd": [80, 98], "seobnrv4peak": [80, 98], "seobnrv5peak": [80, 98], "ethinca_frequency_step": [80, 98], "70hz": [80, 98], "impos": [80, 98], "em": [80, 98], "minumum": [80, 98], "thrsehold": [80, 98], "0x7f3a4be471f0": [80, 98], "0x7f3a4be47310": [80, 98], "f_max": [80, 98], "1000hz": 80, "cours": 80, "regim": 80, "lose": [80, 93], "certainli": 80, "trust": 80, "zdhp": [80, 83], "encount": 80, "email": 80, "d89": 80, "024010": 80, "techniqu": 80, "surpris": 80, "testalign": 80, "bbh_template_bank": 80, "t1200307v4": 80, "example_geom_aligned_bank": 80, "accounting_group": [80, 91, 92, 93], "request_disk": 80, "On": [80, 87, 93], "pycbc_submit_dax": [80, 82, 91, 92, 93, 94, 95], "stack_dist": 80, "split_bank_num": 80, "intermediate_data_fil": 80, "metadata_fil": 80, "storage_path_bas": 80, "supplement_config_fil": 80, "max_ns_spin_mag": 80, "max_bh_spin_mag": 80, "workflow_nam": [80, 91, 92, 93, 95], "dax_fil": [80, 93, 95], "dax_file_directori": 80, "stack": 80, "threed": 80, "pycbc_tmpltbank_to_chi_param": 80, "pretend": 80, "conflict": 80, "000000": 80, "0x7f36c6c4ad30": 80, "0x7f36c6c4ae50": 80, "_output": [80, 93, 95], "input_map": [80, 93, 95], "yml": 80, "wall": [80, 93], "pannaral": 80, "apjl": 80, "francesco": 80, "taylorr2f4": 80, "difficult": [80, 88], "spend": 80, "disadvantag": [80, 90], "wait": 80, "thumb": 80, "20000": 80, "benefit": 80, "nevertheless": 80, "184027": 80, "195011": 80, "d80": 80, "104014": 80, "manca": 80, "vallisneri": 80, "d81": 80, "2010": 80, "024004": 80, "ajith": 80, "084041": 80, "privitera": 80, "024003": 80, "capano": 80, "d93": 80, "2016": 80, "absenc": 80, "okai": [80, 88, 96], "breakdown": [80, 95], "incorpor": 80, "imrphenomx": 80, "teststoch": 80, "2000000": 80, "batshit": 80, "bank_fupper_step": 80, "num_se": 80, "num_failed_cutoff": 80, "lai": [80, 85, 96], "5000000": 80, "0x7f411f74e790": 80, "0x7f411f74e8b0": 80, "lalapps__cbc__sbank_8py_sourc": 80, "sbankexecut": 80, "blank": [80, 93, 95], "entur": [80, 93, 95], "all_fil": [80, 88, 93, 95], "irrelev": 80, "900000000": 80, "900010000": 80, "repetit": 80, "recombin": [80, 87], "nbank": 80, "sbank_mchirp_bin": 80, "lalapps_cbc_sbank_hdf5_choose_mchirp_boundari": 80, "h5add": 80, "lalapps_cbc_sbank_hdf5_bankcombin": 80, "t1200307v4_h1": 80, "mratio": 80, "9899": [80, 88], "20000000": 80, "readder": 80, "500000000": 80, "20000000000": 80, "llwadd": [80, 93, 94, 95], "exercis": 80, "request_memori": [80, 92, 93, 95], "ram": 80, "get_env": 80, "cycle0": 80, "cycle1": 80, "cycle2": 80, "cycle3": 80, "cycle4": 80, "cycle5": 80, "cycle6": 80, "cycle7": 80, "cycle8": 80, "cycle9": 80, "cycle10": 80, "cycle11": 80, "cycle12": 80, "verbatim": 80, "clock": [80, 93], "abbott": 80, "122003": 80, "focu": 80, "scope": [80, 92], "reorder": 80, "idepend": 80, "bank_structur": 80, "inde": 80, "foreseen": [80, 89], "alter": 80, "hopefulli": 80, "bulk": 80, "decis": [80, 88], "uwm": [80, 88, 93], "ligovirgo": [80, 88, 93], "cbcnote": 80, "o2templatebank": 80, "tito": 80, "all_o1_c02_estim": 80, "average_psd": [80, 94], "11203200": 80, "1137254417": 80, "weird": [80, 96], "monitor": [80, 91, 92], "sbank_workflow": 80, "1915": 80, "seobnrv2_rom_doublespin_hi": [80, 83], "989": 80, "965": 80, "cycle13": 80, "cycle14": 80, "cycle15": 80, "cycle16": 80, "introduct": 81, "ldr": 81, "listen": 81, "pycbc_upload_xml_to_gracedb": 82, "client": 82, "contributor": 82, "branson": 82, "stephen": 82, "ran": [82, 95], "_result": 82, "page_foreground_xmlloudest": 82, "1130754617": 82, "1019335": 82, "novemb": 82, "hundr": 82, "coinc_inspir": 82, "coinc_ev": 82, "opencl": 83, "what_waveform": 83, "spintaylort1": 83, "spintaylort5": 83, "phenspintaylor": 83, "teobresum_rom": 83, "seobnrv2_opt": 83, "seobnrv3": 83, "seobnrv3_pert": 83, "seobnrv3_opt": 83, "seobnrv3_opt_rk4": 83, "seobnrv4_opt": 83, "seobnrv4p": 83, "seobnrv2t": 83, "seobnrv4t": 83, "seobnrv4_rom_nrtidalv2": 83, "seobnrv4_rom_nrtidalv2_nsbh": 83, "hgimri": 83, "imrphenoma": 83, "imrphenomd_nrtidalv2": 83, "imrphenomnsbh": 83, "imrphenomhm": 83, "imrphenompv2_nrtid": 83, "imrphenompv2_nrtidalv2": 83, "tayloret": 83, "eccentrictd": 83, "spindominatedwf": 83, "nr_hdf5": 83, "nrsur7dq2": 83, "seobnrv4hm": 83, "nrhybsur3dq8": 83, "imrphenomxa": 83, "imrphenompv3": 83, "imrphenompv3hm": 83, "imrphenomxp": 83, "imrphenomxphm": 83, "teobresum": 83, "imrphenomt": 83, "imrphenomthm": 83, "imrphenomtp": 83, "imrphenomtphm": 83, "seobnrv4hm_pa": 83, "pseobnrv4hm_pa": 83, "imrphenomxas_nrtidalv2": 83, "imrphenomxp_nrtidalv2": 83, "imrphenomxo4a": 83, "externalpython": 83, "seobnrv1_rom_effectivespin": 83, "seobnrv1_rom_doublespin": 83, "seobnrv2_rom_effectivespin": 83, "eobnrv2_rom": 83, "eobnrv2hm_rom": 83, "seobnrv4hm_rom": 83, "imrphenomd_nrtid": 83, "spintaylorf2": 83, "taylorf2nl": 83, "pretaylorf2": 83, "spintaylorf2_swapp": 83, "eccentricfd": 83, "taylorf2ecc": 83, "taylorf2nltid": 83, "taylorf2redspin": 83, "taylorf2redspintid": 83, "lackey_tidal_2013_seobnrv2_rom": 83, "seobnrv4_rom_nrtid": 83, "seobnrv4t_surrog": 83, "imrphenomp": 83, "spintaylort4fouri": 83, "spintaylort5fouri": 83, "nrsur4d2": 83, "seobnrv5_rom": 83, "taylorf2_interp": 83, "seobnrv1_rom_effectivespin_interp": 83, "seobnrv1_rom_doublespin_interp": 83, "seobnrv2_rom_effectivespin_interp": 83, "seobnrv2_rom_doublespin_interp": 83, "eobnrv2_rom_interp": 83, "eobnrv2hm_rom_interp": 83, "seobnrv2_rom_doublespin_hi_interp": 83, "seobnrv4_rom_interp": 83, "seobnrv4hm_rom_interp": 83, "imrphenomc_interp": 83, "imrphenomd_interp": 83, "imrphenompv2_interp": 83, "imrphenomd_nrtidal_interp": 83, "imrphenompv2_nrtidal_interp": 83, "imrphenomhm_interp": 83, "imrphenompv3hm_interp": 83, "imrphenomxhm_interp": 83, "imrphenomxphm_interp": 83, "spintaylorf2_interp": 83, "taylorf2nl_interp": 83, "pretaylorf2_interp": 83, "spintaylorf2_swapper_interp": 83, "det_h1": 83, "det_l1": 83, "det_v1": 83, "1192529720": 83, "signal_h1": 83, "signal_l1": 83, "signal_v1": 83, "sp": 83, "sc": 83, "4f": 83, "match_waveform": 83, "9534": 83, "exhibit": 83, "gibb": 83, "phenomenon": 83, "gibbs_phenomenon": 83, "sptild": 83, "sctild": 83, "notebook": 84, "freuqenc": 84, "useabl": 84, "distinguish": 84, "test_waveform": 84, "fpeak": 84, "my": [84, 93], "0j": 84, "hf": 84, "advertis": 84, "entry_point": 84, "revchirp": 84, "long_descript": 84, "descr": 84, "author_email": 84, "gmail": 84, "download_url": 84, "install_requir": 84, "py_modul": 84, "reverse_chirp_td": 84, "reverse_chirp_fd": 84, "audienc": 84, "research": 84, "natur": 84, "english": 84, "astronomi": 84, "licens": 84, "osi": 84, "approv": 84, "gnu": 84, "gplv3": 84, "approximant_nam": 84, "module_path": 84, "function_nam": 84, "capbl": 84, "poster": 85, "presenti": 85, "march": 85, "especi": [85, 88], "bri": 85, "databas": [85, 86, 88, 93, 94, 95, 96], "navig": [85, 95], "specfi": 86, "at_runtime_single_fram": [86, 88, 93, 94], "quickest": 86, "at_runtime_multiple_fram": 86, "at_runtime_single_cach": [86, 95], "at_runtime_multiple_cach": 86, "from_pregenerated_lcf_fil": 86, "at_runtim": [86, 88, 89, 93, 95], "urltyp": [86, 93, 94, 96], "symlink": 86, "basic_pegasu": 86, "configuart": 86, "no_test": [86, 88, 93, 95, 96], "discrep": 86, "update_tim": [86, 88, 93, 94], "on_gap": 86, "experiment": 87, "gaurante": 87, "stabil": 87, "infrastructur": 87, "familiar": 87, "slate": 87, "anlysi": 87, "example_hdf_post": 87, "8000": 87, "porport": 87, "pycbc_coinc_bank2hdf": [87, 93], "trig2hdf": [87, 93], "pycbc_coinc_trig2hdf": 87, "hdfinjfind": [87, 93], "pycbc_coinc_hdfinjfind": [87, 93], "pycbc_coinc_findtrig": [87, 93], "pycbc_coinc_statmap": [87, 93], "plot_sensit": [87, 93], "pycbc_page_sensit": [87, 93], "plot_foundmiss": [87, 93], "pycbc_page_foundmiss": [87, 93], "plot_snrifar": [87, 93], "pycbc_page_snrifar": [87, 93], "plot_snrchi": [87, 93], "pycbc_page_snrchi": [87, 93], "page_foreground": [87, 93], "pycbc_page_foreground": [87, 93], "hdf_trigger_merg": [87, 93], "significan": 87, "mark": 87, "total_mass": [87, 93], "89": [87, 93], "74": [87, 93], "120": [87, 93], "binless": 87, "similari": 87, "planner": [88, 93], "ihop": [88, 90, 98], "grew": 88, "huge": 88, "novic": 88, "obscur": 88, "specifii": 88, "repeatedli": [88, 93], "exe1": 88, "exe2": 88, "acheiv": 88, "accomod": 88, "OF": 88, "garbag": 88, "happili": 88, "THERE": 88, "NO": 88, "TO": [88, 92], "backport": 88, "macport": 88, "file1": 88, "file2": 88, "file3": 88, "filex": 88, "weekly_ahop": [88, 89, 93, 97, 98], "pipedown": [88, 89, 90], "critic": 88, "atrribut": 88, "svd": 88, "exenam": 88, "exename1": 88, "exename2": 88, "suffic": 88, "basedir": 88, "public_html": [88, 93], "l1_ldas_c02_l2": 88, "h2_ldas_c02_l2": 88, "sepcifi": 88, "demand": 88, "itf_sciencemod": 88, "segdb": 88, "s6": [88, 93, 96], "h1l1v1": [88, 93], "s6_cbc_lowmass_b_offlin": 88, "937473702": 88, "workflow_independent_ifo": [88, 90, 93, 94, 98], "matchedfilter_util": 88, "matchedfltr": [88, 98], "in_workflow": [88, 89, 93, 97], "time_slid": 88, "singular": [88, 93], "s6b": 88, "ab577e4e5dad14e46fce511cffdb04917836ba36": 88, "thinca": 88, "ligolw_thinca": 88, "bottom": [88, 93], "executable_nam": 88, "subset_tag": 88, "Such": 88, "token": 88, "massrang": 88, "exe3": 88, "exe5": 88, "1100": 88, "submiss": [89, 93, 95, 97], "injsectionnam": 89, "xxxx": 89, "dawn": [89, 98], "inspinj_8c": 89, "Of": [89, 90, 98], "THESE": [89, 90, 98], "961671943": [89, 98], "lscsoft_git": [89, 97, 98], "961585543": [89, 90, 97, 98], "injections_bnslininj_2134": 89, "taylort4threepointfivepn": 89, "837": 89, "155": [89, 93], "60000": 89, "obvious": 90, "hardcod": [90, 98], "inspiral_hip": [90, 98], "inspiral_exec": 90, "inflex": [90, 98], "inspiral_8c": 90, "rsq": 90, "971614817": 90, "69": [90, 98], "tmpltbank_19": 90, "971612833": 90, "971614881": 90, "real_8": [90, 95, 98], "971613852": 90, "spec": 90, "atten": [90, 98], "524288": 90, "968556757": 90, "3058132": 90, "subbank": 90, "findchirpsp": 90, "0002": 90, "update_progress": 90, "update_progress_fil": 90, "statement": 90, "reman": 90, "bank_veto_bank_fil": 90, "chisq_snr_threshold": 90, "chisq_delta": 90, "autochi": 90, "autochi_number_point": 90, "ifdo": 90, "theauto": 90, "autochi_strid": 90, "atwhich": 90, "usingpoint": 90, "beus": 90, "beforecalcul": 90, "willcom": 90, "snrtime": 90, "recomput": 90, "upsampl": 90, "keep_loudest_log_chirp_window": 90, "ln": 90, "keep_loudest_interv": 90, "keep_loudest_num": 90, "maxtim": 90, "checkpoint_exit_maxtim": 90, "exceed": 90, "checkpoint_exit_cod": 90, "multiprocessing_nprocess": 90, "thread": 90, "proc": 90, "setto": 90, "trig_start_tim": 90, "trig_end_tim": 90, "revert": 90, "pycbc_num_thread": 90, "processing_device_id": 90, "fft_backend": 90, "fftw_measure_level": 90, "fftw_threads_backend": 90, "openmp": 90, "pthread": 90, "unthread": 90, "wisdom": 90, "fftw_input_float_wisdom_fil": 90, "fftw_input_double_wisdom_fil": 90, "fftw_output_float_wisdom_fil": 90, "fftw_output_double_wisdom_fil": 90, "_import_system_wisdom": 90, "affin": 90, "cpu_affin": 90, "taskset": 90, "cpu_affinity_from_env": 90, "enivorn": 90, "chanc": 90, "rejector": 90, "injection_filter_rejector_chirp_time_window": 90, "injection_filter_rejector_match_threshold": 90, "coarsematch": 90, "injection_filter_rejector_coarsematch_deltaf": 90, "injection_filter_rejector_coarsematch_fmax": 90, "injection_filter_rejector_seg_buff": 90, "injection_filter_rejector_f_low": 90, "sgchisq_snr_threshold": 90, "sgchisq_loc": 90, "q1": 90, "offset1": 90, "q2": 90, "offset2": 90, "961592867": 90, "filetmpltbank": 90, "tmpltbank_01": 90, "961591486": 90, "1382": 90, "961592884": 90, "961591534": 90, "961590836": 90, "650": 90, "7349": 90, "inspiral_1": 90, "1333": 90, "workflow_config": [91, 92], "recoverd": 91, "redlin": 91, "visual": [91, 93, 95], "injections_config": 91, "gw170814": 91, "o2": [91, 92, 93, 96], "uniform_comoving_volum": [91, 92], "appreci": 91, "nrun": [91, 92], "create_inject": 91, "pycbc_inference_pp_table_summari": 91, "pycbc_inference_plot_pp": 91, "pycbc_inference_plot_inj_recoveri": 91, "pp_test": 91, "wildcard": 91, "make_inference_inj_workflow": 91, "bbh_inject": 91, "html_dir": [91, 92, 95], "983124": 91, "ninj": 91, "results_pag": [91, 92, 93, 94], "everytim": [91, 92], "aei": [91, 92, 93], "hannov": [91, 92], "talk": [91, 92], "admin": [91, 92], "proxi": [91, 92, 93], "create_inj_workflow": 91, "gw150914_gw170814": 92, "planck": 92, "10mpc": 92, "5gpc": 92, "mariginalized_phas": 92, "uncom": 92, "mind": 92, "20hz": 92, "ok": [92, 93], "o3": [92, 96], "1gpc": 92, "5e3": 92, "9e9": 92, "adequ": 92, "newer": [92, 98], "disfavor": 92, "pt": 92, "anali": 92, "combact": 92, "ve": [92, 96], "logv": 92, "h1frame": 92, "l1frame": 92, "h1_gwosc_o2_16khz_r1": 92, "l1_gwosc_o2_16khz_r1": 92, "v1_gwosc_o2_16khz_r1": 92, "v1frame": 92, "09": 92, "45utc": 92, "srcmasses_comoving_volum": 92, "413": 92, "43utc": 92, "1186741861": 92, "533": 92, "aren": [92, 93], "1126259200": 92, "1126259600": 92, "mass1_mass2": 92, "inc_dist": 92, "chip_chieff": 92, "run_pycbc_infer": 92, "pycbc_inference_plot_prior": 92, "pycbc_inference_table_summari": 92, "pycbc_inference_create_fit": 92, "pycbc_inference_plot_skymap": 92, "plot_spectrum": [92, 94], "pycbc_make_html_pag": [92, 93, 94], "pycbc_inference_plot_acceptance_r": 92, "pycbc_inference_plot_sampl": 92, "maxruntimehour": 92, "40g": 92, "request_cpu": [92, 94], "4g": 92, "maxpt": 92, "dyn": 92, "argur": 92, "978241": 92, "create_workflow": 92, "launch": [92, 94, 95], "webpag": [93, 95], "hang": 93, "condor_submit": [93, 95], "bns_spin": 93, "fake_strain": 93, "tend": 93, "h1_er_c00_agg": 93, "l1_er_c01_l1": 93, "emploi": 93, "er6": 93, "er6_gds_calib_strain": 93, "lho": 93, "speci": 93, "elimin": 93, "pregenerated_bank": [93, 98], "jveitch": 93, "mdc": 93, "bns_nonspin_30hz_earlyaligo": 93, "regener": [93, 98], "pregner": 93, "noop": [93, 97], "segment_queri": [93, 94, 95], "segments_from_cat": [93, 94, 95], "ligolw_segments_from_cats_dqsegdb": [93, 94, 95], "ligolw_combine_seg": [93, 94, 95], "statmap_inj": 93, "pycbc_coinc_statmap_inj": 93, "page_inject": 93, "pycbc_page_injt": 93, "plot_coinc_snrchi": 93, "pycbc_page_coinc_snrchi": 93, "plot_seg": [93, 94], "pycbc_page_seg": [93, 94], "complain": 93, "bnslininj": 93, "rememb": 93, "screw": 93, "random_numb": 93, "realiz": 93, "taylor": 93, "timesmlid": 93, "1000th": 93, "2000th": 93, "3000th": 93, "unimpact": 93, "injinj": 93, "050": 93, "bkg": 93, "sig": 93, "30000": 93, "mchirp_binless": 93, "mtotal_binless": 93, "spin_binless": 93, "chirpdistmchirp": 93, "mchirp_stat": 93, "chirpdistmchirp_stat": 93, "time_stat": 93, "10gb": 93, "subtitl": [93, 94], "s6d": 93, "s6d_chunk3": 93, "s6_run_pycbc_er8_pre_releas": 93, "data_s6": 93, "gps_times_s6d_big_dog_two_week": 93, "big": 93, "dog": 93, "db": 93, "globus_loc": 93, "tmpdir": 93, "temporari": 93, "pegasus_file_directori": 93, "mandat": 93, "run0011": 93, "isi": [93, 95], "albert": 93, "succeed": 93, "daemon": 93, "crash": 93, "nonsens": 93, "monitord": 93, "replai": 93, "pegasus_analyz": 93, "suceed": 93, "unsubmit": 93, "cbiwer": 93, "s6d_test": 93, "970012743": 93, "258000": 93, "9apn7x": 93, "79": 93, "83": 93, "ligolw_cbc_hardware_inj_page_id000020": 93, "post_script_fail": 93, "hostnam": 93, "avhe2010": 93, "test_workflow": 93, "970270743": 93, "ligolw_cbc_hardware_inj_pag": 93, "hardware_injection_summari": 93, "s6_cbc_hw_inject": 93, "930493015": 93, "42111800": 93, "hwinj_summary_cat_2": 93, "70012743": 93, "glob": 93, "combined_cat_2_veto_seg": 93, "inspiral_hipe_fu": 93, "ll_data_cat_2_veto": 93, "sire_first": 93, "hwinjpagejob": 93, "id000020": 93, "kickstart": 93, "reciev": 93, "mistaken": [93, 95], "plain": 93, "logical_file_nam": 93, "physical_file_url": 93, "resid": 93, "uri": 93, "hint": 93, "beacus": 93, "syracus": 93, "vetotime_cat3": 93, "1169107218": 93, "1066800": 93, "dbrown": 93, "_analysis_tim": 93, "01_segment_data": 93, "116912": 93, "inspiral_full_data_job0": 93, "1169120586": 93, "1662": 93, "inspiral_full_data_job1": 93, "mechan": 93, "sugwg": 93, "prior_data": [93, 95], "egrep": 93, "menu": 93, "06": 93, "editor": 93, "favorit": 93, "grep": [93, 95], "sed": 93, "awk": 93, "perl": 93, "tmp": [93, 95], "configr": 93, "vetotim": 93, "cumulative_cat_12h_veto_seg": 93, "injfind": [93, 95], "foreground_censor": 93, "acomplish": 93, "reuse_cach": 93, "occasion": 93, "main_id0000001": 93, "pwd": 93, "partial_workflow": 93, "inspiral_full_data": 93, "merge_full_data": 93, "consult": 93, "expert": 93, "gridftp": 93, "blog": 93, "dokuwiki": 93, "doku": 93, "php": 93, "researchgroup": 93, "sl7_cluster_setup": 93, "htcondor": 93, "sysadmin": 93, "publicli": 93, "told": 93, "has_singular": 93, "is_glidein": 93, "lvk": 93, "authent": 93, "has_ligo_fram": 93, "schedul": 93, "enhanc": 93, "follw": 93, "periodic_hold": 93, "jobstatu": 93, "currenttim": 93, "enteredcurrentstatu": 93, "periodic_releas": 93, "holdreasoncod": 93, "numjobstart": 93, "periodic_remov": 93, "bypass": 93, "e02dab8c": 93, "singularityimag": 93, "interfer": 93, "onward": 93, "varnam": 93, "invok": 93, "initializemodulesenv": 93, "singularitycleanenv": 93, "getenv": 93, "xsede": 93, "desired_xsede_sit": 93, "comet": 93, "wherev": [93, 94], "desired_sit": 93, "devot": 94, "pycbc_calculate_psd": 94, "pycbc_average_psd": 94, "er8": [94, 95], "1123858817": 94, "1125217722": 94, "no_intermedi": 94, "l1_hoft_c00": [94, 95, 96], "d06231daa8edf28c4760106599f86c8d8659cc3": 94, "hoft_c00_er8b_cbc": [94, 95], "12h": 94, "all_single_ifo_tim": 94, "calculate_psd": 94, "pycbc_merge_psd": 94, "plot_rang": 94, "pycbc_plot_rang": 94, "page_segt": 94, "pycbc_page_segt": 94, "page_segplot": 94, "pycbc_page_segplot": 94, "run_nam": 94, "suppos": 94, "accounting_tag": 94, "webag": 95, "pycbc_make_grb_summary_pag": 95, "gradual": 95, "pycbc_pygrb_pp_workflow": 95, "serparatli": 95, "compris": [95, 96], "8th": 95, "exttrig_seg": 95, "5264": 95, "quanta": 95, "jitter_skyloc": 95, "ligolw_cbc_jitter_skyloc": 95, "ligolw_cbc_align_total_spin": 95, "split_inspinj": 95, "em_bright_filt": 95, "trig_combin": 95, "pylal_cbc_cohptf_trig_combin": 95, "trig_clust": 95, "pylal_cbc_cohptf_trig_clust": 95, "pylal_cbc_cohptf_injfind": 95, "injcombin": 95, "pylal_cbc_cohptf_injcombin": 95, "sbv_plotter": 95, "pylal_cbc_cohptf_sbv_plott": 95, "pylal_cbc_cohptf_effici": 95, "inj_effici": 95, "horizon_dist": 95, "pylal_cbc_cohptf_inspiral_horizon": 95, "secion": 95, "hunt": 95, "coherent_inject": 95, "2000m": 95, "generalis": 95, "protect": 95, "analysis_er8": 95, "injections_er8": 95, "postprocessing_er8": 95, "data_er8b": 95, "offline_er8": 95, "config_file_1": 95, "config_file_2": 95, "readi": [95, 96], "perhap": 95, "grb_time": 95, "1125614344": 95, "grb_name": 95, "150906b": 95, "159": 95, "239": 95, "603": 95, "lal_src": 95, "data_er8a": 95, "pygrb_offlin": 95, "arcca": 95, "pegeasu": 95, "seprat": 95, "chart": 95, "pplotsdir": 95, "htmldir": 95, "pegasus_plot": 95, "snapshot": 95, "pie": 95, "radio": 95, "gantt": 95, "wouldn": 95, "comprehens": 96, "db20ca71e65b54c0b073fd3d84d5f43fd822779": 96, "cbc_veto_definer_cleaned_c02_o2_1164556817": 96, "23176801": 96, "cat_2": 96, "cat_h": 96, "cat_1": 96, "ifonam": 96, "said": 96, "flag_1": 96, "flag_2": 96, "envisag": 96, "won": 96, "meant": 96, "altogeth": 96, "cat_3": 96, "tradition": 96, "segment_start": 96, "segment_end": 96, "shrink": 96, "disappear": 96, "segment_defin": 96, "untru": 97, "unpredicat": 97, "sort_frequency_cutoff": 97, "executables_mast": 97, "961671944": 97, "961585551": [97, 98], "tmpltbank_splittable_bank0": 97, "tmpltbank_splittable_bank1": 97, "tmpltbank_splittable_bank2": 97, "tmpltbank_splittable_bank3": 97, "tmpltbank_splittable_bank4": 97, "workflow_independent_ifos_nodata": 98, "workflow_no_ifo_variation_nodata": 98, "templtbank": 98, "length_in_second": 98, "tmpltbank_8c": 98, "961587599": 98}, "objects": {"": [[53, 0, 0, "-", "pycbc"]], "pycbc": [[53, 1, 1, "", "LogFormatter"], [53, 0, 0, "-", "bin_utils"], [53, 0, 0, "-", "boundaries"], [54, 0, 0, "-", "catalog"], [53, 0, 0, "-", "conversions"], [53, 0, 0, "-", "coordinates"], [53, 0, 0, "-", "cosmology"], [53, 0, 0, "-", "detector"], [55, 0, 0, "-", "distributions"], [53, 0, 0, "-", "dq"], [56, 0, 0, "-", "events"], [57, 0, 0, "-", "fft"], [58, 0, 0, "-", "filter"], [59, 0, 0, "-", "frame"], [53, 5, 1, "", "gps_now"], [60, 0, 0, "-", "inference"], [53, 5, 1, "", "init_logging"], [65, 0, 0, "-", "inject"], [66, 0, 0, "-", "io"], [53, 0, 0, "-", "libutils"], [53, 5, 1, "", "makedir"], [53, 0, 0, "-", "mchirp_area"], [67, 0, 0, "-", "neutron_stars"], [68, 0, 0, "-", "noise"], [53, 0, 0, "-", "opt"], [53, 0, 0, "-", "pnutils"], [53, 0, 0, "-", "pool"], [69, 0, 0, "-", "population"], [70, 0, 0, "-", "psd"], [53, 5, 1, "", "random_string"], [53, 0, 0, "-", "rate"], [71, 0, 0, "-", "results"], [53, 0, 0, "-", "scheme"], [53, 0, 0, "-", "sensitivity"], [72, 0, 0, "-", "strain"], [73, 0, 0, "-", "tmpltbank"], [53, 0, 0, "-", "transforms"], [74, 0, 0, "-", "types"], [53, 0, 0, "-", "version"], [75, 0, 0, "-", "vetoes"], [76, 0, 0, "-", "waveform"], [77, 0, 0, "-", "workflow"]], "pycbc.LogFormatter": [[53, 2, 1, "", "converter"], [53, 2, 1, "", "formatTime"]], "pycbc.bin_utils": [[53, 1, 1, "", "BinnedArray"], [53, 1, 1, "", "BinnedRatios"], [53, 1, 1, "", "Bins"], [53, 1, 1, "", "IrregularBins"], [53, 1, 1, "", "LinearBins"], [53, 1, 1, "", "LinearPlusOverflowBins"], [53, 1, 1, "", "LogarithmicBins"], [53, 1, 1, "", "LogarithmicPlusOverflowBins"], [53, 1, 1, "", "NDBins"]], "pycbc.bin_utils.BinnedArray": [[53, 2, 1, "", "argmax"], [53, 2, 1, "", "argmin"], [53, 2, 1, "", "centres"], [53, 2, 1, "", "copy"], [53, 2, 1, "", "logregularize"]], "pycbc.bin_utils.BinnedRatios": [[53, 2, 1, "", "bins"], [53, 2, 1, "", "centres"], [53, 2, 1, "", "incdenominator"], [53, 2, 1, "", "incnumerator"], [53, 2, 1, "", "logregularize"], [53, 2, 1, "", "ratio"], [53, 2, 1, "", "regularize"]], "pycbc.bin_utils.Bins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.IrregularBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LinearBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LinearPlusOverflowBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LogarithmicBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.LogarithmicPlusOverflowBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.bin_utils.NDBins": [[53, 2, 1, "", "centres"], [53, 2, 1, "", "lower"], [53, 2, 1, "", "upper"]], "pycbc.boundaries": [[53, 1, 1, "", "Bounds"], [53, 1, 1, "", "ClosedBound"], [53, 1, 1, "", "OpenBound"], [53, 1, 1, "", "ReflectedBound"], [53, 5, 1, "", "apply_cyclic"], [53, 5, 1, "", "reflect_well"]], "pycbc.boundaries.Bounds": [[53, 2, 1, "", "apply_conditions"], [53, 2, 1, "", "contains_conditioned"], [53, 3, 1, "", "cyclic"], [53, 3, 1, "", "max"], [53, 3, 1, "", "min"]], "pycbc.boundaries.ClosedBound": [[53, 2, 1, "", "larger"], [53, 4, 1, "", "name"], [53, 2, 1, "", "smaller"]], "pycbc.boundaries.OpenBound": [[53, 2, 1, "", "larger"], [53, 4, 1, "", "name"], [53, 2, 1, "", "smaller"]], "pycbc.boundaries.ReflectedBound": [[53, 4, 1, "", "name"], [53, 2, 1, "", "reflect"], [53, 2, 1, "", "reflect_left"], [53, 2, 1, "", "reflect_right"]], "pycbc.catalog": [[54, 1, 1, "", "Catalog"], [54, 1, 1, "", "Merger"], [54, 0, 0, "-", "catalog"]], "pycbc.catalog.Catalog": [[54, 2, 1, "", "median1d"]], "pycbc.catalog.Merger": [[54, 2, 1, "", "median1d"], [54, 2, 1, "", "strain"]], "pycbc.catalog.catalog": [[54, 5, 1, "", "get_source"], [54, 5, 1, "", "list_catalogs"]], "pycbc.conversions": [[53, 5, 1, "", "chi_a"], [53, 5, 1, "", "chi_eff"], [53, 5, 1, "", "chi_eff_from_spherical"], [53, 5, 1, "", "chi_p"], [53, 5, 1, "", "chi_p_from_spherical"], [53, 5, 1, "", "chi_p_from_xi1_xi2"], [53, 5, 1, "", "chi_perp_from_mass1_mass2_xi2"], [53, 5, 1, "", "chi_perp_from_spinx_spiny"], [53, 5, 1, "", "chirp_distance"], [53, 5, 1, "", "det_tc"], [53, 5, 1, "", "dquadmon_from_lambda"], [53, 5, 1, "", "eta_from_mass1_mass2"], [53, 5, 1, "", "eta_from_q"], [53, 5, 1, "", "eta_from_tau0_tau3"], [53, 5, 1, "", "final_mass_from_f0_tau"], [53, 5, 1, "", "final_mass_from_initial"], [53, 5, 1, "", "final_spin_from_f0_tau"], [53, 5, 1, "", "final_spin_from_initial"], [53, 5, 1, "", "freq_from_final_mass_spin"], [53, 5, 1, "", "freqlmn_from_other_lmn"], [53, 5, 1, "", "invq_from_mass1_mass2"], [53, 5, 1, "", "lambda_from_mass_tov_file"], [53, 5, 1, "", "lambda_tilde"], [53, 5, 1, "", "mass1_from_mass2_eta"], [53, 5, 1, "", "mass1_from_mchirp_eta"], [53, 5, 1, "", "mass1_from_mchirp_q"], [53, 5, 1, "", "mass1_from_mtotal_eta"], [53, 5, 1, "", "mass1_from_mtotal_q"], [53, 5, 1, "", "mass1_from_tau0_tau3"], [53, 5, 1, "", "mass2_from_mass1_eta"], [53, 5, 1, "", "mass2_from_mchirp_eta"], [53, 5, 1, "", "mass2_from_mchirp_q"], [53, 5, 1, "", "mass2_from_mtotal_eta"], [53, 5, 1, "", "mass2_from_mtotal_q"], [53, 5, 1, "", "mass2_from_tau0_tau3"], [53, 5, 1, "", "mchirp_from_mass1_mass2"], [53, 5, 1, "", "mchirp_from_tau0"], [53, 5, 1, "", "mtotal_from_mass1_mass2"], [53, 5, 1, "", "mtotal_from_mchirp_eta"], [53, 5, 1, "", "mtotal_from_tau0_tau3"], [53, 5, 1, "", "nltides_gw_phase_diff_isco"], [53, 5, 1, "", "optimal_dec_from_detector"], [53, 5, 1, "", "optimal_ra_from_detector"], [53, 5, 1, "", "phi1_from_phi_a_phi_s"], [53, 5, 1, "", "phi2_from_phi_a_phi_s"], [53, 5, 1, "", "phi_a"], [53, 5, 1, "", "phi_from_spinx_spiny"], [53, 5, 1, "", "phi_s"], [53, 5, 1, "", "primary_mass"], [53, 5, 1, "", "primary_spin"], [53, 5, 1, "", "primary_xi"], [53, 5, 1, "", "q_from_mass1_mass2"], [53, 5, 1, "", "remnant_mass_from_mass1_mass2_cartesian_spin_eos"], [53, 5, 1, "", "remnant_mass_from_mass1_mass2_spherical_spin_eos"], [53, 5, 1, "", "secondary_mass"], [53, 5, 1, "", "secondary_spin"], [53, 5, 1, "", "secondary_xi"], [53, 5, 1, "", "snr_from_loglr"], [53, 5, 1, "", "spin1x_from_xi1_phi_a_phi_s"], [53, 5, 1, "", "spin1y_from_xi1_phi_a_phi_s"], [53, 5, 1, "", "spin1z_from_mass1_mass2_chi_eff_chi_a"], [53, 5, 1, "", "spin2x_from_mass1_mass2_xi2_phi_a_phi_s"], [53, 5, 1, "", "spin2y_from_mass1_mass2_xi2_phi_a_phi_s"], [53, 5, 1, "", "spin2z_from_mass1_mass2_chi_eff_chi_a"], [53, 5, 1, "", "spin_from_pulsar_freq"], [53, 5, 1, "", "tau0_from_mass1_mass2"], [53, 5, 1, "", "tau0_from_mchirp"], [53, 5, 1, "", "tau0_from_mtotal_eta"], [53, 5, 1, "", "tau3_from_mass1_mass2"], [53, 5, 1, "", "tau3_from_mtotal_eta"], [53, 5, 1, "", "tau_from_final_mass_spin"], [53, 5, 1, "", "taulmn_from_other_lmn"], [53, 5, 1, "", "xi1_from_spin1x_spin1y"], [53, 5, 1, "", "xi2_from_mass1_mass2_spin2x_spin2y"]], "pycbc.coordinates": [[53, 5, 1, "", "cartesian_to_spherical"], [53, 5, 1, "", "cartesian_to_spherical_azimuthal"], [53, 5, 1, "", "cartesian_to_spherical_polar"], [53, 5, 1, "", "cartesian_to_spherical_rho"], [53, 5, 1, "", "spherical_to_cartesian"]], "pycbc.cosmology": [[53, 5, 1, "", "cosmological_quantity_from_redshift"], [53, 5, 1, "", "distance_from_comoving_volume"], [53, 5, 1, "", "redshift"], [53, 5, 1, "", "redshift_from_comoving_volume"]], "pycbc.detector": [[53, 1, 1, "", "Detector"], [53, 1, 1, "", "LISA"], [53, 5, 1, "", "add_detector_on_earth"], [53, 5, 1, "", "get_available_detectors"], [53, 5, 1, "", "gmst_accurate"], [53, 5, 1, "", "load_detector_config"], [53, 5, 1, "", "overhead_antenna_pattern"], [53, 5, 1, "", "ppdets"]], "pycbc.detector.Detector": [[53, 2, 1, "", "antenna_pattern"], [53, 2, 1, "", "effective_distance"], [53, 2, 1, "", "get_icrs_pos"], [53, 2, 1, "", "gmst_estimate"], [53, 2, 1, "", "lal"], [53, 2, 1, "", "light_travel_time_to_detector"], [53, 2, 1, "", "optimal_orientation"], [53, 2, 1, "", "project_wave"], [53, 2, 1, "", "set_gmst_reference"], [53, 2, 1, "", "time_delay_from_detector"], [53, 2, 1, "", "time_delay_from_earth_center"], [53, 2, 1, "", "time_delay_from_location"]], "pycbc.detector.LISA": [[53, 2, 1, "", "get_gcrs_pos"], [53, 2, 1, "", "get_pos"], [53, 2, 1, "", "time_delay_from_detector"], [53, 2, 1, "", "time_delay_from_earth_center"], [53, 2, 1, "", "time_delay_from_location"]], "pycbc.distributions": [[55, 0, 0, "-", "angular"], [55, 0, 0, "-", "arbitrary"], [55, 0, 0, "-", "bounded"], [55, 0, 0, "-", "constraints"], [55, 0, 0, "-", "external"], [55, 0, 0, "-", "fixedsamples"], [55, 0, 0, "-", "gaussian"], [55, 0, 0, "-", "joint"], [55, 0, 0, "-", "mass"], [55, 0, 0, "-", "power_law"], [55, 0, 0, "-", "qnm"], [55, 5, 1, "", "read_constraints_from_config"], [55, 5, 1, "", "read_distributions_from_config"], [55, 5, 1, "", "read_params_from_config"], [55, 0, 0, "-", "sky_location"], [55, 0, 0, "-", "spins"], [55, 0, 0, "-", "uniform"], [55, 0, 0, "-", "uniform_log"], [55, 0, 0, "-", "utils"]], "pycbc.distributions.angular": [[55, 1, 1, "", "CosAngle"], [55, 1, 1, "", "SinAngle"], [55, 1, 1, "", "UniformAngle"], [55, 1, 1, "", "UniformSolidAngle"]], "pycbc.distributions.angular.CosAngle": [[55, 4, 1, "", "name"]], "pycbc.distributions.angular.SinAngle": [[55, 4, 1, "", "name"]], "pycbc.distributions.angular.UniformAngle": [[55, 2, 1, "", "apply_boundary_conditions"], [55, 3, 1, "", "domain"], [55, 2, 1, "", "from_config"], [55, 4, 1, "", "name"]], "pycbc.distributions.angular.UniformSolidAngle": [[55, 2, 1, "", "apply_boundary_conditions"], [55, 3, 1, "", "azimuthal_angle"], [55, 3, 1, "", "bounds"], [55, 2, 1, "", "from_config"], [55, 4, 1, "", "name"], [55, 3, 1, "", "polar_angle"]], "pycbc.distributions.arbitrary": [[55, 1, 1, "", "Arbitrary"], [55, 1, 1, "", "FromFile"]], "pycbc.distributions.arbitrary.Arbitrary": [[55, 2, 1, "", "from_config"], [55, 2, 1, "", "get_kde_from_arrays"], [55, 3, 1, "", "kde"], [55, 4, 1, "", "name"], [55, 3, 1, "", "params"], [55, 2, 1, "", "rvs"], [55, 2, 1, "", "set_bandwidth"]], "pycbc.distributions.arbitrary.FromFile": [[55, 3, 1, "", "filename"], [55, 2, 1, "", "from_config"], [55, 2, 1, "", "get_arrays_from_file"], [55, 4, 1, "", "kde"], [55, 4, 1, "", "lognorm"], [55, 4, 1, "", "name"], [55, 4, 1, "", "norm"]], "pycbc.distributions.bounded": [[55, 1, 1, "", "BoundedDist"], [55, 5, 1, "", "bounded_from_config"], [55, 5, 1, "", "get_param_bounds_from_config"]], "pycbc.distributions.bounded.BoundedDist": [[55, 2, 1, "", "apply_boundary_conditions"], [55, 3, 1, "", "bounds"], [55, 2, 1, "", "cdfinv"], [55, 2, 1, "", "from_config"], [55, 2, 1, "", "logpdf"], [55, 3, 1, "", "params"], [55, 2, 1, "", "pdf"], [55, 2, 1, "", "rvs"]], "pycbc.distributions.constraints": [[55, 1, 1, "", "Constraint"], [55, 1, 1, "", "SupernovaeConvexHull"]], "pycbc.distributions.constraints.Constraint": [[55, 4, 1, "", "name"]], "pycbc.distributions.constraints.SupernovaeConvexHull": [[55, 4, 1, "", "name"], [55, 4, 1, "", "required_parameters"]], "pycbc.distributions.external": [[55, 1, 1, "", "DistributionFunctionFromFile"], [55, 1, 1, "", "External"]], "pycbc.distributions.external.DistributionFunctionFromFile": [[55, 4, 1, "", "name"]], "pycbc.distributions.external.External": [[55, 2, 1, "", "apply_boundary_conditions"], [55, 2, 1, "", "from_config"], [55, 4, 1, "", "name"], [55, 2, 1, "", "rvs"]], "pycbc.distributions.fixedsamples": [[55, 1, 1, "", "FixedSamples"]], "pycbc.distributions.fixedsamples.FixedSamples": [[55, 2, 1, "", "apply_boundary_conditions"], [55, 2, 1, "", "cdfinv"], [55, 2, 1, "", "from_config"], [55, 4, 1, "", "name"], [55, 2, 1, "", "rvs"]], "pycbc.distributions.gaussian": [[55, 1, 1, "", "Gaussian"]], "pycbc.distributions.gaussian.Gaussian": [[55, 2, 1, "", "cdf"], [55, 2, 1, "", "from_config"], [55, 3, 1, "", "mean"], [55, 4, 1, "", "name"], [55, 3, 1, "", "var"]], "pycbc.distributions.joint": [[55, 1, 1, "", "JointDistribution"]], "pycbc.distributions.joint.JointDistribution": [[55, 2, 1, "", "apply_boundary_conditions"], [55, 3, 1, "", "bounds"], [55, 2, 1, "", "cdfinv"], [55, 4, 1, "", "constraints"], [55, 2, 1, "", "contains"], [55, 3, 1, "", "cyclic"], [55, 4, 1, "", "distributions"], [55, 4, 1, "", "name"], [55, 2, 1, "", "rvs"], [55, 4, 1, "", "variable_args"], [55, 3, 1, "", "well_reflected"], [55, 2, 1, "", "within_constraints"]], "pycbc.distributions.mass": [[55, 1, 1, "", "MchirpfromUniformMass1Mass2"], [55, 1, 1, "", "QfromUniformMass1Mass2"]], "pycbc.distributions.mass.MchirpfromUniformMass1Mass2": [[55, 4, 1, "", "name"]], "pycbc.distributions.mass.QfromUniformMass1Mass2": [[55, 2, 1, "", "from_config"], [55, 3, 1, "", "lognorm"], [55, 4, 1, "", "name"], [55, 3, 1, "", "norm"], [55, 2, 1, "", "rvs"]], "pycbc.distributions.power_law": [[55, 1, 1, "", "UniformPowerLaw"], [55, 1, 1, "", "UniformRadius"]], "pycbc.distributions.power_law.UniformPowerLaw": [[55, 4, 1, "", "dim"], [55, 2, 1, "", "from_config"], [55, 3, 1, "", "lognorm"], [55, 4, 1, "", "name"], [55, 3, 1, "", "norm"]], "pycbc.distributions.power_law.UniformRadius": [[55, 4, 1, "", "name"]], "pycbc.distributions.qnm": [[55, 1, 1, "", "UniformF0Tau"]], "pycbc.distributions.qnm.UniformF0Tau": [[55, 2, 1, "", "from_config"], [55, 4, 1, "", "name"], [55, 2, 1, "", "rvs"]], "pycbc.distributions.sky_location": [[55, 1, 1, "", "FisherSky"], [55, 1, 1, "", "UniformSky"]], "pycbc.distributions.sky_location.FisherSky": [[55, 2, 1, "", "from_config"], [55, 4, 1, "", "name"], [55, 3, 1, "", "params"], [55, 2, 1, "", "rvs"]], "pycbc.distributions.sky_location.UniformSky": [[55, 4, 1, "", "name"]], "pycbc.distributions.spins": [[55, 1, 1, "", "IndependentChiPChiEff"]], "pycbc.distributions.spins.IndependentChiPChiEff": [[55, 2, 1, "", "apply_boundary_conditions"], [55, 2, 1, "", "from_config"], [55, 4, 1, "", "name"], [55, 2, 1, "", "rvs"]], "pycbc.distributions.uniform": [[55, 1, 1, "", "Uniform"]], "pycbc.distributions.uniform.Uniform": [[55, 2, 1, "", "from_config"], [55, 3, 1, "", "lognorm"], [55, 4, 1, "", "name"], [55, 3, 1, "", "norm"]], "pycbc.distributions.uniform_log": [[55, 1, 1, "", "UniformLog10"]], "pycbc.distributions.uniform_log.UniformLog10": [[55, 4, 1, "", "name"]], "pycbc.distributions.utils": [[55, 5, 1, "", "draw_samples_from_config"], [55, 5, 1, "", "prior_from_config"]], "pycbc.dq": [[53, 5, 1, "", "parse_flag_str"], [53, 5, 1, "", "parse_veto_definer"], [53, 5, 1, "", "query_cumulative_flags"], [53, 5, 1, "", "query_dqsegdb2"], [53, 5, 1, "", "query_flag"], [53, 5, 1, "", "query_str"]], "pycbc.events": [[56, 0, 0, "-", "coherent"], [56, 0, 0, "-", "coinc"], [56, 0, 0, "-", "coinc_rate"], [56, 0, 0, "-", "cuts"], [56, 0, 0, "-", "eventmgr"], [56, 0, 0, "-", "eventmgr_cython"], [56, 0, 0, "-", "ranking"], [56, 0, 0, "-", "significance"], [56, 0, 0, "-", "simd_threshold_cython"], [56, 0, 0, "-", "single"], [56, 0, 0, "-", "stat"], [56, 0, 0, "-", "threshold_cpu"], [56, 0, 0, "-", "trigger_fits"], [56, 0, 0, "-", "triggers"], [56, 0, 0, "-", "veto"]], "pycbc.events.coherent": [[56, 5, 1, "", "coherent_snr"], [56, 5, 1, "", "coincident_snr"], [56, 5, 1, "", "get_coinc_indexes"], [56, 5, 1, "", "get_coinc_triggers"], [56, 5, 1, "", "get_projection_matrix"], [56, 5, 1, "", "network_chisq"], [56, 5, 1, "", "null_snr"], [56, 5, 1, "", "reweight_snr_by_null"], [56, 5, 1, "", "reweightedsnr_cut"]], "pycbc.events.coinc": [[56, 1, 1, "", "CoincExpireBuffer"], [56, 1, 1, "", "LiveCoincTimeslideBackgroundEstimator"], [56, 1, 1, "", "MultiRingBuffer"], [56, 5, 1, "", "background_bin_from_string"], [56, 5, 1, "", "cluster_coincs"], [56, 5, 1, "", "cluster_coincs_multiifo"], [56, 5, 1, "", "cluster_over_time"], [56, 5, 1, "", "mean_if_greater_than_zero"], [56, 5, 1, "", "time_coincidence"], [56, 5, 1, "", "time_multi_coincidence"], [56, 5, 1, "", "timeslide_durations"]], "pycbc.events.coinc.CoincExpireBuffer": [[56, 2, 1, "", "add"], [56, 3, 1, "", "data"], [56, 2, 1, "", "increment"], [56, 3, 1, "", "nbytes"], [56, 2, 1, "", "num_greater"], [56, 2, 1, "", "remove"]], "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator": [[56, 2, 1, "", "add_singles"], [56, 3, 1, "", "background_time"], [56, 2, 1, "", "backout_last"], [56, 2, 1, "", "from_cli"], [56, 2, 1, "", "ifar"], [56, 2, 1, "", "insert_args"], [56, 2, 1, "", "pick_best_coinc"], [56, 2, 1, "", "restore_state"], [56, 2, 1, "", "save_state"], [56, 2, 1, "", "set_singles_buffer"]], "pycbc.events.coinc.MultiRingBuffer": [[56, 2, 1, "", "add"], [56, 2, 1, "", "advance_time"], [56, 2, 1, "", "check_expired_triggers"], [56, 2, 1, "", "data"], [56, 2, 1, "", "discard_last"], [56, 2, 1, "", "expire_vector"], [56, 3, 1, "", "filled_time"], [56, 3, 1, "", "nbytes"], [56, 2, 1, "", "num_elements"], [56, 2, 1, "", "update_valid_start"], [56, 2, 1, "", "valid_slice"]], "pycbc.events.coinc_rate": [[56, 5, 1, "", "combination_noise_lograte"], [56, 5, 1, "", "combination_noise_rate"], [56, 5, 1, "", "multiifo_noise_coincident_area"], [56, 5, 1, "", "multiifo_noise_lograte"], [56, 5, 1, "", "multiifo_signal_coincident_area"]], "pycbc.events.cuts": [[56, 5, 1, "", "apply_template_cuts"], [56, 5, 1, "", "apply_template_fit_cut"], [56, 5, 1, "", "apply_trigger_cuts"], [56, 5, 1, "", "check_update_cuts"], [56, 5, 1, "", "convert_inputstr"], [56, 5, 1, "", "ingest_cuts_option_group"], [56, 5, 1, "", "insert_cuts_option_group"], [56, 5, 1, "", "sigma_multiple_cut_thresh"]], "pycbc.events.eventmgr": [[56, 1, 1, "", "EventManager"], [56, 1, 1, "", "EventManagerCoherent"], [56, 1, 1, "", "EventManagerMultiDet"], [56, 1, 1, "", "ThresholdCluster"], [56, 5, 1, "", "cluster_reduce"], [56, 5, 1, "", "findchirp_cluster_over_window"], [56, 5, 1, "", "threshold"], [56, 5, 1, "", "threshold_and_cluster"], [56, 5, 1, "", "threshold_only"], [56, 5, 1, "", "threshold_real_numpy"]], "pycbc.events.eventmgr.EventManager": [[56, 2, 1, "", "add_template_events"], [56, 2, 1, "", "add_template_params"], [56, 2, 1, "", "chisq_threshold"], [56, 2, 1, "", "cluster_template_events"], [56, 2, 1, "", "consolidate_events"], [56, 2, 1, "", "finalize_events"], [56, 2, 1, "", "finalize_template_events"], [56, 2, 1, "", "from_multi_ifo_interface"], [56, 2, 1, "", "keep_loudest_in_interval"], [56, 2, 1, "", "keep_near_injection"], [56, 2, 1, "", "make_output_dir"], [56, 2, 1, "", "new_template"], [56, 2, 1, "", "newsnr_threshold"], [56, 2, 1, "", "restore_state"], [56, 2, 1, "", "save_performance"], [56, 2, 1, "", "save_state"], [56, 2, 1, "", "write_events"], [56, 2, 1, "", "write_to_hdf"]], "pycbc.events.eventmgr.EventManagerCoherent": [[56, 2, 1, "", "add_template_events_to_network"], [56, 2, 1, "", "add_template_network_events"], [56, 2, 1, "", "cluster_template_network_events"], [56, 2, 1, "", "finalize_template_events"], [56, 2, 1, "", "write_to_hdf"]], "pycbc.events.eventmgr.EventManagerMultiDet": [[56, 2, 1, "", "cluster_template_events_single_ifo"], [56, 2, 1, "", "finalize_template_events"], [56, 2, 1, "", "write_events"], [56, 2, 1, "", "write_to_hdf"]], "pycbc.events.eventmgr_cython": [[56, 5, 1, "", "coincbuffer_expireelements"], [56, 5, 1, "", "coincbuffer_numgreater"], [56, 5, 1, "", "findchirp_cluster_over_window_cython"], [56, 5, 1, "", "logsignalrateinternals_compute2detrate"], [56, 5, 1, "", "logsignalrateinternals_computepsignalbins"], [56, 5, 1, "", "timecluster_cython"], [56, 5, 1, "", "timecoincidence_constructfold"], [56, 5, 1, "", "timecoincidence_constructidxs"], [56, 5, 1, "", "timecoincidence_findidxlen"], [56, 5, 1, "", "timecoincidence_getslideint"]], "pycbc.events.ranking": [[56, 5, 1, "", "effsnr"], [56, 5, 1, "", "get_newsnr"], [56, 5, 1, "", "get_newsnr_sgveto"], [56, 5, 1, "", "get_newsnr_sgveto_psdvar"], [56, 5, 1, "", "get_newsnr_sgveto_psdvar_scaled"], [56, 5, 1, "", "get_newsnr_sgveto_psdvar_scaled_threshold"], [56, 5, 1, "", "get_newsnr_sgveto_psdvar_threshold"], [56, 5, 1, "", "get_sngls_ranking_from_trigs"], [56, 5, 1, "", "get_snr"], [56, 5, 1, "", "newsnr"], [56, 5, 1, "", "newsnr_sgveto"], [56, 5, 1, "", "newsnr_sgveto_psdvar"], [56, 5, 1, "", "newsnr_sgveto_psdvar_scaled"], [56, 5, 1, "", "newsnr_sgveto_psdvar_scaled_threshold"], [56, 5, 1, "", "newsnr_sgveto_psdvar_threshold"]], "pycbc.events.significance": [[56, 5, 1, "", "check_significance_options"], [56, 5, 1, "", "count_n_louder"], [56, 5, 1, "", "digest_significance_options"], [56, 5, 1, "", "get_n_louder"], [56, 5, 1, "", "insert_significance_option_group"], [56, 5, 1, "", "n_louder_from_fit"]], "pycbc.events.simd_threshold_cython": [[56, 5, 1, "", "parallel_thresh_cluster"], [56, 5, 1, "", "parallel_threshold"]], "pycbc.events.single": [[56, 1, 1, "", "LiveSingle"]], "pycbc.events.single.LiveSingle": [[56, 2, 1, "", "calculate_ifar"], [56, 2, 1, "", "check"], [56, 2, 1, "", "from_cli"], [56, 2, 1, "", "insert_args"]], "pycbc.events.stat": [[56, 1, 1, "", "DQExpFitFgBgNormStatistic"], [56, 1, 1, "", "ExpFitBgRateStatistic"], [56, 1, 1, "", "ExpFitCombinedSNR"], [56, 1, 1, "", "ExpFitFgBgKDEStatistic"], [56, 1, 1, "", "ExpFitFgBgNormBBHStatistic"], [56, 1, 1, "", "ExpFitFgBgNormStatistic"], [56, 1, 1, "", "ExpFitStatistic"], [56, 1, 1, "", "PhaseTDExpFitStatistic"], [56, 1, 1, "", "PhaseTDStatistic"], [56, 1, 1, "", "QuadratureSumStatistic"], [56, 1, 1, "", "Stat"], [56, 5, 1, "", "get_statistic"], [56, 5, 1, "", "get_statistic_from_opts"], [56, 5, 1, "", "insert_statistic_option_group"], [56, 5, 1, "", "parse_statistic_keywords_opt"]], "pycbc.events.stat.DQExpFitFgBgNormStatistic": [[56, 2, 1, "", "assign_bin_id"], [56, 2, 1, "", "assign_dq_val"], [56, 2, 1, "", "find_dq_val"], [56, 2, 1, "", "lognoiserate"]], "pycbc.events.stat.ExpFitBgRateStatistic": [[56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "reassign_rate"]], "pycbc.events.stat.ExpFitCombinedSNR": [[56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "rank_stat_single"], [56, 2, 1, "", "single"], [56, 2, 1, "", "use_alphamax"]], "pycbc.events.stat.ExpFitFgBgKDEStatistic": [[56, 2, 1, "", "assign_kdes"], [56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "logsignalrate"], [56, 2, 1, "", "single"]], "pycbc.events.stat.ExpFitFgBgNormBBHStatistic": [[56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "logsignalrate"], [56, 2, 1, "", "single"]], "pycbc.events.stat.ExpFitFgBgNormStatistic": [[56, 2, 1, "", "assign_median_sigma"], [56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "lognoiserate"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "rank_stat_single"], [56, 2, 1, "", "single"]], "pycbc.events.stat.ExpFitStatistic": [[56, 2, 1, "", "assign_fits"], [56, 2, 1, "", "coinc_OLD"], [56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "coinc_lim_for_thresh_OLD"], [56, 2, 1, "", "find_fits"], [56, 2, 1, "", "get_ref_vals"], [56, 2, 1, "", "lognoiserate"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "rank_stat_single"], [56, 2, 1, "", "single"]], "pycbc.events.stat.PhaseTDExpFitStatistic": [[56, 2, 1, "", "coinc_OLD"], [56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "coinc_lim_for_thresh_OLD"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "rank_stat_single"], [56, 2, 1, "", "single"]], "pycbc.events.stat.PhaseTDStatistic": [[56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "get_hist"], [56, 2, 1, "", "logsignalrate"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "rank_stat_single"], [56, 2, 1, "", "single"]], "pycbc.events.stat.QuadratureSumStatistic": [[56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "rank_stat_single"], [56, 2, 1, "", "single"]], "pycbc.events.stat.Stat": [[56, 2, 1, "", "coinc_lim_for_thresh"], [56, 2, 1, "", "get_sngl_ranking"], [56, 2, 1, "", "rank_stat_coinc"], [56, 2, 1, "", "rank_stat_single"], [56, 2, 1, "", "single"]], "pycbc.events.threshold_cpu": [[56, 1, 1, "", "CPUThresholdCluster"], [56, 5, 1, "", "threshold"], [56, 5, 1, "", "threshold_inline"], [56, 5, 1, "", "threshold_numpy"], [56, 5, 1, "", "threshold_only"]], "pycbc.events.threshold_cpu.CPUThresholdCluster": [[56, 2, 1, "", "threshold_and_cluster"]], "pycbc.events.trigger_fits": [[56, 5, 1, "", "KS_test"], [56, 5, 1, "", "cum_fit"], [56, 5, 1, "", "exponential_fitalpha"], [56, 5, 1, "", "fit_above_thresh"], [56, 5, 1, "", "fit_fn"], [56, 5, 1, "", "power_fitalpha"], [56, 5, 1, "", "rayleigh_fitalpha"], [56, 5, 1, "", "tail_threshold"], [56, 5, 1, "", "which_bin"]], "pycbc.events.triggers": [[56, 5, 1, "", "bank_bins_from_cli"], [56, 5, 1, "", "get_found_param"], [56, 5, 1, "", "get_inj_param"], [56, 5, 1, "", "get_mass_spin"], [56, 5, 1, "", "get_param"], [56, 5, 1, "", "insert_bank_bins_option_group"]], "pycbc.events.veto": [[56, 5, 1, "", "get_segment_definer_comments"], [56, 5, 1, "", "indices_outside_segments"], [56, 5, 1, "", "indices_outside_times"], [56, 5, 1, "", "indices_within_segments"], [56, 5, 1, "", "indices_within_times"], [56, 5, 1, "", "segments_to_start_end"], [56, 5, 1, "", "select_segments_by_definer"], [56, 5, 1, "", "start_end_from_segments"], [56, 5, 1, "", "start_end_to_segments"]], "pycbc.fft": [[57, 0, 0, "-", "backend_cpu"], [57, 0, 0, "-", "backend_mkl"], [57, 0, 0, "-", "backend_support"], [57, 0, 0, "-", "class_api"], [57, 0, 0, "-", "core"], [57, 0, 0, "-", "fft_callback"], [57, 0, 0, "-", "fftw"], [57, 0, 0, "-", "fftw_pruned"], [57, 0, 0, "-", "fftw_pruned_cython"], [57, 0, 0, "-", "func_api"], [57, 0, 0, "-", "mkl"], [57, 0, 0, "-", "npfft"], [57, 0, 0, "-", "parser_support"]], "pycbc.fft.backend_cpu": [[57, 5, 1, "", "get_backend"], [57, 5, 1, "", "set_backend"]], "pycbc.fft.backend_mkl": [[57, 5, 1, "", "get_backend"], [57, 5, 1, "", "set_backend"]], "pycbc.fft.backend_support": [[57, 5, 1, "", "get_backend"], [57, 5, 1, "", "get_backend_modules"], [57, 5, 1, "", "get_backend_names"], [57, 5, 1, "", "set_backend"]], "pycbc.fft.class_api": [[57, 1, 1, "", "FFT"], [57, 1, 1, "", "IFFT"]], "pycbc.fft.fft_callback": [[57, 5, 1, "", "c2c_correlate_ifft"], [57, 5, 1, "", "c2c_half_correlate_ifft"], [57, 5, 1, "", "compile"], [57, 5, 1, "", "get_fn_plan"], [57, 1, 1, "", "param"], [57, 1, 1, "", "param2"]], "pycbc.fft.fft_callback.param": [[57, 4, 1, "", "htilde"]], "pycbc.fft.fft_callback.param2": [[57, 4, 1, "", "htilde"], [57, 4, 1, "", "in_kmax"], [57, 4, 1, "", "out_kmax"], [57, 4, 1, "", "out_kmin"]], "pycbc.fft.fftw": [[57, 1, 1, "", "FFT"], [57, 1, 1, "", "IFFT"], [57, 5, 1, "", "execute"], [57, 5, 1, "", "export_double_wisdom_to_filename"], [57, 5, 1, "", "export_single_wisdom_to_filename"], [57, 5, 1, "", "fft"], [57, 5, 1, "", "from_cli"], [57, 5, 1, "", "get_flag"], [57, 5, 1, "", "get_measure_level"], [57, 5, 1, "", "ifft"], [57, 5, 1, "", "import_double_wisdom_from_filename"], [57, 5, 1, "", "import_single_wisdom_from_filename"], [57, 5, 1, "", "import_sys_wisdom"], [57, 5, 1, "", "insert_fft_options"], [57, 5, 1, "", "plan"], [57, 5, 1, "", "set_measure_level"], [57, 5, 1, "", "set_planning_limit"], [57, 5, 1, "", "set_threads_backend"], [57, 5, 1, "", "verify_fft_options"], [57, 5, 1, "", "wisdom_io"]], "pycbc.fft.fftw.FFT": [[57, 2, 1, "", "execute"]], "pycbc.fft.fftw.IFFT": [[57, 2, 1, "", "execute"]], "pycbc.fft.fftw_pruned": [[57, 5, 1, "", "fft_transpose"], [57, 5, 1, "", "fft_transpose_fftw"], [57, 5, 1, "", "first_phase"], [57, 5, 1, "", "plan_first_phase"], [57, 5, 1, "", "plan_transpose"], [57, 5, 1, "", "pruned_c2cifft"], [57, 5, 1, "", "second_phase"], [57, 5, 1, "", "splay"]], "pycbc.fft.fftw_pruned_cython": [[57, 5, 1, "", "second_phase_cython"]], "pycbc.fft.func_api": [[57, 5, 1, "", "fft"], [57, 5, 1, "", "ifft"]], "pycbc.fft.mkl": [[57, 1, 1, "", "FFT"], [57, 1, 1, "", "IFFT"], [57, 5, 1, "", "check_status"], [57, 5, 1, "", "create_descriptor"], [57, 5, 1, "", "fft"], [57, 5, 1, "", "ifft"]], "pycbc.fft.mkl.FFT": [[57, 2, 1, "", "execute"]], "pycbc.fft.mkl.IFFT": [[57, 2, 1, "", "execute"]], "pycbc.fft.npfft": [[57, 1, 1, "", "FFT"], [57, 1, 1, "", "IFFT"], [57, 5, 1, "", "fft"], [57, 5, 1, "", "ifft"]], "pycbc.fft.npfft.FFT": [[57, 2, 1, "", "execute"]], "pycbc.fft.npfft.IFFT": [[57, 2, 1, "", "execute"]], "pycbc.fft.parser_support": [[57, 5, 1, "", "from_cli"], [57, 5, 1, "", "insert_fft_option_group"], [57, 5, 1, "", "verify_fft_options"]], "pycbc.filter": [[58, 0, 0, "-", "autocorrelation"], [58, 0, 0, "-", "matchedfilter"], [58, 0, 0, "-", "matchedfilter_cpu"], [58, 0, 0, "-", "matchedfilter_numpy"], [58, 0, 0, "-", "qtransform"], [58, 0, 0, "-", "resample"], [58, 0, 0, "-", "simd_correlate"], [58, 0, 0, "-", "simd_correlate_cython"], [58, 0, 0, "-", "zpk"]], "pycbc.filter.autocorrelation": [[58, 5, 1, "", "calculate_acf"], [58, 5, 1, "", "calculate_acl"]], "pycbc.filter.matchedfilter": [[58, 1, 1, "", "LiveBatchMatchedFilter"], [58, 1, 1, "", "MatchedFilterControl"], [58, 1, 1, "", "MatchedFilterSkyMaxControl"], [58, 1, 1, "", "MatchedFilterSkyMaxControlNoPhase"], [58, 5, 1, "", "compute_followup_snr_series"], [58, 5, 1, "", "compute_max_snr_over_sky_loc_stat"], [58, 5, 1, "", "compute_max_snr_over_sky_loc_stat_no_phase"], [58, 5, 1, "", "compute_u_val_for_sky_loc_stat"], [58, 5, 1, "", "compute_u_val_for_sky_loc_stat_no_phase"], [58, 5, 1, "", "correlate"], [58, 5, 1, "", "followup_event_significance"], [58, 5, 1, "", "get_cutoff_indices"], [58, 5, 1, "", "make_frequency_series"], [58, 5, 1, "", "match"], [58, 5, 1, "", "matched_filter"], [58, 5, 1, "", "matched_filter_core"], [58, 5, 1, "", "optimized_match"], [58, 5, 1, "", "overlap"], [58, 5, 1, "", "overlap_cplx"], [58, 5, 1, "", "sigma"], [58, 5, 1, "", "sigmasq"], [58, 5, 1, "", "sigmasq_series"]], "pycbc.filter.matchedfilter.LiveBatchMatchedFilter": [[58, 2, 1, "", "combine_results"], [58, 2, 1, "", "process_all"], [58, 2, 1, "", "process_data"], [58, 2, 1, "", "set_data"]], "pycbc.filter.matchedfilter.MatchedFilterControl": [[58, 2, 1, "", "full_matched_filter_and_cluster_fc"], [58, 2, 1, "", "full_matched_filter_and_cluster_symm"], [58, 2, 1, "", "full_matched_filter_thresh_only"], [58, 2, 1, "", "hierarchical_matched_filter_and_cluster"]], "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControl": [[58, 2, 1, "", "full_matched_filter_and_cluster"]], "pycbc.filter.matchedfilter_cpu": [[58, 1, 1, "", "CPUCorrelator"], [58, 5, 1, "", "batch_correlate_execute"], [58, 5, 1, "", "correlate"], [58, 5, 1, "", "correlate_numpy"]], "pycbc.filter.matchedfilter_cpu.CPUCorrelator": [[58, 2, 1, "", "correlate"]], "pycbc.filter.matchedfilter_numpy": [[58, 5, 1, "", "correlate"]], "pycbc.filter.qtransform": [[58, 5, 1, "", "deltam_f"], [58, 5, 1, "", "qplane"], [58, 5, 1, "", "qseries"], [58, 5, 1, "", "qtiling"]], "pycbc.filter.resample": [[58, 5, 1, "", "fir_zero_filter"], [58, 5, 1, "", "highpass"], [58, 5, 1, "", "highpass_fir"], [58, 5, 1, "", "interpolate_complex_frequency"], [58, 5, 1, "", "lowpass"], [58, 5, 1, "", "lowpass_fir"], [58, 5, 1, "", "notch_fir"], [58, 5, 1, "", "resample_to_delta_t"]], "pycbc.filter.simd_correlate": [[58, 5, 1, "", "correlate_parallel"], [58, 5, 1, "", "correlate_simd"]], "pycbc.filter.simd_correlate_cython": [[58, 5, 1, "", "ccorrf_parallel"], [58, 5, 1, "", "ccorrf_simd"]], "pycbc.filter.zpk": [[58, 5, 1, "", "filter_zpk"]], "pycbc.frame": [[59, 5, 1, "", "flag_names_to_bitmask"], [59, 0, 0, "-", "frame"], [59, 0, 0, "-", "gwosc"], [59, 0, 0, "-", "store"]], "pycbc.frame.frame": [[59, 5, 1, "", "frame_paths"], [59, 5, 1, "", "query_and_read_frame"], [59, 5, 1, "", "read_frame"]], "pycbc.frame.gwosc": [[59, 5, 1, "", "get_run"], [59, 5, 1, "", "gwosc_frame_json"], [59, 5, 1, "", "gwosc_frame_urls"], [59, 5, 1, "", "read_frame_gwosc"], [59, 5, 1, "", "read_strain_gwosc"]], "pycbc.frame.store": [[59, 5, 1, "", "read_store"]], "pycbc.inference": [[60, 0, 0, "-", "burn_in"], [60, 0, 0, "-", "entropy"], [60, 0, 0, "-", "evidence"], [60, 0, 0, "-", "gelman_rubin"], [60, 0, 0, "-", "geweke"], [61, 0, 0, "-", "io"], [62, 0, 0, "-", "jump"], [63, 0, 0, "-", "models"], [60, 0, 0, "-", "option_utils"], [64, 0, 0, "-", "sampler"]], "pycbc.inference.burn_in": [[60, 1, 1, "", "BaseBurnInTests"], [60, 1, 1, "", "EnsembleMCMCBurnInTests"], [60, 1, 1, "", "EnsembleMultiTemperedMCMCBurnInTests"], [60, 1, 1, "", "MCMCBurnInTests"], [60, 1, 1, "", "MultiTemperedMCMCBurnInTests"], [60, 5, 1, "", "evaluate_tests"], [60, 5, 1, "", "ks_test"], [60, 5, 1, "", "max_posterior"], [60, 5, 1, "", "nacl"], [60, 5, 1, "", "posterior_step"]], "pycbc.inference.burn_in.BaseBurnInTests": [[60, 4, 1, "", "available_tests"], [60, 2, 1, "", "burn_in_index"], [60, 2, 1, "", "evaluate"], [60, 2, 1, "", "from_config"], [60, 2, 1, "", "halfchain"], [60, 2, 1, "", "max_posterior"], [60, 2, 1, "", "min_iterations"], [60, 2, 1, "", "nacl"], [60, 2, 1, "", "posterior_step"], [60, 2, 1, "", "write"]], "pycbc.inference.burn_in.EnsembleMCMCBurnInTests": [[60, 4, 1, "", "available_tests"], [60, 2, 1, "", "burn_in_index"], [60, 2, 1, "", "evaluate"], [60, 2, 1, "", "ks_test"], [60, 2, 1, "", "max_posterior"], [60, 2, 1, "", "nacl"], [60, 2, 1, "", "posterior_step"]], "pycbc.inference.burn_in.MCMCBurnInTests": [[60, 2, 1, "", "burn_in_index"], [60, 2, 1, "", "evaluate"], [60, 2, 1, "", "max_posterior"], [60, 2, 1, "", "nacl"], [60, 2, 1, "", "posterior_step"], [60, 2, 1, "", "write"]], "pycbc.inference.entropy": [[60, 5, 1, "", "check_hist_params"], [60, 5, 1, "", "compute_pdf"], [60, 5, 1, "", "entropy"], [60, 5, 1, "", "js"], [60, 5, 1, "", "kl"]], "pycbc.inference.evidence": [[60, 5, 1, "", "arithmetic_mean_estimator"], [60, 5, 1, "", "harmonic_mean_estimator"], [60, 5, 1, "", "stepping_stone_algorithm"], [60, 5, 1, "", "thermodynamic_integration"]], "pycbc.inference.gelman_rubin": [[60, 5, 1, "", "gelman_rubin"], [60, 5, 1, "", "walk"]], "pycbc.inference.geweke": [[60, 5, 1, "", "geweke"]], "pycbc.inference.io": [[61, 6, 1, "", "NoInputFileError"], [61, 1, 1, "", "PrintFileParams"], [61, 1, 1, "", "ResultsArgumentParser"], [61, 0, 0, "-", "base_hdf"], [61, 0, 0, "-", "base_mcmc"], [61, 0, 0, "-", "base_multitemper"], [61, 0, 0, "-", "base_nested_sampler"], [61, 0, 0, "-", "base_sampler"], [61, 5, 1, "", "check_integrity"], [61, 0, 0, "-", "dynesty"], [61, 0, 0, "-", "emcee"], [61, 0, 0, "-", "emcee_pt"], [61, 0, 0, "-", "epsie"], [61, 5, 1, "", "get_common_parameters"], [61, 5, 1, "", "get_file_type"], [61, 5, 1, "", "injections_from_cli"], [61, 5, 1, "", "loadfile"], [61, 0, 0, "-", "multinest"], [61, 0, 0, "-", "posterior"], [61, 0, 0, "-", "ptemcee"], [61, 5, 1, "", "results_from_cli"], [61, 0, 0, "-", "txt"], [61, 0, 0, "-", "ultranest"], [61, 5, 1, "", "validate_checkpoint_files"]], "pycbc.inference.io.ResultsArgumentParser": [[61, 3, 1, "", "actions"], [61, 2, 1, "", "add_results_option_group"], [61, 2, 1, "", "parse_known_args"]], "pycbc.inference.io.base_hdf": [[61, 1, 1, "", "BaseInferenceFile"], [61, 5, 1, "", "format_attr"]], "pycbc.inference.io.base_hdf.BaseInferenceFile": [[61, 3, 1, "", "cmd"], [61, 4, 1, "", "config_group"], [61, 2, 1, "", "copy"], [61, 2, 1, "", "copy_info"], [61, 2, 1, "", "copy_metadata"], [61, 2, 1, "", "copy_samples"], [61, 4, 1, "", "data_group"], [61, 3, 1, "", "effective_nsamples"], [61, 2, 1, "", "extra_args_parser"], [61, 2, 1, "", "get_slice"], [61, 2, 1, "", "getattrs"], [61, 4, 1, "", "injections_group"], [61, 3, 1, "", "log_evidence"], [61, 4, 1, "", "name"], [61, 2, 1, "", "parse_parameters"], [61, 2, 1, "", "read_config_file"], [61, 2, 1, "", "read_data"], [61, 2, 1, "", "read_injections"], [61, 2, 1, "", "read_psds"], [61, 2, 1, "", "read_random_state"], [61, 2, 1, "", "read_raw_samples"], [61, 2, 1, "", "read_samples"], [61, 4, 1, "", "sampler_group"], [61, 2, 1, "", "samples_from_cli"], [61, 4, 1, "", "samples_group"], [61, 3, 1, "", "static_params"], [61, 3, 1, "", "thin_end"], [61, 3, 1, "", "thin_interval"], [61, 3, 1, "", "thin_start"], [61, 2, 1, "", "write_command_line"], [61, 2, 1, "", "write_config_file"], [61, 2, 1, "", "write_data"], [61, 2, 1, "", "write_effective_nsamples"], [61, 2, 1, "", "write_injections"], [61, 2, 1, "", "write_kwargs_to_attrs"], [61, 2, 1, "", "write_logevidence"], [61, 2, 1, "", "write_psd"], [61, 2, 1, "", "write_random_state"], [61, 2, 1, "", "write_samples"], [61, 2, 1, "", "write_stilde"], [61, 2, 1, "", "write_strain"]], "pycbc.inference.io.base_mcmc": [[61, 1, 1, "", "CommonMCMCMetadataIO"], [61, 1, 1, "", "EnsembleMCMCMetadataIO"], [61, 1, 1, "", "MCMCMetadataIO"], [61, 5, 1, "", "ensemble_read_raw_samples"], [61, 5, 1, "", "nsamples_in_chain"], [61, 5, 1, "", "thin_samples_for_writing"], [61, 5, 1, "", "write_samples"]], "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO": [[61, 3, 1, "", "acl"], [61, 3, 1, "", "act"], [61, 3, 1, "", "burn_in_index"], [61, 3, 1, "", "burn_in_iteration"], [61, 2, 1, "", "extra_args_parser"], [61, 3, 1, "", "is_burned_in"], [61, 2, 1, "", "iterations"], [61, 2, 1, "", "last_iteration"], [61, 3, 1, "", "nchains"], [61, 3, 1, "", "niterations"], [61, 3, 1, "", "nwalkers"], [61, 3, 1, "", "raw_acls"], [61, 3, 1, "", "raw_acts"], [61, 2, 1, "", "thin"], [61, 3, 1, "", "thinned_by"], [61, 2, 1, "", "write_niterations"], [61, 2, 1, "", "write_resume_point"], [61, 2, 1, "", "write_sampler_metadata"]], "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO": [[61, 3, 1, "", "thin_interval"], [61, 3, 1, "", "thin_start"]], "pycbc.inference.io.base_mcmc.MCMCMetadataIO": [[61, 3, 1, "", "thin_interval"], [61, 3, 1, "", "thin_start"]], "pycbc.inference.io.base_multitemper": [[61, 1, 1, "", "CommonMultiTemperedMetadataIO"], [61, 1, 1, "", "ParseTempsArg"], [61, 5, 1, "", "ensemble_read_raw_samples"], [61, 5, 1, "", "read_raw_samples"], [61, 5, 1, "", "write_samples"]], "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO": [[61, 2, 1, "", "extra_args_parser"], [61, 3, 1, "", "ntemps"], [61, 2, 1, "", "write_sampler_metadata"]], "pycbc.inference.io.base_nested_sampler": [[61, 1, 1, "", "BaseNestedSamplerFile"]], "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile": [[61, 4, 1, "", "name"], [61, 2, 1, "", "read_raw_samples"], [61, 2, 1, "", "write_niterations"], [61, 2, 1, "", "write_resume_point"], [61, 2, 1, "", "write_sampler_metadata"], [61, 2, 1, "", "write_samples"]], "pycbc.inference.io.base_sampler": [[61, 1, 1, "", "BaseSamplerFile"]], "pycbc.inference.io.base_sampler.BaseSamplerFile": [[61, 3, 1, "", "run_end_time"], [61, 3, 1, "", "run_start_time"], [61, 2, 1, "", "update_checkpoint_history"], [61, 2, 1, "", "validate"], [61, 2, 1, "", "write_resume_point"], [61, 2, 1, "", "write_run_end_time"], [61, 2, 1, "", "write_run_start_time"], [61, 2, 1, "", "write_sampler_metadata"]], "pycbc.inference.io.dynesty": [[61, 1, 1, "", "CommonNestedMetadataIO"], [61, 1, 1, "", "DynestyFile"]], "pycbc.inference.io.dynesty.CommonNestedMetadataIO": [[61, 2, 1, "", "extra_args_parser"]], "pycbc.inference.io.dynesty.DynestyFile": [[61, 4, 1, "", "name"], [61, 2, 1, "", "read_pickled_data_from_checkpoint_file"], [61, 2, 1, "", "read_raw_samples"], [61, 2, 1, "", "validate"], [61, 2, 1, "", "write_pickled_data_into_checkpoint_file"], [61, 2, 1, "", "write_raw_samples"]], "pycbc.inference.io.emcee": [[61, 1, 1, "", "EmceeFile"]], "pycbc.inference.io.emcee.EmceeFile": [[61, 4, 1, "", "name"], [61, 2, 1, "", "read_acceptance_fraction"], [61, 2, 1, "", "read_raw_samples"], [61, 2, 1, "", "write_acceptance_fraction"], [61, 2, 1, "", "write_samples"]], "pycbc.inference.io.emcee_pt": [[61, 1, 1, "", "EmceePTFile"]], "pycbc.inference.io.emcee_pt.EmceePTFile": [[61, 3, 1, "", "betas"], [61, 4, 1, "", "name"], [61, 2, 1, "", "read_acceptance_fraction"], [61, 2, 1, "", "read_raw_samples"], [61, 2, 1, "", "write_acceptance_fraction"], [61, 2, 1, "", "write_sampler_metadata"], [61, 2, 1, "", "write_samples"]], "pycbc.inference.io.epsie": [[61, 1, 1, "", "EpsieFile"]], "pycbc.inference.io.epsie.EpsieFile": [[61, 3, 1, "", "betas"], [61, 4, 1, "", "name"], [61, 3, 1, "", "nchains"], [61, 2, 1, "", "read_acceptance_fraction"], [61, 2, 1, "", "read_acceptance_rate"], [61, 2, 1, "", "read_acceptance_ratio"], [61, 2, 1, "", "read_raw_samples"], [61, 3, 1, "", "seed"], [61, 3, 1, "", "swap_interval"], [61, 2, 1, "", "thin"], [61, 2, 1, "", "validate"], [61, 2, 1, "", "write_acceptance_ratio"], [61, 2, 1, "", "write_sampler_metadata"], [61, 2, 1, "", "write_samples"], [61, 2, 1, "", "write_temperature_data"]], "pycbc.inference.io.multinest": [[61, 1, 1, "", "MultinestFile"]], "pycbc.inference.io.multinest.MultinestFile": [[61, 4, 1, "", "name"], [61, 3, 1, "", "niterations"], [61, 2, 1, "", "read_raw_samples"], [61, 2, 1, "", "write_logevidence"], [61, 2, 1, "", "write_niterations"], [61, 2, 1, "", "write_resume_point"], [61, 2, 1, "", "write_sampler_metadata"], [61, 2, 1, "", "write_samples"]], "pycbc.inference.io.posterior": [[61, 1, 1, "", "PosteriorFile"], [61, 5, 1, "", "read_raw_samples_from_file"], [61, 5, 1, "", "write_samples_to_file"]], "pycbc.inference.io.posterior.PosteriorFile": [[61, 4, 1, "", "name"], [61, 2, 1, "", "read_raw_samples"], [61, 2, 1, "", "write_resume_point"], [61, 2, 1, "", "write_run_end_time"], [61, 2, 1, "", "write_run_start_time"], [61, 2, 1, "", "write_sampler_metadata"], [61, 2, 1, "", "write_samples"]], "pycbc.inference.io.ptemcee": [[61, 1, 1, "", "PTEmceeFile"]], "pycbc.inference.io.ptemcee.PTEmceeFile": [[61, 4, 1, "", "name"], [61, 2, 1, "", "read_betas"], [61, 2, 1, "", "read_ensemble_attrs"], [61, 2, 1, "", "read_raw_samples"], [61, 3, 1, "", "starting_betas"], [61, 2, 1, "", "write_betas"], [61, 2, 1, "", "write_ensemble_attrs"], [61, 2, 1, "", "write_sampler_metadata"], [61, 2, 1, "", "write_samples"]], "pycbc.inference.io.txt": [[61, 1, 1, "", "InferenceTXTFile"]], "pycbc.inference.io.txt.InferenceTXTFile": [[61, 4, 1, "", "comments"], [61, 4, 1, "", "delimiter"], [61, 4, 1, "", "name"], [61, 2, 1, "", "write"]], "pycbc.inference.io.ultranest": [[61, 1, 1, "", "UltranestFile"]], "pycbc.inference.io.ultranest.UltranestFile": [[61, 4, 1, "", "name"]], "pycbc.inference.jump": [[62, 0, 0, "-", "angular"], [62, 0, 0, "-", "bounded_normal"], [62, 0, 0, "-", "discrete"], [62, 5, 1, "", "epsie_proposals_from_config"], [62, 0, 0, "-", "normal"]], "pycbc.inference.jump.angular": [[62, 1, 1, "", "EpsieATAdaptiveAngular"], [62, 1, 1, "", "EpsieAdaptiveAngular"], [62, 1, 1, "", "EpsieAngular"]], "pycbc.inference.jump.angular.EpsieATAdaptiveAngular": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.angular.EpsieAdaptiveAngular": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.angular.EpsieAngular": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.bounded_normal": [[62, 1, 1, "", "EpsieATAdaptiveBoundedNormal"], [62, 1, 1, "", "EpsieAdaptiveBoundedNormal"], [62, 1, 1, "", "EpsieBoundedNormal"]], "pycbc.inference.jump.bounded_normal.EpsieATAdaptiveBoundedNormal": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.bounded_normal.EpsieAdaptiveBoundedNormal": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.bounded_normal.EpsieBoundedNormal": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete": [[62, 1, 1, "", "EpsieAdaptiveBoundedDiscrete"], [62, 1, 1, "", "EpsieAdaptiveNormalDiscrete"], [62, 1, 1, "", "EpsieBoundedDiscrete"], [62, 1, 1, "", "EpsieNormalDiscrete"]], "pycbc.inference.jump.discrete.EpsieAdaptiveBoundedDiscrete": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete.EpsieAdaptiveNormalDiscrete": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete.EpsieBoundedDiscrete": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.discrete.EpsieNormalDiscrete": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.normal": [[62, 1, 1, "", "EpsieATAdaptiveNormal"], [62, 1, 1, "", "EpsieAdaptiveNormal"], [62, 1, 1, "", "EpsieNormal"], [62, 5, 1, "", "epsie_adaptive_from_config"], [62, 5, 1, "", "epsie_at_adaptive_from_config"], [62, 5, 1, "", "epsie_from_config"], [62, 5, 1, "", "get_epsie_adaptation_settings"], [62, 5, 1, "", "get_epsie_discrete_successive_settings"], [62, 5, 1, "", "get_param_boundaries"], [62, 5, 1, "", "get_variance"], [62, 5, 1, "", "load_opts"]], "pycbc.inference.jump.normal.EpsieATAdaptiveNormal": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.normal.EpsieAdaptiveNormal": [[62, 2, 1, "", "from_config"]], "pycbc.inference.jump.normal.EpsieNormal": [[62, 2, 1, "", "from_config"]], "pycbc.inference.models": [[63, 1, 1, "", "CallModel"], [63, 0, 0, "-", "analytic"], [63, 5, 1, "", "available_models"], [63, 0, 0, "-", "base"], [63, 0, 0, "-", "base_data"], [63, 0, 0, "-", "brute_marg"], [63, 0, 0, "-", "data_utils"], [63, 0, 0, "-", "gated_gaussian_noise"], [63, 0, 0, "-", "gaussian_noise"], [63, 5, 1, "", "get_model"], [63, 5, 1, "", "get_models"], [63, 0, 0, "-", "hierarchical"], [63, 0, 0, "-", "marginalized_gaussian_noise"], [63, 5, 1, "", "read_from_config"], [63, 5, 1, "", "register_model"], [63, 0, 0, "-", "relbin"], [63, 0, 0, "-", "relbin_cpu"], [63, 0, 0, "-", "single_template"], [63, 0, 0, "-", "tools"]], "pycbc.inference.models.analytic": [[63, 1, 1, "", "TestEggbox"], [63, 1, 1, "", "TestNormal"], [63, 1, 1, "", "TestPosterior"], [63, 1, 1, "", "TestPrior"], [63, 1, 1, "", "TestRosenbrock"], [63, 1, 1, "", "TestVolcano"]], "pycbc.inference.models.analytic.TestEggbox": [[63, 4, 1, "", "name"]], "pycbc.inference.models.analytic.TestNormal": [[63, 4, 1, "", "name"]], "pycbc.inference.models.analytic.TestPosterior": [[63, 4, 1, "", "name"]], "pycbc.inference.models.analytic.TestPrior": [[63, 4, 1, "", "name"]], "pycbc.inference.models.analytic.TestRosenbrock": [[63, 4, 1, "", "name"]], "pycbc.inference.models.analytic.TestVolcano": [[63, 4, 1, "", "name"]], "pycbc.inference.models.base": [[63, 1, 1, "", "BaseModel"], [63, 1, 1, "", "ModelStats"], [63, 1, 1, "", "SamplingTransforms"], [63, 5, 1, "", "check_for_cartesian_spins"], [63, 5, 1, "", "read_sampling_params_from_config"]], "pycbc.inference.models.base.BaseModel": [[63, 3, 1, "", "current_params"], [63, 3, 1, "", "current_stats"], [63, 3, 1, "", "default_stats"], [63, 2, 1, "", "extra_args_from_config"], [63, 2, 1, "", "from_config"], [63, 2, 1, "", "get_current_stats"], [63, 3, 1, "", "logjacobian"], [63, 3, 1, "", "loglikelihood"], [63, 3, 1, "", "logposterior"], [63, 3, 1, "", "logprior"], [63, 4, 1, "", "name"], [63, 2, 1, "", "prior_from_config"], [63, 2, 1, "", "prior_rvs"], [63, 3, 1, "", "sampling_params"], [63, 3, 1, "", "static_params"], [63, 2, 1, "", "update"], [63, 3, 1, "", "variable_params"], [63, 2, 1, "", "write_metadata"]], "pycbc.inference.models.base.ModelStats": [[63, 2, 1, "", "getstats"], [63, 2, 1, "", "getstatsdict"], [63, 3, 1, "", "statnames"]], "pycbc.inference.models.base.SamplingTransforms": [[63, 2, 1, "", "apply"], [63, 2, 1, "", "from_config"], [63, 2, 1, "", "logjacobian"]], "pycbc.inference.models.base_data": [[63, 1, 1, "", "BaseDataModel"]], "pycbc.inference.models.base_data.BaseDataModel": [[63, 3, 1, "", "data"], [63, 3, 1, "", "detectors"], [63, 3, 1, "", "loglr"], [63, 3, 1, "", "lognl"], [63, 3, 1, "", "logplr"], [63, 2, 1, "", "write_metadata"]], "pycbc.inference.models.brute_marg": [[63, 1, 1, "", "BruteLISASkyModesMarginalize"], [63, 1, 1, "", "BruteParallelGaussianMarginalize"], [63, 1, 1, "", "likelihood_wrapper"]], "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize": [[63, 2, 1, "", "from_config"], [63, 4, 1, "", "name"], [63, 2, 1, "", "reconstruct"]], "pycbc.inference.models.brute_marg.BruteParallelGaussianMarginalize": [[63, 4, 1, "", "name"]], "pycbc.inference.models.data_utils": [[63, 6, 1, "", "NoValidDataError"], [63, 5, 1, "", "check_for_nans"], [63, 5, 1, "", "check_validtimes"], [63, 5, 1, "", "create_data_parser"], [63, 5, 1, "", "data_from_cli"], [63, 5, 1, "", "data_opts_from_config"], [63, 5, 1, "", "detectors_with_valid_data"], [63, 5, 1, "", "fd_data_from_strain_dict"], [63, 5, 1, "", "gate_overwhitened_data"], [63, 5, 1, "", "strain_from_cli_multi_ifos"]], "pycbc.inference.models.gated_gaussian_noise": [[63, 1, 1, "", "BaseGatedGaussian"], [63, 1, 1, "", "GatedGaussianMargPol"], [63, 1, 1, "", "GatedGaussianNoise"]], "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian": [[63, 3, 1, "", "data"], [63, 2, 1, "", "det_lognl"], [63, 2, 1, "", "det_lognorm"], [63, 2, 1, "", "from_config"], [63, 2, 1, "", "get_data"], [63, 2, 1, "", "get_gate_times"], [63, 2, 1, "", "get_gate_times_hmeco"], [63, 2, 1, "", "get_gated_data"], [63, 2, 1, "", "get_gated_waveforms"], [63, 2, 1, "", "get_residuals"], [63, 2, 1, "", "get_waveforms"], [63, 3, 1, "", "normalize"], [63, 3, 1, "", "psds"], [63, 3, 1, "", "td_data"], [63, 2, 1, "", "whiten"], [63, 2, 1, "", "write_metadata"]], "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol": [[63, 2, 1, "", "get_gated_waveforms"], [63, 2, 1, "", "get_waveforms"], [63, 4, 1, "", "name"]], "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise": [[63, 2, 1, "", "get_gated_residuals"], [63, 2, 1, "", "get_gated_waveforms"], [63, 4, 1, "", "name"]], "pycbc.inference.models.gaussian_noise": [[63, 1, 1, "", "BaseGaussianNoise"], [63, 1, 1, "", "GaussianNoise"], [63, 5, 1, "", "create_waveform_generator"], [63, 5, 1, "", "get_values_from_injection"]], "pycbc.inference.models.gaussian_noise.BaseGaussianNoise": [[63, 2, 1, "", "det_lognl"], [63, 2, 1, "", "det_lognorm"], [63, 2, 1, "", "from_config"], [63, 3, 1, "", "high_frequency_cutoff"], [63, 4, 1, "", "ignore_failed_waveforms"], [63, 3, 1, "", "kmax"], [63, 3, 1, "", "kmin"], [63, 3, 1, "", "lognorm"], [63, 3, 1, "", "low_frequency_cutoff"], [63, 3, 1, "", "normalize"], [63, 3, 1, "", "psd_segments"], [63, 3, 1, "", "psds"], [63, 2, 1, "", "set_psd_segments"], [63, 2, 1, "", "update"], [63, 3, 1, "", "weight"], [63, 3, 1, "", "whitened_data"], [63, 2, 1, "", "write_metadata"]], "pycbc.inference.models.gaussian_noise.GaussianNoise": [[63, 2, 1, "", "det_cplx_loglr"], [63, 2, 1, "", "det_optimal_snrsq"], [63, 2, 1, "", "get_waveforms"], [63, 2, 1, "", "multi_loglikelihood"], [63, 3, 1, "", "multi_signal_support"], [63, 4, 1, "", "name"]], "pycbc.inference.models.hierarchical": [[63, 1, 1, "", "HierarchicalModel"], [63, 1, 1, "", "HierarchicalParam"], [63, 1, 1, "", "MultiSignalModel"], [63, 5, 1, "", "hpiter"], [63, 5, 1, "", "map_params"]], "pycbc.inference.models.hierarchical.HierarchicalModel": [[63, 2, 1, "", "from_config"], [63, 3, 1, "", "hstatic_params"], [63, 3, 1, "", "hvariable_params"], [63, 4, 1, "", "name"], [63, 3, 1, "", "static_params"], [63, 3, 1, "", "variable_params"], [63, 2, 1, "", "write_metadata"]], "pycbc.inference.models.hierarchical.HierarchicalParam": [[63, 4, 1, "", "delim"], [63, 2, 1, "", "from_subname"], [63, 4, 1, "", "fullname"], [63, 4, 1, "", "model_delim"], [63, 4, 1, "", "models"], [63, 2, 1, "", "parse"], [63, 4, 1, "", "subname"]], "pycbc.inference.models.hierarchical.MultiSignalModel": [[63, 4, 1, "", "name"], [63, 2, 1, "", "write_metadata"]], "pycbc.inference.models.marginalized_gaussian_noise": [[63, 1, 1, "", "MarginalizedHMPolPhase"], [63, 1, 1, "", "MarginalizedPhaseGaussianNoise"], [63, 1, 1, "", "MarginalizedPolarization"], [63, 1, 1, "", "MarginalizedTime"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase": [[63, 4, 1, "", "name"], [63, 2, 1, "", "phase_fac"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPhaseGaussianNoise": [[63, 4, 1, "", "name"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPolarization": [[63, 4, 1, "", "name"]], "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedTime": [[63, 4, 1, "", "name"]], "pycbc.inference.models.relbin": [[63, 1, 1, "", "Relative"], [63, 1, 1, "", "RelativeTime"], [63, 1, 1, "", "RelativeTimeDom"], [63, 5, 1, "", "setup_bins"]], "pycbc.inference.models.relbin.Relative": [[63, 2, 1, "", "calculate_hihjs"], [63, 2, 1, "", "combine_layout"], [63, 2, 1, "", "extra_args_from_config"], [63, 2, 1, "", "get_waveforms"], [63, 2, 1, "", "init_from_frequencies"], [63, 3, 1, "", "likelihood_function"], [63, 2, 1, "", "max_curvature_from_reference"], [63, 2, 1, "", "multi_loglikelihood"], [63, 3, 1, "", "multi_signal_support"], [63, 4, 1, "", "name"], [63, 2, 1, "", "setup_antenna"], [63, 2, 1, "", "summary_product"], [63, 2, 1, "", "write_metadata"]], "pycbc.inference.models.relbin.RelativeTime": [[63, 2, 1, "", "get_snr"], [63, 4, 1, "", "name"], [63, 3, 1, "", "ref_snr"]], "pycbc.inference.models.relbin.RelativeTimeDom": [[63, 2, 1, "", "get_snr"], [63, 4, 1, "", "name"]], "pycbc.inference.models.relbin_cpu": [[63, 5, 1, "", "likelihood_parts"], [63, 5, 1, "", "likelihood_parts_det"], [63, 5, 1, "", "likelihood_parts_multi"], [63, 5, 1, "", "likelihood_parts_multi_v"], [63, 5, 1, "", "likelihood_parts_v"], [63, 5, 1, "", "likelihood_parts_v_pol"], [63, 5, 1, "", "likelihood_parts_v_pol_time"], [63, 5, 1, "", "likelihood_parts_v_time"], [63, 5, 1, "", "likelihood_parts_vector"], [63, 5, 1, "", "likelihood_parts_vectorp"], [63, 5, 1, "", "likelihood_parts_vectort"], [63, 5, 1, "", "snr_predictor"], [63, 5, 1, "", "snr_predictor_dom"]], "pycbc.inference.models.single_template": [[63, 1, 1, "", "SingleTemplate"]], "pycbc.inference.models.single_template.SingleTemplate": [[63, 2, 1, "", "calculate_hihjs"], [63, 2, 1, "", "multi_loglikelihood"], [63, 3, 1, "", "multi_signal_support"], [63, 4, 1, "", "name"]], "pycbc.inference.models.tools": [[63, 1, 1, "", "DistMarg"], [63, 5, 1, "", "draw_sample"], [63, 5, 1, "", "marginalize_likelihood"], [63, 5, 1, "", "setup_distance_marg_interpolant"], [63, 5, 1, "", "str_to_bool"], [63, 5, 1, "", "str_to_tuple"]], "pycbc.inference.models.tools.DistMarg": [[63, 3, 1, "", "current_params"], [63, 4, 1, "", "distance_interpolator"], [63, 4, 1, "", "distance_marginalization"], [63, 2, 1, "", "draw_ifos"], [63, 2, 1, "", "draw_sky_times"], [63, 2, 1, "", "draw_times"], [63, 2, 1, "", "get_precalc_antenna_factors"], [63, 2, 1, "", "marginalize_loglr"], [63, 4, 1, "", "marginalize_phase"], [63, 2, 1, "", "premarg_draw"], [63, 2, 1, "", "reconstruct"], [63, 2, 1, "", "reset_vector_params"], [63, 2, 1, "", "setup_marginalization"], [63, 2, 1, "", "setup_peak_lock"], [63, 2, 1, "", "snr_draw"]], "pycbc.inference.option_utils": [[60, 1, 1, "", "ParseLabelArg"], [60, 1, 1, "", "ParseParametersArg"], [60, 5, 1, "", "add_density_option_group"], [60, 5, 1, "", "add_injsamples_map_opt"], [60, 5, 1, "", "add_plot_posterior_option_group"], [60, 5, 1, "", "add_scatter_option_group"], [60, 5, 1, "", "expected_parameters_from_cli"], [60, 5, 1, "", "plot_ranges_from_cli"]], "pycbc.inference.sampler": [[64, 0, 0, "-", "base"], [64, 0, 0, "-", "base_cube"], [64, 0, 0, "-", "base_mcmc"], [64, 0, 0, "-", "base_multitemper"], [64, 0, 0, "-", "dummy"], [64, 0, 0, "-", "dynesty"], [64, 0, 0, "-", "emcee"], [64, 0, 0, "-", "emcee_pt"], [64, 0, 0, "-", "epsie"], [64, 5, 1, "", "load_from_config"], [64, 0, 0, "-", "multinest"], [64, 0, 0, "-", "ptemcee"], [64, 0, 0, "-", "ultranest"]], "pycbc.inference.sampler.base": [[64, 1, 1, "", "BaseSampler"], [64, 5, 1, "", "create_new_output_file"], [64, 5, 1, "", "initial_dist_from_config"], [64, 5, 1, "", "setup_output"]], "pycbc.inference.sampler.base.BaseSampler": [[64, 2, 1, "", "checkpoint"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 2, 1, "", "resume_from_checkpoint"], [64, 2, 1, "", "run"], [64, 3, 1, "", "samples"], [64, 3, 1, "", "sampling_params"], [64, 3, 1, "", "static_params"], [64, 3, 1, "", "variable_params"]], "pycbc.inference.sampler.base_cube": [[64, 1, 1, "", "CubeModel"], [64, 5, 1, "", "call_global_loglikelihood"], [64, 5, 1, "", "call_global_logprior"], [64, 5, 1, "", "setup_calls"]], "pycbc.inference.sampler.base_cube.CubeModel": [[64, 2, 1, "", "log_likelihood"], [64, 2, 1, "", "prior_transform"]], "pycbc.inference.sampler.base_mcmc": [[64, 1, 1, "", "BaseMCMC"], [64, 1, 1, "", "EnsembleSupport"], [64, 5, 1, "", "blob_data_to_dict"], [64, 5, 1, "", "ensemble_compute_acf"], [64, 5, 1, "", "ensemble_compute_acl"], [64, 5, 1, "", "get_optional_arg_from_config"], [64, 5, 1, "", "raw_samples_to_dict"]], "pycbc.inference.sampler.base_mcmc.BaseMCMC": [[64, 2, 1, "", "acl"], [64, 3, 1, "", "act"], [64, 3, 1, "", "base_shape"], [64, 3, 1, "", "burn_in"], [64, 2, 1, "", "checkpoint"], [64, 2, 1, "", "checkpoint_from_config"], [64, 3, 1, "", "checkpoint_interval"], [64, 3, 1, "", "checkpoint_signal"], [64, 2, 1, "", "ckpt_signal_from_config"], [64, 2, 1, "", "clear_samples"], [64, 2, 1, "", "compute_acf"], [64, 2, 1, "", "compute_acl"], [64, 2, 1, "", "effective_nsamples"], [64, 2, 1, "", "get_thin_interval"], [64, 3, 1, "", "max_samples_per_chain"], [64, 3, 1, "", "nchains"], [64, 3, 1, "", "niterations"], [64, 3, 1, "", "p0"], [64, 3, 1, "", "pos"], [64, 3, 1, "", "raw_acls"], [64, 3, 1, "", "raw_acts"], [64, 2, 1, "", "resume_from_checkpoint"], [64, 2, 1, "", "run"], [64, 2, 1, "", "run_mcmc"], [64, 2, 1, "", "set_burn_in"], [64, 2, 1, "", "set_burn_in_from_config"], [64, 2, 1, "", "set_p0"], [64, 2, 1, "", "set_start_from_config"], [64, 2, 1, "", "set_state_from_file"], [64, 2, 1, "", "set_target"], [64, 2, 1, "", "set_target_from_config"], [64, 2, 1, "", "set_thin_interval_from_config"], [64, 3, 1, "", "target_eff_nsamples"], [64, 3, 1, "", "target_niterations"], [64, 3, 1, "", "thin_interval"], [64, 3, 1, "", "thin_safety_factor"], [64, 2, 1, "", "write_results"]], "pycbc.inference.sampler.base_mcmc.EnsembleSupport": [[64, 3, 1, "", "acl"], [64, 3, 1, "", "effective_nsamples"], [64, 3, 1, "", "nwalkers"]], "pycbc.inference.sampler.base_multitemper": [[64, 1, 1, "", "MultiTemperedSupport"], [64, 5, 1, "", "acl_from_raw_acls"], [64, 5, 1, "", "compute_acf"], [64, 5, 1, "", "compute_acl"], [64, 5, 1, "", "ensemble_compute_acf"], [64, 5, 1, "", "ensemble_compute_acl"], [64, 5, 1, "", "read_betas_from_hdf"]], "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport": [[64, 2, 1, "", "betas_from_config"], [64, 3, 1, "", "ntemps"]], "pycbc.inference.sampler.dummy": [[64, 1, 1, "", "DummySampler"], [64, 5, 1, "", "call_reconstruct"]], "pycbc.inference.sampler.dummy.DummySampler": [[64, 2, 1, "", "checkpoint"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 2, 1, "", "resume_from_checkpoint"], [64, 2, 1, "", "run"], [64, 3, 1, "", "samples"]], "pycbc.inference.sampler.dynesty": [[64, 1, 1, "", "DynestySampler"], [64, 5, 1, "", "estimate_nmcmc"], [64, 5, 1, "", "sample_rwalk_mod"]], "pycbc.inference.sampler.dynesty.DynestySampler": [[64, 2, 1, "", "checkpoint"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "logz"], [64, 3, 1, "", "logz_err"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 3, 1, "", "niterations"], [64, 2, 1, "", "resume_from_checkpoint"], [64, 2, 1, "", "run"], [64, 3, 1, "", "samples"], [64, 2, 1, "", "set_initial_conditions"], [64, 2, 1, "", "set_state_from_file"], [64, 2, 1, "", "write_results"]], "pycbc.inference.sampler.emcee": [[64, 1, 1, "", "EmceeEnsembleSampler"]], "pycbc.inference.sampler.emcee.EmceeEnsembleSampler": [[64, 3, 1, "", "base_shape"], [64, 4, 1, "", "burn_in_class"], [64, 2, 1, "", "clear_samples"], [64, 2, 1, "", "compute_acf"], [64, 2, 1, "", "compute_acl"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 2, 1, "", "run_mcmc"], [64, 3, 1, "", "samples"], [64, 2, 1, "", "set_state_from_file"], [64, 2, 1, "", "write_results"]], "pycbc.inference.sampler.emcee_pt": [[64, 1, 1, "", "EmceePTSampler"]], "pycbc.inference.sampler.emcee_pt.EmceePTSampler": [[64, 3, 1, "", "base_shape"], [64, 3, 1, "", "betas"], [64, 4, 1, "", "burn_in_class"], [64, 2, 1, "", "calculate_logevidence"], [64, 2, 1, "", "clear_samples"], [64, 2, 1, "", "compute_acf"], [64, 2, 1, "", "compute_acl"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 2, 1, "", "run_mcmc"], [64, 3, 1, "", "samples"], [64, 2, 1, "", "set_state_from_file"], [64, 2, 1, "", "write_results"]], "pycbc.inference.sampler.epsie": [[64, 1, 1, "", "EpsieSampler"]], "pycbc.inference.sampler.epsie.EpsieSampler": [[64, 3, 1, "", "acl"], [64, 3, 1, "", "base_shape"], [64, 3, 1, "", "betas"], [64, 4, 1, "", "burn_in_class"], [64, 2, 1, "", "clear_samples"], [64, 2, 1, "", "compute_acf"], [64, 2, 1, "", "compute_acl"], [64, 3, 1, "", "effective_nsamples"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 3, 1, "", "pos"], [64, 2, 1, "", "run_mcmc"], [64, 3, 1, "", "samples"], [64, 3, 1, "", "seed"], [64, 2, 1, "", "set_p0"], [64, 2, 1, "", "set_state_from_file"], [64, 3, 1, "", "swap_interval"], [64, 2, 1, "", "write_results"]], "pycbc.inference.sampler.multinest": [[64, 1, 1, "", "MultinestSampler"]], "pycbc.inference.sampler.multinest.MultinestSampler": [[64, 2, 1, "", "check_if_finished"], [64, 2, 1, "", "checkpoint"], [64, 3, 1, "", "checkpoint_interval"], [64, 3, 1, "", "dlogz"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 2, 1, "", "get_posterior_samples"], [64, 3, 1, "", "importance_dlogz"], [64, 3, 1, "", "importance_logz"], [64, 3, 1, "", "io"], [64, 2, 1, "", "loglikelihood"], [64, 3, 1, "", "logz"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 3, 1, "", "niterations"], [64, 3, 1, "", "nlivepoints"], [64, 2, 1, "", "resume_from_checkpoint"], [64, 2, 1, "", "run"], [64, 3, 1, "", "samples"], [64, 2, 1, "", "set_initial_conditions"], [64, 2, 1, "", "set_state_from_file"], [64, 2, 1, "", "setup_output"], [64, 2, 1, "", "transform_prior"], [64, 2, 1, "", "write_results"]], "pycbc.inference.sampler.ptemcee": [[64, 1, 1, "", "PTEmceeSampler"]], "pycbc.inference.sampler.ptemcee.PTEmceeSampler": [[64, 3, 1, "", "adaptation_lag"], [64, 3, 1, "", "adaptation_time"], [64, 3, 1, "", "adaptive"], [64, 3, 1, "", "base_shape"], [64, 3, 1, "", "betas"], [64, 4, 1, "", "burn_in_class"], [64, 2, 1, "", "calculate_logevidence"], [64, 3, 1, "", "chain"], [64, 2, 1, "", "clear_samples"], [64, 2, 1, "", "compute_acf"], [64, 2, 1, "", "compute_acl"], [64, 3, 1, "", "ensemble"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 3, 1, "", "ntemps"], [64, 2, 1, "", "run_mcmc"], [64, 3, 1, "", "samples"], [64, 3, 1, "", "scale_factor"], [64, 2, 1, "", "set_state_from_file"], [64, 3, 1, "", "starting_betas"], [64, 2, 1, "", "write_results"]], "pycbc.inference.sampler.ultranest": [[64, 1, 1, "", "UltranestSampler"]], "pycbc.inference.sampler.ultranest.UltranestSampler": [[64, 2, 1, "", "checkpoint"], [64, 2, 1, "", "finalize"], [64, 2, 1, "", "from_config"], [64, 3, 1, "", "io"], [64, 3, 1, "", "logz"], [64, 3, 1, "", "logz_err"], [64, 3, 1, "", "model_stats"], [64, 4, 1, "", "name"], [64, 3, 1, "", "niterations"], [64, 2, 1, "", "resume_from_checkpoint"], [64, 2, 1, "", "run"], [64, 3, 1, "", "samples"], [64, 2, 1, "", "write_results"]], "pycbc.inject": [[65, 0, 0, "-", "inject"], [65, 0, 0, "-", "injfilterrejector"]], "pycbc.inject.inject": [[65, 1, 1, "", "CBCHDFInjectionSet"], [65, 1, 1, "", "IncoherentFromFileHDFInjectionSet"], [65, 1, 1, "", "InjectionSet"], [65, 1, 1, "", "RingdownHDFInjectionSet"], [65, 1, 1, "", "SGBurstInjectionSet"], [65, 5, 1, "", "get_hdf_injtype"], [65, 5, 1, "", "hdf_injtype_from_approximant"], [65, 5, 1, "", "legacy_approximant_name"], [65, 5, 1, "", "projector"], [65, 5, 1, "", "set_sim_data"]], "pycbc.inject.inject.CBCHDFInjectionSet": [[65, 2, 1, "", "apply"], [65, 2, 1, "", "end_times"], [65, 4, 1, "", "injtype"], [65, 2, 1, "", "make_strain_from_inj_object"], [65, 4, 1, "", "required_params"], [65, 2, 1, "", "supported_approximants"]], "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet": [[65, 2, 1, "", "apply"], [65, 2, 1, "", "end_times"], [65, 4, 1, "", "injtype"], [65, 2, 1, "", "loadts"], [65, 2, 1, "", "make_strain_from_inj_object"], [65, 4, 1, "", "required_params"], [65, 2, 1, "", "set_ref_time"], [65, 2, 1, "", "slice_and_taper"], [65, 2, 1, "", "supported_approximants"]], "pycbc.inject.inject.InjectionSet": [[65, 2, 1, "", "from_cli"], [65, 4, 1, "", "table"], [65, 2, 1, "", "write"]], "pycbc.inject.inject.RingdownHDFInjectionSet": [[65, 2, 1, "", "apply"], [65, 2, 1, "", "end_times"], [65, 4, 1, "", "injtype"], [65, 2, 1, "", "make_strain_from_inj_object"], [65, 4, 1, "", "required_params"], [65, 2, 1, "", "supported_approximants"]], "pycbc.inject.inject.SGBurstInjectionSet": [[65, 2, 1, "", "apply"], [65, 4, 1, "", "indoc"], [65, 4, 1, "", "table"]], "pycbc.inject.injfilterrejector": [[65, 1, 1, "", "InjFilterRejector"], [65, 5, 1, "", "insert_injfilterrejector_option_group"], [65, 5, 1, "", "insert_injfilterrejector_option_group_multi_ifo"]], "pycbc.inject.injfilterrejector.InjFilterRejector": [[65, 2, 1, "", "from_cli"], [65, 2, 1, "", "from_cli_multi_ifos"], [65, 2, 1, "", "from_cli_single_ifo"], [65, 2, 1, "", "generate_short_inj_from_inj"], [65, 2, 1, "", "template_segment_checker"]], "pycbc.io": [[66, 5, 1, "", "get_file"], [66, 0, 0, "-", "hdf"], [66, 0, 0, "-", "ligolw"], [66, 0, 0, "-", "live"], [66, 0, 0, "-", "record"]], "pycbc.io.hdf": [[66, 1, 1, "", "DataFromFiles"], [66, 1, 1, "", "DictArray"], [66, 1, 1, "", "FileData"], [66, 1, 1, "", "ForegroundTriggers"], [66, 1, 1, "", "HFile"], [66, 1, 1, "", "MultiifoStatmapData"], [66, 1, 1, "", "ReadByTemplate"], [66, 1, 1, "", "SingleDetTriggers"], [66, 1, 1, "", "StatmapData"], [66, 5, 1, "", "combine_and_copy"], [66, 5, 1, "", "dump_pickle_to_hdf"], [66, 5, 1, "", "dump_state"], [66, 5, 1, "", "get_all_subkeys"], [66, 5, 1, "", "get_chisq_from_file_choice"], [66, 5, 1, "", "load_hdf5_to_dict"], [66, 5, 1, "", "load_state"], [66, 5, 1, "", "name_all_datasets"], [66, 5, 1, "", "recursively_save_dict_contents_to_group"], [66, 5, 1, "", "save_dict_to_hdf5"]], "pycbc.io.hdf.DataFromFiles": [[66, 2, 1, "", "get_column"]], "pycbc.io.hdf.DictArray": [[66, 2, 1, "", "remove"], [66, 2, 1, "", "save"], [66, 2, 1, "", "select"]], "pycbc.io.hdf.FileData": [[66, 2, 1, "", "close"], [66, 2, 1, "", "get_column"], [66, 3, 1, "", "mask"]], "pycbc.io.hdf.ForegroundTriggers": [[66, 2, 1, "", "get_active_segments"], [66, 2, 1, "", "get_bankfile_array"], [66, 2, 1, "", "get_coincfile_array"], [66, 2, 1, "", "get_end_time"], [66, 2, 1, "", "get_ifos"], [66, 2, 1, "", "get_snglfile_array_dict"], [66, 3, 1, "", "sort_arr"], [66, 3, 1, "", "template_id"], [66, 2, 1, "", "to_coinc_hdf_object"], [66, 2, 1, "", "to_coinc_xml_object"], [66, 3, 1, "", "trig_id"]], "pycbc.io.hdf.HFile": [[66, 2, 1, "", "select"]], "pycbc.io.hdf.MultiifoStatmapData": [[66, 2, 1, "", "cluster"]], "pycbc.io.hdf.ReadByTemplate": [[66, 2, 1, "", "get_data"], [66, 2, 1, "", "set_template"]], "pycbc.io.hdf.SingleDetTriggers": [[66, 2, 1, "", "apply_mask"], [66, 3, 1, "", "approximant"], [66, 2, 1, "", "checkbank"], [66, 3, 1, "", "effective_spin"], [66, 3, 1, "", "end_time"], [66, 3, 1, "", "eta"], [66, 3, 1, "", "f_lower"], [66, 3, 1, "", "f_seobnrv2_peak"], [66, 3, 1, "", "f_seobnrv4_peak"], [66, 2, 1, "", "get_column"], [66, 2, 1, "", "get_param_names"], [66, 2, 1, "", "get_ranking"], [66, 3, 1, "", "inclination"], [66, 2, 1, "", "mask_to_n_loudest_clustered_events"], [66, 3, 1, "", "mass1"], [66, 3, 1, "", "mass2"], [66, 3, 1, "", "mchirp"], [66, 3, 1, "", "mtotal"], [66, 3, 1, "", "newsnr"], [66, 3, 1, "", "newsnr_sgveto"], [66, 3, 1, "", "newsnr_sgveto_psdvar"], [66, 3, 1, "", "newsnr_sgveto_psdvar_threshold"], [66, 3, 1, "", "psd_var_val"], [66, 3, 1, "", "rchisq"], [66, 3, 1, "", "sgchisq"], [66, 3, 1, "", "snr"], [66, 3, 1, "", "spin1x"], [66, 3, 1, "", "spin1y"], [66, 3, 1, "", "spin1z"], [66, 3, 1, "", "spin2x"], [66, 3, 1, "", "spin2y"], [66, 3, 1, "", "spin2z"], [66, 3, 1, "", "template_duration"], [66, 3, 1, "", "template_id"], [66, 2, 1, "", "trig_dict"], [66, 3, 1, "", "u_vals"]], "pycbc.io.hdf.StatmapData": [[66, 2, 1, "", "cluster"], [66, 2, 1, "", "save"]], "pycbc.io.ligolw": [[66, 1, 1, "", "LIGOLWContentHandler"], [66, 5, 1, "", "create_process_table"], [66, 5, 1, "", "default_null_value"], [66, 5, 1, "", "get_table_columns"], [66, 5, 1, "", "legacy_row_id_converter"], [66, 5, 1, "", "return_empty_sngl"], [66, 5, 1, "", "return_search_summary"]], "pycbc.io.ligolw.LIGOLWContentHandler": [[66, 2, 1, "", "endElementNS"], [66, 2, 1, "", "startColumn"], [66, 2, 1, "", "startStream"], [66, 2, 1, "", "startTable"]], "pycbc.io.live": [[66, 1, 1, "", "CandidateForGraceDB"], [66, 5, 1, "", "gracedb_tag_with_version"]], "pycbc.io.live.CandidateForGraceDB": [[66, 2, 1, "", "save"], [66, 2, 1, "", "upload"]], "pycbc.io.record": [[66, 1, 1, "", "FieldArray"], [66, 1, 1, "", "WaveformArray"]], "pycbc.io.record.FieldArray": [[66, 2, 1, "", "add_fields"], [66, 2, 1, "", "add_functions"], [66, 2, 1, "", "add_methods"], [66, 2, 1, "", "add_properties"], [66, 2, 1, "", "add_virtualfields"], [66, 2, 1, "", "addattr"], [66, 3, 1, "", "aliases"], [66, 2, 1, "", "append"], [66, 2, 1, "", "del_functions"], [66, 3, 1, "", "fieldnames"], [66, 3, 1, "", "fields"], [66, 2, 1, "", "from_arrays"], [66, 2, 1, "", "from_kwargs"], [66, 2, 1, "", "from_ligolw_table"], [66, 2, 1, "", "from_records"], [66, 3, 1, "", "functionlib"], [66, 4, 1, "", "name"], [66, 2, 1, "", "parse_boolargs"], [66, 2, 1, "", "parse_parameters"], [66, 2, 1, "", "sort"], [66, 2, 1, "", "to_array"], [66, 3, 1, "", "virtualfields"]], "pycbc.io.record.WaveformArray": [[66, 3, 1, "", "chi_eff"], [66, 3, 1, "", "eta"], [66, 3, 1, "", "mchirp"], [66, 3, 1, "", "mtotal"], [66, 3, 1, "", "primary_mass"], [66, 3, 1, "", "q"], [66, 3, 1, "", "remnant_mass"], [66, 3, 1, "", "secondary_mass"], [66, 3, 1, "", "spin1_a"], [66, 3, 1, "", "spin1_azimuthal"], [66, 3, 1, "", "spin1_polar"], [66, 3, 1, "", "spin2_a"], [66, 3, 1, "", "spin2_azimuthal"], [66, 3, 1, "", "spin2_polar"], [66, 3, 1, "", "spin_px"], [66, 3, 1, "", "spin_py"], [66, 3, 1, "", "spin_pz"], [66, 3, 1, "", "spin_sx"], [66, 3, 1, "", "spin_sy"], [66, 3, 1, "", "spin_sz"]], "pycbc.libutils": [[53, 5, 1, "", "get_ctypes_library"], [53, 5, 1, "", "get_libpath_from_dirlist"], [53, 5, 1, "", "import_optional"], [53, 5, 1, "", "pkg_config"], [53, 5, 1, "", "pkg_config_check_exists"], [53, 5, 1, "", "pkg_config_header_strings"], [53, 5, 1, "", "pkg_config_libdirs"]], "pycbc.mchirp_area": [[53, 5, 1, "", "calc_areas"], [53, 5, 1, "", "calc_probabilities"], [53, 5, 1, "", "from_cli"], [53, 5, 1, "", "get_area"], [53, 5, 1, "", "insert_args"], [53, 5, 1, "", "intmc"], [53, 5, 1, "", "redshift_estimation"], [53, 5, 1, "", "src_mass_from_z_det_mass"]], "pycbc.neutron_stars": [[67, 0, 0, "-", "eos_utils"], [67, 0, 0, "-", "pg_isso_solver"]], "pycbc.neutron_stars.eos_utils": [[67, 5, 1, "", "foucart18"], [67, 5, 1, "", "initialize_eos"], [67, 5, 1, "", "interp_grav_mass_to_baryon_mass"], [67, 5, 1, "", "interp_grav_mass_to_compactness"], [67, 5, 1, "", "load_ns_sequence"]], "pycbc.neutron_stars.pg_isso_solver": [[67, 5, 1, "", "ISCO_solution"], [67, 5, 1, "", "ISSO_eq_at_pole"], [67, 5, 1, "", "ISSO_eq_at_pole_dr"], [67, 5, 1, "", "ISSO_eq_at_pole_dr2"], [67, 5, 1, "", "PG_ISSO_eq"], [67, 5, 1, "", "PG_ISSO_eq_dr"], [67, 5, 1, "", "PG_ISSO_eq_dr2"], [67, 5, 1, "", "PG_ISSO_solver"]], "pycbc.noise": [[68, 0, 0, "-", "gaussian"], [68, 0, 0, "-", "reproduceable"]], "pycbc.noise.gaussian": [[68, 5, 1, "", "frequency_noise_from_psd"], [68, 5, 1, "", "noise_from_psd"], [68, 5, 1, "", "noise_from_string"]], "pycbc.noise.reproduceable": [[68, 5, 1, "", "block"], [68, 5, 1, "", "colored_noise"], [68, 5, 1, "", "noise_from_string"], [68, 5, 1, "", "normal"]], "pycbc.opt": [[53, 1, 1, "", "LimitedSizeDict"], [53, 5, 1, "", "getconf"], [53, 5, 1, "", "insert_optimization_option_group"], [53, 5, 1, "", "verify_optimization_options"]], "pycbc.pnutils": [[53, 5, 1, "", "A0"], [53, 5, 1, "", "A3"], [53, 5, 1, "", "chirp_distance"], [53, 5, 1, "", "energy"], [53, 5, 1, "", "energy_coefficients"], [53, 5, 1, "", "eta_mass1_to_mass2"], [53, 5, 1, "", "f_BKLISCO"], [53, 5, 1, "", "f_ERD"], [53, 5, 1, "", "f_FRD"], [53, 5, 1, "", "f_LRD"], [53, 5, 1, "", "f_LightRing"], [53, 5, 1, "", "f_SchwarzISCO"], [53, 5, 1, "", "frequency_cutoff_from_name"], [53, 5, 1, "", "frequency_to_velocity"], [53, 5, 1, "", "get_beta_sigma_from_aligned_spins"], [53, 5, 1, "", "get_final_freq"], [53, 5, 1, "", "get_freq"], [53, 5, 1, "", "get_inspiral_tf"], [53, 5, 1, "", "hybridEnergy"], [53, 5, 1, "", "hybrid_meco_frequency"], [53, 5, 1, "", "hybrid_meco_velocity"], [53, 5, 1, "", "jframe_to_l0frame"], [53, 5, 1, "", "kerr_lightring"], [53, 5, 1, "", "kerr_lightring_velocity"], [53, 5, 1, "", "l0frame_to_jframe"], [53, 5, 1, "", "mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma"], [53, 5, 1, "", "mass1_mass2_to_mchirp_eta"], [53, 5, 1, "", "mass1_mass2_to_mtotal_eta"], [53, 5, 1, "", "mass1_mass2_to_tau0_tau3"], [53, 5, 1, "", "mchirp_eta_to_mass1_mass2"], [53, 5, 1, "", "mchirp_mass1_to_mass2"], [53, 5, 1, "", "mchirp_q_to_mass1_mass2"], [53, 5, 1, "", "meco2"], [53, 5, 1, "", "meco_velocity"], [53, 5, 1, "", "megaparsecs_to_meters"], [53, 5, 1, "", "mtotal_eta_to_mass1_mass2"], [53, 5, 1, "", "nearest_larger_binary_number"], [53, 5, 1, "", "parsecs_to_meters"], [53, 5, 1, "", "solar_mass_to_kg"], [53, 5, 1, "", "t2_cutoff_frequency"], [53, 5, 1, "", "t2_cutoff_velocity"], [53, 5, 1, "", "t4_cutoff_velocity"], [53, 5, 1, "", "tau0_tau3_to_mass1_mass2"], [53, 5, 1, "", "tau0_tau3_to_mtotal_eta"], [53, 5, 1, "", "velocity_to_frequency"]], "pycbc.pool": [[53, 1, 1, "", "BroadcastPool"], [53, 1, 1, "", "SinglePool"], [53, 5, 1, "", "choose_pool"], [53, 5, 1, "", "is_main_process"], [53, 5, 1, "", "use_mpi"]], "pycbc.pool.BroadcastPool": [[53, 2, 1, "", "allmap"], [53, 2, 1, "", "broadcast"], [53, 2, 1, "", "map"]], "pycbc.pool.SinglePool": [[53, 2, 1, "", "broadcast"], [53, 2, 1, "", "map"]], "pycbc.population": [[69, 0, 0, "-", "fgmc_functions"], [69, 0, 0, "-", "fgmc_laguerre"], [69, 0, 0, "-", "fgmc_plots"], [69, 0, 0, "-", "live_pastro"], [69, 0, 0, "-", "live_pastro_utils"], [69, 0, 0, "-", "population_models"], [69, 0, 0, "-", "rates_functions"], [69, 0, 0, "-", "scale_injections"]], "pycbc.population.fgmc_functions": [[69, 1, 1, "", "BackgroundEventRate"], [69, 1, 1, "", "EventRate"], [69, 1, 1, "", "ForegroundEvents"], [69, 1, 1, "", "SignalEventRate"], [69, 5, 1, "", "alltimes"], [69, 5, 1, "", "filter_bin_lo_hi"], [69, 5, 1, "", "filter_tmplt_mchirp"], [69, 5, 1, "", "get_start_dur"], [69, 5, 1, "", "ifos_from_combo"], [69, 5, 1, "", "in_coinc_time_incl"], [69, 5, 1, "", "log_rho_bg"], [69, 5, 1, "", "log_rho_fg"], [69, 5, 1, "", "log_rho_fg_analytic"], [69, 5, 1, "", "read_full_data"], [69, 5, 1, "", "read_full_data_mchirp"], [69, 5, 1, "", "type_in_time"]], "pycbc.population.fgmc_functions.BackgroundEventRate": [[69, 2, 1, "", "add_background"], [69, 2, 1, "", "eval_pdf"], [69, 2, 1, "", "get_norms"], [69, 2, 1, "", "plot_bg"]], "pycbc.population.fgmc_functions.EventRate": [[69, 2, 1, "", "add_bank"], [69, 2, 1, "", "filter_templates"], [69, 2, 1, "", "get_ctypes"], [69, 2, 1, "", "get_livetimes"], [69, 2, 1, "", "in_coinc_time_excl"], [69, 2, 1, "", "make_bins"], [69, 2, 1, "", "moreifotimes"]], "pycbc.population.fgmc_functions.ForegroundEvents": [[69, 2, 1, "", "add_zerolag"], [69, 2, 1, "", "get_bg_pdf"], [69, 2, 1, "", "get_sg_pdf"]], "pycbc.population.fgmc_functions.SignalEventRate": [[69, 2, 1, "", "add_injections"], [69, 2, 1, "", "eval_pdf"], [69, 2, 1, "", "get_norms"], [69, 2, 1, "", "make_all_bins"], [69, 2, 1, "", "plot_inj"]], "pycbc.population.fgmc_laguerre": [[69, 1, 1, "", "augmented_rv_continuous"], [69, 1, 1, "", "count_posterior"]], "pycbc.population.fgmc_laguerre.augmented_rv_continuous": [[69, 2, 1, "", "hpd_interval"]], "pycbc.population.fgmc_laguerre.count_posterior": [[69, 2, 1, "", "expect"], [69, 2, 1, "", "p_bg"]], "pycbc.population.fgmc_plots": [[69, 5, 1, "", "dist_summary"], [69, 5, 1, "", "odds_summary"], [69, 5, 1, "", "plotdist"]], "pycbc.population.live_pastro": [[69, 5, 1, "", "check_template_param_bin_data"], [69, 5, 1, "", "noise_density_from_far"], [69, 5, 1, "", "read_template_bank_param"], [69, 5, 1, "", "signal_pdf_from_snr"], [69, 5, 1, "", "signal_rate_rescale"], [69, 5, 1, "", "signal_rate_trig_type"], [69, 5, 1, "", "template_param_bin_pa"], [69, 5, 1, "", "template_param_bin_types_farlim_pa"], [69, 5, 1, "", "template_param_bin_types_pa"]], "pycbc.population.live_pastro_utils": [[69, 1, 1, "", "PAstroData"], [69, 5, 1, "", "insert_live_pastro_option_group"]], "pycbc.population.live_pastro_utils.PAstroData": [[69, 2, 1, "", "apply_significance_limits"], [69, 2, 1, "", "do_pastro_calc"]], "pycbc.population.population_models": [[69, 5, 1, "", "average_time_between_signals"], [69, 5, 1, "", "coalescence_rate"], [69, 5, 1, "", "diff_lookback_time"], [69, 5, 1, "", "distance_from_rate"], [69, 5, 1, "", "merger_rate_density"], [69, 5, 1, "", "norm_redshift_distribution"], [69, 5, 1, "", "p_tau"], [69, 5, 1, "", "sfr_grb_2008"], [69, 5, 1, "", "sfr_madau_dickinson_2014"], [69, 5, 1, "", "sfr_madau_fragos_2017"], [69, 5, 1, "", "total_rate_upto_redshift"]], "pycbc.population.rates_functions": [[69, 5, 1, "", "draw_flat_samples"], [69, 5, 1, "", "draw_imf_samples"], [69, 5, 1, "", "draw_lnm_samples"], [69, 5, 1, "", "fgmc"], [69, 5, 1, "", "fit"], [69, 5, 1, "", "log_rho_fgmc"], [69, 5, 1, "", "mchirp_sampler_flat"], [69, 5, 1, "", "mchirp_sampler_imf"], [69, 5, 1, "", "mchirp_sampler_lnm"], [69, 5, 1, "", "prob_flat"], [69, 5, 1, "", "prob_imf"], [69, 5, 1, "", "prob_lnm"], [69, 5, 1, "", "process_full_data"], [69, 5, 1, "", "save_bkg_falloff"], [69, 5, 1, "", "skew_lognormal_samples"]], "pycbc.population.scale_injections": [[69, 5, 1, "", "astro_redshifts"], [69, 5, 1, "", "contracted_dVdc"], [69, 5, 1, "", "dlum_to_z"], [69, 5, 1, "", "estimate_vt"], [69, 5, 1, "", "inj_distance_pdf"], [69, 5, 1, "", "inj_mass_pdf"], [69, 5, 1, "", "inj_spin_pdf"], [69, 5, 1, "", "pdf_z_astro"], [69, 5, 1, "", "process_injections"], [69, 5, 1, "", "read_injections"]], "pycbc.psd": [[70, 0, 0, "-", "analytical"], [70, 0, 0, "-", "analytical_space"], [70, 5, 1, "", "associate_psds_to_multi_ifo_segments"], [70, 5, 1, "", "associate_psds_to_segments"], [70, 5, 1, "", "associate_psds_to_single_ifo_segments"], [70, 0, 0, "-", "estimate"], [70, 5, 1, "", "from_cli"], [70, 5, 1, "", "from_cli_multi_ifos"], [70, 5, 1, "", "from_cli_single_ifo"], [70, 5, 1, "", "generate_overlapping_psds"], [70, 5, 1, "", "insert_psd_option_group"], [70, 5, 1, "", "insert_psd_option_group_multi_ifo"], [70, 0, 0, "-", "read"], [70, 0, 0, "-", "variation"], [70, 5, 1, "", "verify_psd_options"], [70, 5, 1, "", "verify_psd_options_multi_ifo"]], "pycbc.psd.analytical": [[70, 5, 1, "", "AdVBNSOptimizedSensitivityP1200087"], [70, 5, 1, "", "AdVDesignSensitivityP1200087"], [70, 5, 1, "", "AdVEarlyHighSensitivityP1200087"], [70, 5, 1, "", "AdVEarlyLowSensitivityP1200087"], [70, 5, 1, "", "AdVLateHighSensitivityP1200087"], [70, 5, 1, "", "AdVLateLowSensitivityP1200087"], [70, 5, 1, "", "AdVMidHighSensitivityP1200087"], [70, 5, 1, "", "AdVMidLowSensitivityP1200087"], [70, 5, 1, "", "AdVO3LowT1800545"], [70, 5, 1, "", "AdVO4IntermediateT1800545"], [70, 5, 1, "", "AdVO4T1800545"], [70, 5, 1, "", "AdvVirgo"], [70, 5, 1, "", "CosmicExplorerP1600143"], [70, 5, 1, "", "CosmicExplorerPessimisticP1600143"], [70, 5, 1, "", "CosmicExplorerWidebandP1600143"], [70, 5, 1, "", "EinsteinTelescopeP1600143"], [70, 5, 1, "", "GEO"], [70, 5, 1, "", "GEOHF"], [70, 5, 1, "", "KAGRA"], [70, 5, 1, "", "KAGRA128MpcT1800545"], [70, 5, 1, "", "KAGRA25MpcT1800545"], [70, 5, 1, "", "KAGRA80MpcT1800545"], [70, 5, 1, "", "KAGRADesignSensitivityT1600593"], [70, 5, 1, "", "KAGRAEarlySensitivityT1600593"], [70, 5, 1, "", "KAGRALateSensitivityT1600593"], [70, 5, 1, "", "KAGRAMidSensitivityT1600593"], [70, 5, 1, "", "KAGRAOpeningSensitivityT1600593"], [70, 5, 1, "", "TAMA"], [70, 5, 1, "", "Virgo"], [70, 5, 1, "", "aLIGO140MpcT1800545"], [70, 5, 1, "", "aLIGO175MpcT1800545"], [70, 5, 1, "", "aLIGOAPlusDesignSensitivityT1800042"], [70, 5, 1, "", "aLIGOAdVO3LowT1800545"], [70, 5, 1, "", "aLIGOAdVO4IntermediateT1800545"], [70, 5, 1, "", "aLIGOAdVO4T1800545"], [70, 5, 1, "", "aLIGOBHBH20Deg"], [70, 5, 1, "", "aLIGOBHBH20DegGWINC"], [70, 5, 1, "", "aLIGOBNSOptimizedSensitivityP1200087"], [70, 5, 1, "", "aLIGODesignSensitivityP1200087"], [70, 5, 1, "", "aLIGODesignSensitivityT1800044"], [70, 5, 1, "", "aLIGOEarlyHighSensitivityP1200087"], [70, 5, 1, "", "aLIGOEarlyLowSensitivityP1200087"], [70, 5, 1, "", "aLIGOHighFrequency"], [70, 5, 1, "", "aLIGOHighFrequencyGWINC"], [70, 5, 1, "", "aLIGOKAGRA128MpcT1800545"], [70, 5, 1, "", "aLIGOKAGRA25MpcT1800545"], [70, 5, 1, "", "aLIGOKAGRA80MpcT1800545"], [70, 5, 1, "", "aLIGOLateHighSensitivityP1200087"], [70, 5, 1, "", "aLIGOLateLowSensitivityP1200087"], [70, 5, 1, "", "aLIGOMidHighSensitivityP1200087"], [70, 5, 1, "", "aLIGOMidLowSensitivityP1200087"], [70, 5, 1, "", "aLIGONSNSOpt"], [70, 5, 1, "", "aLIGONSNSOptGWINC"], [70, 5, 1, "", "aLIGONoSRMHighPower"], [70, 5, 1, "", "aLIGONoSRMLowPower"], [70, 5, 1, "", "aLIGONoSRMLowPowerGWINC"], [70, 5, 1, "", "aLIGOO3LowT1800545"], [70, 5, 1, "", "aLIGOQuantumBHBH20Deg"], [70, 5, 1, "", "aLIGOQuantumHighFrequency"], [70, 5, 1, "", "aLIGOQuantumNSNSOpt"], [70, 5, 1, "", "aLIGOQuantumNoSRMHighPower"], [70, 5, 1, "", "aLIGOQuantumNoSRMLowPower"], [70, 5, 1, "", "aLIGOQuantumZeroDetHighPower"], [70, 5, 1, "", "aLIGOQuantumZeroDetLowPower"], [70, 5, 1, "", "aLIGOThermal"], [70, 5, 1, "", "aLIGOZeroDetHighPower"], [70, 5, 1, "", "aLIGOZeroDetHighPowerGWINC"], [70, 5, 1, "", "aLIGOZeroDetLowPower"], [70, 5, 1, "", "aLIGOZeroDetLowPowerGWINC"], [70, 5, 1, "", "aLIGOaLIGO140MpcT1800545"], [70, 5, 1, "", "aLIGOaLIGO175MpcT1800545"], [70, 5, 1, "", "aLIGOaLIGODesignSensitivityT1800044"], [70, 5, 1, "", "aLIGOaLIGOO3LowT1800545"], [70, 5, 1, "", "eLIGOModel"], [70, 5, 1, "", "eLIGOShot"], [70, 5, 1, "", "flat_unity"], [70, 5, 1, "", "from_string"], [70, 5, 1, "", "get_lalsim_psd_list"], [70, 5, 1, "", "get_psd_model_list"], [70, 5, 1, "", "get_pycbc_psd_list"], [70, 5, 1, "", "iLIGOModel"], [70, 5, 1, "", "iLIGOSRD"], [70, 5, 1, "", "iLIGOSeismic"], [70, 5, 1, "", "iLIGOShot"], [70, 5, 1, "", "iLIGOThermal"]], "pycbc.psd.analytical_space": [[70, 5, 1, "", "analytical_csd_lisa_tdi_1p5_XY"], [70, 5, 1, "", "analytical_psd_lisa_tdi_1p5_AE"], [70, 5, 1, "", "analytical_psd_lisa_tdi_1p5_T"], [70, 5, 1, "", "analytical_psd_lisa_tdi_1p5_XYZ"], [70, 5, 1, "", "analytical_psd_lisa_tdi_2p0_XYZ"], [70, 5, 1, "", "averaged_lisa_fplus_sq_approx"], [70, 5, 1, "", "averaged_response_lisa_tdi_1p5"], [70, 5, 1, "", "averaged_response_lisa_tdi_2p0"], [70, 5, 1, "", "lisa_psd_components"], [70, 5, 1, "", "omega_length"], [70, 5, 1, "", "psd_lisa_acc_noise"], [70, 5, 1, "", "psd_lisa_oms_noise"], [70, 5, 1, "", "sensitivity_curve_lisa_SciRD"], [70, 5, 1, "", "sensitivity_curve_lisa_confusion"], [70, 5, 1, "", "sensitivity_curve_lisa_semi_analytical"], [70, 5, 1, "", "sh_transformed_psd_lisa_tdi_XYZ"]], "pycbc.psd.estimate": [[70, 5, 1, "", "bandlimited_interpolate"], [70, 5, 1, "", "interpolate"], [70, 5, 1, "", "inverse_spectrum_truncation"], [70, 5, 1, "", "median_bias"], [70, 5, 1, "", "welch"]], "pycbc.psd.read": [[70, 5, 1, "", "from_numpy_arrays"], [70, 5, 1, "", "from_txt"], [70, 5, 1, "", "from_xml"]], "pycbc.psd.variation": [[70, 5, 1, "", "calc_filt_psd_variation"], [70, 5, 1, "", "find_trigger_value"], [70, 5, 1, "", "mean_square"]], "pycbc.rate": [[53, 5, 1, "", "compute_efficiency"], [53, 5, 1, "", "compute_lower_limit"], [53, 5, 1, "", "compute_upper_limit"], [53, 5, 1, "", "compute_volume_vs_mass"], [53, 5, 1, "", "confidence_interval_min_width"], [53, 5, 1, "", "filter_injections_by_mass"], [53, 5, 1, "", "hpd_coverage"], [53, 5, 1, "", "hpd_credible_interval"], [53, 5, 1, "", "hpd_threshold"], [53, 5, 1, "", "integral_element"], [53, 5, 1, "", "integrate_efficiency"], [53, 5, 1, "", "mean_efficiency_volume"], [53, 5, 1, "", "normalize_pdf"]], "pycbc.results": [[71, 0, 0, "-", "color"], [71, 0, 0, "-", "dq"], [71, 0, 0, "-", "followup"], [71, 0, 0, "-", "layout"], [71, 0, 0, "-", "legacy_grb"], [71, 0, 0, "-", "metadata"], [71, 0, 0, "-", "mpld3_utils"], [71, 0, 0, "-", "plot"], [71, 0, 0, "-", "psd"], [71, 0, 0, "-", "pygrb_plotting_utils"], [71, 0, 0, "-", "pygrb_postprocessing_utils"], [71, 0, 0, "-", "render"], [71, 0, 0, "-", "scatter_histograms"], [71, 0, 0, "-", "str_utils"], [71, 0, 0, "-", "table_utils"], [71, 0, 0, "-", "versioning"]], "pycbc.results.color": [[71, 5, 1, "", "ifo_color"], [71, 5, 1, "", "source_color"]], "pycbc.results.dq": [[71, 5, 1, "", "get_summary_page_link"]], "pycbc.results.followup": [[71, 5, 1, "", "coinc_timeseries_plot"], [71, 5, 1, "", "columns_from_file_list"], [71, 5, 1, "", "get_gracedb_search_link"], [71, 5, 1, "", "times_to_links"], [71, 5, 1, "", "times_to_urls"], [71, 5, 1, "", "trigger_timeseries_plot"]], "pycbc.results.layout": [[71, 1, 1, "", "SectionNumber"], [71, 5, 1, "", "group_layout"], [71, 5, 1, "", "grouper"], [71, 5, 1, "", "single_layout"], [71, 5, 1, "", "two_column_layout"]], "pycbc.results.legacy_grb": [[71, 5, 1, "", "make_grb_segments_plot"]], "pycbc.results.metadata": [[71, 1, 1, "", "MetaParser"], [71, 5, 1, "", "html_escape"], [71, 5, 1, "", "load_html_metadata"], [71, 5, 1, "", "load_metadata_from_file"], [71, 5, 1, "", "load_png_metadata"], [71, 5, 1, "", "save_fig_with_metadata"], [71, 5, 1, "", "save_html_with_metadata"], [71, 5, 1, "", "save_pdf_with_metadata"], [71, 5, 1, "", "save_png_with_metadata"]], "pycbc.results.metadata.MetaParser": [[71, 2, 1, "", "handle_data"], [71, 2, 1, "", "handle_starttag"]], "pycbc.results.mpld3_utils": [[71, 1, 1, "", "ClickLink"], [71, 1, 1, "", "LineTooltip"], [71, 1, 1, "", "MPLSlide"], [71, 1, 1, "", "Tooltip"]], "pycbc.results.mpld3_utils.ClickLink": [[71, 4, 1, "", "JAVASCRIPT"]], "pycbc.results.mpld3_utils.LineTooltip": [[71, 4, 1, "", "JAVASCRIPT"]], "pycbc.results.mpld3_utils.MPLSlide": [[71, 4, 1, "", "JAVASCRIPT"]], "pycbc.results.mpld3_utils.Tooltip": [[71, 4, 1, "", "JAVASCRIPT"]], "pycbc.results.plot": [[71, 5, 1, "", "add_style_opt_to_parser"], [71, 5, 1, "", "hist_overflow"], [71, 5, 1, "", "set_style_from_cli"]], "pycbc.results.psd": [[71, 5, 1, "", "generate_asd_plot"]], "pycbc.results.pygrb_plotting_utils": [[71, 5, 1, "", "axis_max_value"], [71, 5, 1, "", "contour_plotter"], [71, 5, 1, "", "new_snr_chisq"], [71, 5, 1, "", "pygrb_plotter"]], "pycbc.results.pygrb_postprocessing_utils": [[71, 5, 1, "", "build_segment_filelist"], [71, 5, 1, "", "build_veto_filelist"], [71, 5, 1, "", "construct_trials"], [71, 5, 1, "", "extract_basic_trig_properties"], [71, 5, 1, "", "extract_ifos"], [71, 5, 1, "", "extract_ifos_and_vetoes"], [71, 5, 1, "", "extract_vetoes"], [71, 5, 1, "", "get_antenna_dist_factor"], [71, 5, 1, "", "get_antenna_factors"], [71, 5, 1, "", "get_antenna_single_response"], [71, 5, 1, "", "get_bestnrs"], [71, 5, 1, "", "get_coinc_snr"], [71, 5, 1, "", "get_grb_time"], [71, 5, 1, "", "get_id_numbers"], [71, 5, 1, "", "load_injections"], [71, 5, 1, "", "load_segment_dict"], [71, 5, 1, "", "load_segments_from_xml"], [71, 5, 1, "", "load_time_slides"], [71, 5, 1, "", "load_triggers"], [71, 5, 1, "", "load_xml_table"], [71, 5, 1, "", "max_median_stat"], [71, 5, 1, "", "mc_cal_wf_errs"], [71, 5, 1, "", "pygrb_add_bestnr_opts"], [71, 5, 1, "", "pygrb_add_injmc_opts"], [71, 5, 1, "", "pygrb_add_missed_injs_input_opt"], [71, 5, 1, "", "pygrb_initialize_plot_parser"], [71, 5, 1, "", "read_multiinspiral_timeslides_from_files"], [71, 5, 1, "", "read_seg_files"], [71, 5, 1, "", "slide_vetoes"], [71, 5, 1, "", "sort_stat"], [71, 5, 1, "", "sort_trigs"]], "pycbc.results.render": [[71, 5, 1, "", "get_embedded_config"], [71, 5, 1, "", "render_default"], [71, 5, 1, "", "render_glitchgram"], [71, 5, 1, "", "render_ignore"], [71, 5, 1, "", "render_text"], [71, 5, 1, "", "render_tmplt"], [71, 5, 1, "", "render_workflow_html_template"], [71, 5, 1, "", "setup_template_render"]], "pycbc.results.scatter_histograms": [[71, 5, 1, "", "construct_kde"], [71, 5, 1, "", "create_axes_grid"], [71, 5, 1, "", "create_density_plot"], [71, 5, 1, "", "create_marginalized_hist"], [71, 5, 1, "", "create_multidim_plot"], [71, 5, 1, "", "get_scale_fac"], [71, 5, 1, "", "reduce_ticks"], [71, 5, 1, "", "remove_common_offset"], [71, 5, 1, "", "set_marginal_histogram_title"]], "pycbc.results.str_utils": [[71, 5, 1, "", "drop_trailing_zeros"], [71, 5, 1, "", "format_value"], [71, 5, 1, "", "get_signum"], [71, 5, 1, "", "mathjax_html_header"]], "pycbc.results.table_utils": [[71, 5, 1, "", "html_table"], [71, 5, 1, "", "static_table"]], "pycbc.results.versioning": [[71, 5, 1, "", "create_versioning_page"], [71, 5, 1, "", "get_code_version_numbers"], [71, 5, 1, "", "get_library_version_info"], [71, 5, 1, "", "write_code_versions"], [71, 5, 1, "", "write_library_information"]], "pycbc.scheme": [[53, 1, 1, "", "CPUScheme"], [53, 1, 1, "", "CUDAScheme"], [53, 1, 1, "", "ChooseBySchemeDict"], [53, 1, 1, "", "DefaultScheme"], [53, 1, 1, "", "MKLScheme"], [53, 1, 1, "", "NumpyScheme"], [53, 1, 1, "", "Scheme"], [53, 5, 1, "", "clean_cuda"], [53, 5, 1, "", "cpuonly"], [53, 5, 1, "", "current_prefix"], [53, 5, 1, "", "from_cli"], [53, 5, 1, "", "insert_processing_option_group"], [53, 5, 1, "", "register_clean_cuda"], [53, 5, 1, "", "schemed"], [53, 5, 1, "", "verify_processing_options"]], "pycbc.sensitivity": [[53, 5, 1, "", "chirp_volume_montecarlo"], [53, 5, 1, "", "compute_search_efficiency_in_bins"], [53, 5, 1, "", "compute_search_volume_in_bins"], [53, 5, 1, "", "volume_binned_pylal"], [53, 5, 1, "", "volume_montecarlo"], [53, 5, 1, "", "volume_shell"], [53, 5, 1, "", "volume_to_distance_with_errors"]], "pycbc.strain": [[72, 0, 0, "-", "calibration"], [72, 0, 0, "-", "gate"], [72, 0, 0, "-", "lines"], [72, 5, 1, "", "read_model_from_config"], [72, 0, 0, "-", "recalibrate"], [72, 0, 0, "-", "strain"]], "pycbc.strain.calibration": [[72, 1, 1, "", "CubicSpline"], [72, 1, 1, "", "Recalibrate"]], "pycbc.strain.calibration.CubicSpline": [[72, 2, 1, "", "apply_calibration"], [72, 4, 1, "", "name"]], "pycbc.strain.calibration.Recalibrate": [[72, 2, 1, "", "apply_calibration"], [72, 2, 1, "", "from_config"], [72, 2, 1, "", "map_to_adjust"], [72, 4, 1, "", "name"]], "pycbc.strain.gate": [[72, 5, 1, "", "add_gate_option_group"], [72, 5, 1, "", "apply_gates_to_fd"], [72, 5, 1, "", "apply_gates_to_td"], [72, 5, 1, "", "gate_and_paint"], [72, 5, 1, "", "gates_from_cli"], [72, 5, 1, "", "psd_gates_from_cli"]], "pycbc.strain.lines": [[72, 5, 1, "", "avg_inner_product"], [72, 5, 1, "", "calibration_lines"], [72, 5, 1, "", "clean_data"], [72, 5, 1, "", "complex_median"], [72, 5, 1, "", "line_model"], [72, 5, 1, "", "matching_line"]], "pycbc.strain.recalibrate": [[72, 1, 1, "", "CubicSpline"], [72, 1, 1, "", "PhysicalModel"], [72, 1, 1, "", "Recalibrate"]], "pycbc.strain.recalibrate.CubicSpline": [[72, 2, 1, "", "apply_calibration"], [72, 4, 1, "", "name"]], "pycbc.strain.recalibrate.PhysicalModel": [[72, 2, 1, "", "adjust_strain"], [72, 2, 1, "", "from_config"], [72, 2, 1, "", "map_to_adjust"], [72, 4, 1, "", "name"], [72, 2, 1, "", "tf_from_file"], [72, 2, 1, "", "update_c"], [72, 2, 1, "", "update_g"], [72, 2, 1, "", "update_r"]], "pycbc.strain.recalibrate.Recalibrate": [[72, 2, 1, "", "apply_calibration"], [72, 2, 1, "", "from_config"], [72, 2, 1, "", "map_to_adjust"], [72, 4, 1, "", "name"]], "pycbc.strain.strain": [[72, 1, 1, "", "StrainBuffer"], [72, 1, 1, "", "StrainSegments"], [72, 5, 1, "", "create_memory_and_engine_for_class_based_fft"], [72, 5, 1, "", "detect_loud_glitches"], [72, 5, 1, "", "execute_cached_fft"], [72, 5, 1, "", "execute_cached_ifft"], [72, 5, 1, "", "from_cli"], [72, 5, 1, "", "from_cli_multi_ifos"], [72, 5, 1, "", "from_cli_single_ifo"], [72, 5, 1, "", "gate_data"], [72, 5, 1, "", "insert_strain_option_group"], [72, 5, 1, "", "insert_strain_option_group_multi_ifo"], [72, 5, 1, "", "next_power_of_2"], [72, 5, 1, "", "verify_strain_options"], [72, 5, 1, "", "verify_strain_options_multi_ifo"]], "pycbc.strain.strain.StrainBuffer": [[72, 2, 1, "", "add_hard_count"], [72, 2, 1, "", "advance"], [72, 2, 1, "", "check_psd_dist"], [72, 3, 1, "", "end_time"], [72, 2, 1, "", "from_cli"], [72, 2, 1, "", "invalidate_psd"], [72, 2, 1, "", "near_hwinj"], [72, 2, 1, "", "null_advance_strain"], [72, 2, 1, "", "overwhitened_data"], [72, 2, 1, "", "recalculate_psd"], [72, 3, 1, "", "start_time"]], "pycbc.strain.strain.StrainSegments": [[72, 2, 1, "", "fourier_segments"], [72, 2, 1, "", "from_cli"], [72, 2, 1, "", "from_cli_multi_ifos"], [72, 2, 1, "", "from_cli_single_ifo"], [72, 2, 1, "", "insert_segment_option_group"], [72, 2, 1, "", "insert_segment_option_group_multi_ifo"], [72, 4, 1, "", "required_opts_list"], [72, 2, 1, "", "verify_segment_options"], [72, 2, 1, "", "verify_segment_options_multi_ifo"]], "pycbc.tmpltbank": [[73, 0, 0, "-", "bank_conversions"], [73, 0, 0, "-", "bank_output_utils"], [73, 0, 0, "-", "brute_force_methods"], [73, 0, 0, "-", "calc_moments"], [73, 0, 0, "-", "coord_utils"], [73, 0, 0, "-", "lambda_mapping"], [73, 0, 0, "-", "lattice_utils"], [73, 0, 0, "-", "option_utils"], [73, 0, 0, "-", "partitioned_bank"]], "pycbc.tmpltbank.bank_conversions": [[73, 5, 1, "", "get_bank_property"]], "pycbc.tmpltbank.bank_output_utils": [[73, 5, 1, "", "calculate_ethinca_metric_comps"], [73, 5, 1, "", "convert_to_sngl_inspiral_table"], [73, 5, 1, "", "output_bank_to_file"], [73, 5, 1, "", "output_bank_to_hdf"], [73, 5, 1, "", "output_sngl_inspiral_table"]], "pycbc.tmpltbank.brute_force_methods": [[73, 5, 1, "", "find_xi_extrema_brute"], [73, 5, 1, "", "get_mass_distribution"], [73, 5, 1, "", "get_physical_covaried_masses"], [73, 5, 1, "", "stack_xi_direction_brute"]], "pycbc.tmpltbank.calc_moments": [[73, 5, 1, "", "calculate_metric"], [73, 5, 1, "", "calculate_metric_comp"], [73, 5, 1, "", "calculate_moment"], [73, 5, 1, "", "determine_eigen_directions"], [73, 5, 1, "", "get_moments"], [73, 5, 1, "", "interpolate_psd"]], "pycbc.tmpltbank.coord_utils": [[73, 5, 1, "", "calc_point_dist"], [73, 5, 1, "", "calc_point_dist_vary"], [73, 5, 1, "", "estimate_mass_range"], [73, 5, 1, "", "find_closest_calculated_frequencies"], [73, 5, 1, "", "find_max_and_min_frequencies"], [73, 5, 1, "", "get_conv_params"], [73, 5, 1, "", "get_cov_params"], [73, 5, 1, "", "get_covaried_params"], [73, 5, 1, "", "get_mu_params"], [73, 5, 1, "", "get_point_distance"], [73, 5, 1, "", "get_random_mass"], [73, 5, 1, "", "get_random_mass_point_particles"], [73, 5, 1, "", "outspiral_loop"], [73, 5, 1, "", "return_nearest_cutoff"], [73, 5, 1, "", "rotate_vector"], [73, 5, 1, "", "test_point_dist"]], "pycbc.tmpltbank.lambda_mapping": [[73, 5, 1, "", "ethinca_order_from_string"], [73, 5, 1, "", "generate_inverse_mapping"], [73, 5, 1, "", "generate_mapping"], [73, 5, 1, "", "get_chirp_params"], [73, 5, 1, "", "get_ethinca_orders"]], "pycbc.tmpltbank.lattice_utils": [[73, 5, 1, "", "generate_anstar_3d_lattice"], [73, 5, 1, "", "generate_hexagonal_lattice"]], "pycbc.tmpltbank.option_utils": [[73, 1, 1, "", "IndentedHelpFormatterWithNL"], [73, 5, 1, "", "check_ethinca_against_bank_params"], [73, 1, 1, "", "ethincaParameters"], [73, 5, 1, "", "get_options_from_group"], [73, 5, 1, "", "insert_base_bank_options"], [73, 5, 1, "", "insert_ethinca_metric_options"], [73, 5, 1, "", "insert_mass_range_option_group"], [73, 5, 1, "", "insert_metric_calculation_options"], [73, 1, 1, "", "massRangeParameters"], [73, 1, 1, "", "metricParameters"], [73, 5, 1, "", "verify_ethinca_metric_options"], [73, 5, 1, "", "verify_mass_range_options"], [73, 5, 1, "", "verify_metric_calculation_options"]], "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL": [[73, 2, 1, "", "format_description"], [73, 2, 1, "", "format_option"]], "pycbc.tmpltbank.option_utils.ethincaParameters": [[73, 2, 1, "", "from_argparse"]], "pycbc.tmpltbank.option_utils.massRangeParameters": [[73, 4, 1, "", "default_delta_bh_spin"], [73, 4, 1, "", "default_delta_ns_mass"], [73, 4, 1, "", "default_ns_eos"], [73, 4, 1, "", "default_nsbh_boundary_mass"], [73, 2, 1, "", "from_argparse"], [73, 2, 1, "", "is_outside_range"]], "pycbc.tmpltbank.option_utils.metricParameters": [[73, 3, 1, "", "evals"], [73, 3, 1, "", "evecs"], [73, 3, 1, "", "evecsCV"], [73, 2, 1, "", "from_argparse"], [73, 3, 1, "", "metric"], [73, 3, 1, "", "moments"], [73, 3, 1, "", "psd"], [73, 3, 1, "", "time_unprojected_metric"]], "pycbc.tmpltbank.partitioned_bank": [[73, 1, 1, "", "PartitionedTmpltbank"]], "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank": [[73, 2, 1, "", "add_point_by_chi_coords"], [73, 2, 1, "", "add_point_by_masses"], [73, 2, 1, "", "add_tmpltbank_from_hdf_file"], [73, 2, 1, "", "add_tmpltbank_from_xml_table"], [73, 2, 1, "", "calc_point_distance"], [73, 2, 1, "", "calc_point_distance_vary"], [73, 2, 1, "", "check_bin_existence"], [73, 2, 1, "", "find_point_bin"], [73, 2, 1, "", "get_freq_map_and_normalizations"], [73, 2, 1, "", "get_point_from_bins_and_idx"], [73, 2, 1, "", "output_all_points"], [73, 2, 1, "", "test_point_distance"], [73, 2, 1, "", "test_point_distance_vary"]], "pycbc.transforms": [[53, 1, 1, "", "AlignTotalSpin"], [53, 1, 1, "", "AlignedMassSpinToCartesianSpin"], [53, 1, 1, "", "BaseTransform"], [53, 1, 1, "", "CartesianSpin1ToSphericalSpin1"], [53, 1, 1, "", "CartesianSpin2ToSphericalSpin2"], [53, 1, 1, "", "CartesianSpinToAlignedMassSpin"], [53, 1, 1, "", "CartesianSpinToChiP"], [53, 1, 1, "", "CartesianSpinToPrecessionMassSpin"], [53, 1, 1, "", "CartesianToSpherical"], [53, 1, 1, "", "ChiPToCartesianSpin"], [53, 1, 1, "", "ChirpDistanceToDistance"], [53, 1, 1, "", "CustomTransform"], [53, 1, 1, "", "DistanceToChirpDistance"], [53, 1, 1, "", "DistanceToRedshift"], [53, 1, 1, "", "Exponent"], [53, 1, 1, "", "LambdaFromMultipleTOVFiles"], [53, 1, 1, "", "LambdaFromTOVFile"], [53, 1, 1, "", "Log"], [53, 1, 1, "", "Logistic"], [53, 1, 1, "", "Logit"], [53, 1, 1, "", "Mass1Mass2ToMchirpEta"], [53, 1, 1, "", "Mass1Mass2ToMchirpQ"], [53, 1, 1, "", "MchirpEtaToMass1Mass2"], [53, 1, 1, "", "MchirpQToMass1Mass2"], [53, 1, 1, "", "PrecessionMassSpinToCartesianSpin"], [53, 1, 1, "", "SphericalSpin1ToCartesianSpin1"], [53, 1, 1, "", "SphericalSpin2ToCartesianSpin2"], [53, 1, 1, "", "SphericalToCartesian"], [53, 5, 1, "", "apply_transforms"], [53, 5, 1, "", "compute_jacobian"], [53, 5, 1, "", "get_common_cbc_transforms"], [53, 5, 1, "", "order_transforms"], [53, 5, 1, "", "read_transforms_from_config"]], "pycbc.transforms.AlignTotalSpin": [[53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.AlignedMassSpinToCartesianSpin": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.BaseTransform": [[53, 2, 1, "", "format_output"], [53, 2, 1, "", "from_config"], [53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianSpin1ToSphericalSpin1": [[53, 4, 1, "", "name"]], "pycbc.transforms.CartesianSpin2ToSphericalSpin2": [[53, 4, 1, "", "name"]], "pycbc.transforms.CartesianSpinToAlignedMassSpin": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianSpinToChiP": [[53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianSpinToPrecessionMassSpin": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CartesianToSpherical": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.ChiPToCartesianSpin": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.ChirpDistanceToDistance": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.CustomTransform": [[53, 2, 1, "", "from_config"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.DistanceToChirpDistance": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.DistanceToRedshift": [[53, 4, 1, "", "inverse"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Exponent": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.LambdaFromMultipleTOVFiles": [[53, 3, 1, "", "distance"], [53, 2, 1, "", "from_config"], [53, 2, 1, "", "get_eos"], [53, 3, 1, "", "lambda_param"], [53, 3, 1, "", "map_file"], [53, 3, 1, "", "mass_param"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.LambdaFromTOVFile": [[53, 3, 1, "", "data"], [53, 3, 1, "", "distance"], [53, 2, 1, "", "from_config"], [53, 3, 1, "", "lambda_data"], [53, 2, 1, "", "lambda_from_tov_data"], [53, 3, 1, "", "lambda_param"], [53, 3, 1, "", "mass_data"], [53, 3, 1, "", "mass_param"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Log": [[53, 3, 1, "", "inputvar"], [53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 3, 1, "", "outputvar"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Logistic": [[53, 3, 1, "", "bounds"], [53, 2, 1, "", "from_config"], [53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Logit": [[53, 3, 1, "", "bounds"], [53, 2, 1, "", "from_config"], [53, 3, 1, "", "inputvar"], [53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 2, 1, "", "logistic"], [53, 2, 1, "", "logit"], [53, 4, 1, "", "name"], [53, 3, 1, "", "outputvar"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Mass1Mass2ToMchirpEta": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.Mass1Mass2ToMchirpQ": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.MchirpEtaToMass1Mass2": [[53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.MchirpQToMass1Mass2": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_jacobian"], [53, 2, 1, "", "inverse_transform"], [53, 2, 1, "", "jacobian"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.PrecessionMassSpinToCartesianSpin": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.transforms.SphericalSpin1ToCartesianSpin1": [[53, 4, 1, "", "inverse"], [53, 4, 1, "", "name"]], "pycbc.transforms.SphericalSpin2ToCartesianSpin2": [[53, 4, 1, "", "inverse"], [53, 4, 1, "", "name"]], "pycbc.transforms.SphericalToCartesian": [[53, 4, 1, "", "inverse"], [53, 2, 1, "", "inverse_transform"], [53, 4, 1, "", "name"], [53, 2, 1, "", "transform"]], "pycbc.types": [[74, 0, 0, "-", "aligned"], [74, 0, 0, "-", "array"], [74, 0, 0, "-", "array_cpu"], [74, 0, 0, "-", "config"], [74, 0, 0, "-", "frequencyseries"], [74, 0, 0, "-", "optparse"], [74, 0, 0, "-", "timeseries"]], "pycbc.types.aligned": [[74, 5, 1, "", "check_aligned"], [74, 5, 1, "", "empty"], [74, 5, 1, "", "zeros"]], "pycbc.types.array": [[74, 1, 1, "", "Array"], [74, 5, 1, "", "check_same_len_precision"], [74, 5, 1, "", "common_kind"], [74, 5, 1, "", "complex_same_precision_as"], [74, 5, 1, "", "empty"], [74, 5, 1, "", "force_precision_to_match"], [74, 5, 1, "", "load_array"], [74, 5, 1, "", "real_same_precision_as"], [74, 5, 1, "", "zeros"]], "pycbc.types.array.Array": [[74, 2, 1, "", "abs_arg_max"], [74, 2, 1, "", "abs_max_loc"], [74, 2, 1, "", "almost_equal_elem"], [74, 2, 1, "", "almost_equal_norm"], [74, 2, 1, "", "astype"], [74, 2, 1, "", "clear"], [74, 2, 1, "", "conj"], [74, 2, 1, "", "copy"], [74, 2, 1, "", "cumsum"], [74, 3, 1, "", "data"], [74, 2, 1, "", "dot"], [74, 3, 1, "", "dtype"], [74, 2, 1, "", "fill"], [74, 2, 1, "", "imag"], [74, 2, 1, "", "inner"], [74, 3, 1, "", "itemsize"], [74, 3, 1, "", "kind"], [74, 2, 1, "", "lal"], [74, 2, 1, "", "max"], [74, 2, 1, "", "max_loc"], [74, 2, 1, "", "min"], [74, 2, 1, "", "multiply_and_add"], [74, 3, 1, "", "nbytes"], [74, 3, 1, "", "ndim"], [74, 2, 1, "", "numpy"], [74, 3, 1, "", "precision"], [74, 3, 1, "", "ptr"], [74, 2, 1, "", "real"], [74, 2, 1, "", "resize"], [74, 2, 1, "", "roll"], [74, 2, 1, "", "save"], [74, 3, 1, "", "shape"], [74, 2, 1, "", "squared_norm"], [74, 2, 1, "", "sum"], [74, 2, 1, "", "take"], [74, 2, 1, "", "trim_zeros"], [74, 2, 1, "", "vdot"], [74, 2, 1, "", "view"], [74, 2, 1, "", "weighted_inner"]], "pycbc.types.array_cpu": [[74, 5, 1, "", "abs_arg_max"], [74, 5, 1, "", "abs_arg_max_complex"], [74, 5, 1, "", "abs_max_loc"], [74, 5, 1, "", "clear"], [74, 5, 1, "", "cumsum"], [74, 5, 1, "", "dot"], [74, 5, 1, "", "empty"], [74, 5, 1, "", "inner"], [74, 5, 1, "", "inner_real"], [74, 5, 1, "", "max"], [74, 5, 1, "", "max_loc"], [74, 5, 1, "", "min"], [74, 5, 1, "", "multiply_and_add"], [74, 5, 1, "", "numpy"], [74, 5, 1, "", "ptr"], [74, 5, 1, "", "squared_norm"], [74, 5, 1, "", "sum"], [74, 5, 1, "", "take"], [74, 5, 1, "", "vdot"], [74, 5, 1, "", "weighted_inner"], [74, 5, 1, "", "zeros"]], "pycbc.types.config": [[74, 1, 1, "", "DeepCopyableConfigParser"], [74, 1, 1, "", "InterpolatingConfigParser"]], "pycbc.types.config.InterpolatingConfigParser": [[74, 2, 1, "", "add_options_to_section"], [74, 2, 1, "", "check_duplicate_options"], [74, 2, 1, "", "from_cli"], [74, 2, 1, "", "get_opt_tag"], [74, 2, 1, "", "get_opt_tags"], [74, 2, 1, "", "get_subsections"], [74, 2, 1, "", "has_option_tag"], [74, 2, 1, "", "has_option_tags"], [74, 2, 1, "", "interpolate_string"], [74, 2, 1, "", "perform_extended_interpolation"], [74, 2, 1, "", "populate_shared_sections"], [74, 2, 1, "", "read_ini_file"], [74, 2, 1, "", "sanitize_newline"], [74, 2, 1, "", "sanity_check_subsections"], [74, 2, 1, "", "split_multi_sections"]], "pycbc.types.frequencyseries": [[74, 1, 1, "", "FrequencySeries"], [74, 5, 1, "", "load_frequencyseries"]], "pycbc.types.frequencyseries.FrequencySeries": [[74, 2, 1, "", "almost_equal_elem"], [74, 2, 1, "", "almost_equal_norm"], [74, 2, 1, "", "at_frequency"], [74, 2, 1, "", "cyclic_time_shift"], [74, 3, 1, "", "delta_f"], [74, 3, 1, "", "delta_t"], [74, 3, 1, "", "duration"], [74, 3, 1, "", "end_time"], [74, 3, 1, "", "epoch"], [74, 2, 1, "", "get_delta_f"], [74, 2, 1, "", "get_epoch"], [74, 2, 1, "", "get_sample_frequencies"], [74, 2, 1, "", "lal"], [74, 2, 1, "", "match"], [74, 2, 1, "", "plot"], [74, 3, 1, "", "sample_frequencies"], [74, 3, 1, "", "sample_rate"], [74, 2, 1, "", "save"], [74, 3, 1, "", "start_time"], [74, 2, 1, "", "to_frequencyseries"], [74, 2, 1, "", "to_timeseries"]], "pycbc.types.optparse": [[74, 1, 1, "", "DictOptionAction"], [74, 1, 1, "", "DictWithDefaultReturn"], [74, 1, 1, "", "MultiDetDictOptionAction"], [74, 1, 1, "", "MultiDetMultiColonOptionAction"], [74, 1, 1, "", "MultiDetOptionAction"], [74, 1, 1, "", "MultiDetOptionActionSpecial"], [74, 1, 1, "", "MultiDetOptionAppendAction"], [74, 5, 1, "", "convert_to_process_params_dict"], [74, 5, 1, "", "copy_opts_for_single_ifo"], [74, 5, 1, "", "ensure_one_opt"], [74, 5, 1, "", "ensure_one_opt_multi_ifo"], [74, 5, 1, "", "nonnegative_float"], [74, 5, 1, "", "nonnegative_int"], [74, 5, 1, "", "positive_float"], [74, 5, 1, "", "positive_int"], [74, 5, 1, "", "required_opts"], [74, 5, 1, "", "required_opts_multi_ifo"]], "pycbc.types.optparse.DictWithDefaultReturn": [[74, 4, 1, "", "default_set"], [74, 4, 1, "", "ifo_set"]], "pycbc.types.timeseries": [[74, 1, 1, "", "TimeSeries"], [74, 5, 1, "", "load_timeseries"]], "pycbc.types.timeseries.TimeSeries": [[74, 2, 1, "", "add_into"], [74, 2, 1, "", "almost_equal_elem"], [74, 2, 1, "", "almost_equal_norm"], [74, 2, 1, "", "append_zeros"], [74, 2, 1, "", "at_time"], [74, 2, 1, "", "at_times"], [74, 2, 1, "", "crop"], [74, 2, 1, "", "cyclic_time_shift"], [74, 3, 1, "", "delta_f"], [74, 3, 1, "", "delta_t"], [74, 2, 1, "", "detrend"], [74, 3, 1, "", "duration"], [74, 3, 1, "", "end_time"], [74, 2, 1, "", "epoch_close"], [74, 2, 1, "", "filter_psd"], [74, 2, 1, "", "fir_zero_filter"], [74, 2, 1, "", "gate"], [74, 2, 1, "", "get_delta_t"], [74, 2, 1, "", "get_duration"], [74, 2, 1, "", "get_end_time"], [74, 2, 1, "", "get_sample_rate"], [74, 2, 1, "", "get_sample_times"], [74, 2, 1, "", "highpass_fir"], [74, 2, 1, "", "inject"], [74, 2, 1, "", "lal"], [74, 2, 1, "", "lowpass_fir"], [74, 2, 1, "", "match"], [74, 2, 1, "", "notch_fir"], [74, 2, 1, "", "plot"], [74, 2, 1, "", "prepend_zeros"], [74, 2, 1, "", "psd"], [74, 2, 1, "", "qtransform"], [74, 2, 1, "", "resample"], [74, 3, 1, "", "sample_rate"], [74, 2, 1, "", "sample_rate_close"], [74, 3, 1, "", "sample_times"], [74, 2, 1, "", "save"], [74, 2, 1, "", "save_to_wav"], [74, 3, 1, "", "start_time"], [74, 2, 1, "", "time_slice"], [74, 2, 1, "", "to_astropy"], [74, 2, 1, "", "to_frequencyseries"], [74, 2, 1, "", "to_timeseries"], [74, 2, 1, "", "whiten"]], "pycbc.vetoes": [[75, 0, 0, "-", "autochisq"], [75, 0, 0, "-", "bank_chisq"], [75, 0, 0, "-", "chisq"], [75, 0, 0, "-", "chisq_cpu"], [75, 0, 0, "-", "sgchisq"]], "pycbc.vetoes.autochisq": [[75, 1, 1, "", "SingleDetAutoChisq"], [75, 1, 1, "", "SingleDetSkyMaxAutoChisq"], [75, 5, 1, "", "autochisq_from_precomputed"]], "pycbc.vetoes.autochisq.SingleDetAutoChisq": [[75, 2, 1, "", "values"]], "pycbc.vetoes.autochisq.SingleDetSkyMaxAutoChisq": [[75, 2, 1, "", "values"]], "pycbc.vetoes.bank_chisq": [[75, 1, 1, "", "SingleDetBankVeto"], [75, 1, 1, "", "SingleDetSkyMaxBankVeto"], [75, 5, 1, "", "bank_chisq_from_filters"], [75, 5, 1, "", "segment_snrs"], [75, 5, 1, "", "template_overlaps"]], "pycbc.vetoes.bank_chisq.SingleDetBankVeto": [[75, 2, 1, "", "cache_overlaps"], [75, 2, 1, "", "cache_segment_snrs"], [75, 2, 1, "", "values"]], "pycbc.vetoes.bank_chisq.SingleDetSkyMaxBankVeto": [[75, 2, 1, "", "values"]], "pycbc.vetoes.chisq": [[75, 1, 1, "", "SingleDetPowerChisq"], [75, 1, 1, "", "SingleDetSkyMaxPowerChisq"], [75, 5, 1, "", "chisq_accum_bin"], [75, 5, 1, "", "fastest_power_chisq_at_points"], [75, 5, 1, "", "power_chisq"], [75, 5, 1, "", "power_chisq_at_points_from_precomputed"], [75, 5, 1, "", "power_chisq_bins"], [75, 5, 1, "", "power_chisq_bins_from_sigmasq_series"], [75, 5, 1, "", "power_chisq_from_precomputed"], [75, 5, 1, "", "shift_sum"]], "pycbc.vetoes.chisq.SingleDetPowerChisq": [[75, 2, 1, "", "cached_chisq_bins"], [75, 2, 1, "", "parse_option"], [75, 2, 1, "", "values"]], "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq": [[75, 2, 1, "", "calculate_chisq_bins"], [75, 2, 1, "", "values"]], "pycbc.vetoes.chisq_cpu": [[75, 5, 1, "", "chisq_accum_bin"], [75, 5, 1, "", "chisq_accum_bin_cython"], [75, 5, 1, "", "chisq_accum_bin_numpy"], [75, 5, 1, "", "point_chisq_code"], [75, 5, 1, "", "shift_sum"]], "pycbc.vetoes.sgchisq": [[75, 1, 1, "", "SingleDetSGChisq"]], "pycbc.vetoes.sgchisq.SingleDetSGChisq": [[75, 2, 1, "", "from_cli"], [75, 2, 1, "", "insert_option_group"], [75, 4, 1, "", "returns"], [75, 2, 1, "", "values"]], "pycbc.waveform": [[76, 0, 0, "-", "bank"], [76, 0, 0, "-", "compress"], [76, 0, 0, "-", "decompress_cpu"], [76, 0, 0, "-", "decompress_cpu_cython"], [76, 0, 0, "-", "generator"], [76, 0, 0, "-", "multiband"], [76, 0, 0, "-", "nltides"], [76, 0, 0, "-", "parameters"], [76, 0, 0, "-", "plugin"], [76, 0, 0, "-", "premerger"], [76, 0, 0, "-", "ringdown"], [76, 0, 0, "-", "sinegauss"], [76, 0, 0, "-", "spa_tmplt"], [76, 0, 0, "-", "spa_tmplt_cpu"], [76, 0, 0, "-", "supernovae"], [76, 0, 0, "-", "utils"], [76, 0, 0, "-", "utils_cpu"], [76, 0, 0, "-", "waveform"], [76, 0, 0, "-", "waveform_modes"]], "pycbc.waveform.bank": [[76, 1, 1, "", "FilterBank"], [76, 1, 1, "", "FilterBankSkyMax"], [76, 1, 1, "", "LiveFilterBank"], [76, 1, 1, "", "TemplateBank"], [76, 5, 1, "", "add_approximant_arg"], [76, 5, 1, "", "boolargs_from_apprxstr"], [76, 5, 1, "", "find_variable_start_frequency"], [76, 5, 1, "", "parse_approximant_arg"], [76, 5, 1, "", "sigma_cached"], [76, 5, 1, "", "tuple_to_hash"]], "pycbc.waveform.bank.FilterBank": [[76, 2, 1, "", "generate_with_delta_f_and_max_freq"], [76, 2, 1, "", "get_decompressed_waveform"]], "pycbc.waveform.bank.LiveFilterBank": [[76, 2, 1, "", "get_template"], [76, 2, 1, "", "getslice"], [76, 2, 1, "", "id_from_param"], [76, 2, 1, "", "round_up"]], "pycbc.waveform.bank.TemplateBank": [[76, 2, 1, "", "approximant"], [76, 2, 1, "", "end_frequency"], [76, 2, 1, "", "ensure_hash"], [76, 2, 1, "", "ensure_standard_filter_columns"], [76, 4, 1, "", "extra_args"], [76, 4, 1, "", "filehandler"], [76, 4, 1, "", "has_compressed_waveforms"], [76, 4, 1, "", "indoc"], [76, 3, 1, "", "parameters"], [76, 2, 1, "", "parse_approximant"], [76, 4, 1, "", "table"], [76, 2, 1, "", "template_thinning"], [76, 2, 1, "", "write_to_hdf"]], "pycbc.waveform.compress": [[76, 1, 1, "", "CompressedWaveform"], [76, 5, 1, "", "compress_waveform"], [76, 5, 1, "", "fd_decompress"], [76, 5, 1, "", "inline_linear_interp"], [76, 5, 1, "", "mchirp_compression"], [76, 5, 1, "", "rough_time_estimate"], [76, 5, 1, "", "spa_compression"], [76, 5, 1, "", "vecdiff"]], "pycbc.waveform.compress.CompressedWaveform": [[76, 3, 1, "", "amplitude"], [76, 2, 1, "", "clear_cache"], [76, 2, 1, "", "decompress"], [76, 2, 1, "", "from_hdf"], [76, 4, 1, "", "interpolation"], [76, 4, 1, "", "load_to_memory"], [76, 4, 1, "", "mismatch"], [76, 3, 1, "", "phase"], [76, 4, 1, "", "precision"], [76, 3, 1, "", "sample_points"], [76, 4, 1, "", "tolerance"], [76, 2, 1, "", "write_to_hdf"]], "pycbc.waveform.decompress_cpu": [[76, 5, 1, "", "inline_linear_interp"]], "pycbc.waveform.decompress_cpu_cython": [[76, 5, 1, "", "decomp_ccode_double"], [76, 5, 1, "", "decomp_ccode_float"]], "pycbc.waveform.generator": [[76, 1, 1, "", "BaseCBCGenerator"], [76, 1, 1, "", "BaseFDomainDetFrameGenerator"], [76, 1, 1, "", "BaseGenerator"], [76, 1, 1, "", "FDomainCBCGenerator"], [76, 1, 1, "", "FDomainCBCModesGenerator"], [76, 1, 1, "", "FDomainDetFrameGenerator"], [76, 1, 1, "", "FDomainDetFrameModesGenerator"], [76, 1, 1, "", "FDomainDetFrameTwoPolGenerator"], [76, 1, 1, "", "FDomainDetFrameTwoPolNoRespGenerator"], [76, 1, 1, "", "FDomainFreqTauRingdownGenerator"], [76, 1, 1, "", "FDomainMassSpinRingdownGenerator"], [76, 1, 1, "", "TDomainCBCGenerator"], [76, 1, 1, "", "TDomainCBCModesGenerator"], [76, 1, 1, "", "TDomainFreqTauRingdownGenerator"], [76, 1, 1, "", "TDomainMassSpinRingdownGenerator"], [76, 1, 1, "", "TDomainSupernovaeGenerator"], [76, 5, 1, "", "select_waveform_generator"], [76, 5, 1, "", "select_waveform_modes_generator"]], "pycbc.waveform.generator.BaseCBCGenerator": [[76, 4, 1, "", "possible_args"]], "pycbc.waveform.generator.BaseFDomainDetFrameGenerator": [[76, 4, 1, "", "current_params"], [76, 4, 1, "", "detector_names"], [76, 4, 1, "", "detectors"], [76, 3, 1, "", "epoch"], [76, 4, 1, "", "frozen_location_args"], [76, 2, 1, "", "generate"], [76, 4, 1, "", "location_args"], [76, 4, 1, "", "rframe_generator"], [76, 2, 1, "", "select_rframe_generator"], [76, 2, 1, "", "set_epoch"], [76, 3, 1, "", "static_args"], [76, 4, 1, "", "variable_args"]], "pycbc.waveform.generator.BaseGenerator": [[76, 4, 1, "", "current_params"], [76, 4, 1, "", "frozen_params"], [76, 2, 1, "", "generate"], [76, 4, 1, "", "generator"], [76, 3, 1, "", "static_args"], [76, 4, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameGenerator": [[76, 4, 1, "", "current_params"], [76, 4, 1, "", "detector_names"], [76, 4, 1, "", "detectors"], [76, 4, 1, "", "epoch"], [76, 4, 1, "", "frozen_location_args"], [76, 2, 1, "", "generate"], [76, 4, 1, "", "location_args"], [76, 4, 1, "", "rframe_generator"], [76, 2, 1, "", "select_rframe_generator"], [76, 4, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameModesGenerator": [[76, 4, 1, "", "current_params"], [76, 4, 1, "", "detector_names"], [76, 4, 1, "", "detectors"], [76, 4, 1, "", "epoch"], [76, 4, 1, "", "frozen_location_args"], [76, 2, 1, "", "generate"], [76, 4, 1, "", "location_args"], [76, 4, 1, "", "rframe_generator"], [76, 2, 1, "", "select_rframe_generator"], [76, 4, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator": [[76, 4, 1, "", "current_params"], [76, 4, 1, "", "detector_names"], [76, 4, 1, "", "detectors"], [76, 4, 1, "", "epoch"], [76, 4, 1, "", "frozen_location_args"], [76, 2, 1, "", "generate"], [76, 4, 1, "", "location_args"], [76, 4, 1, "", "rframe_generator"], [76, 2, 1, "", "select_rframe_generator"], [76, 4, 1, "", "variable_args"]], "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator": [[76, 4, 1, "", "current_params"], [76, 4, 1, "", "detector_names"], [76, 4, 1, "", "detectors"], [76, 4, 1, "", "epoch"], [76, 4, 1, "", "frozen_location_args"], [76, 2, 1, "", "generate"], [76, 4, 1, "", "rframe_generator"], [76, 2, 1, "", "select_rframe_generator"], [76, 4, 1, "", "variable_args"]], "pycbc.waveform.multiband": [[76, 5, 1, "", "multiband_fd_waveform"]], "pycbc.waveform.nltides": [[76, 5, 1, "", "nltides_fourier_phase_difference"], [76, 5, 1, "", "nonlinear_tidal_spa"]], "pycbc.waveform.parameters": [[76, 1, 1, "", "Parameter"], [76, 1, 1, "", "ParameterList"]], "pycbc.waveform.parameters.Parameter": [[76, 2, 1, "", "docstr"]], "pycbc.waveform.parameters.ParameterList": [[76, 3, 1, "", "asdict"], [76, 3, 1, "", "aslist"], [76, 2, 1, "", "default_dict"], [76, 2, 1, "", "defaults"], [76, 3, 1, "", "description_dict"], [76, 3, 1, "", "descriptions"], [76, 2, 1, "", "docstr"], [76, 3, 1, "", "dtype_dict"], [76, 3, 1, "", "dtypes"], [76, 3, 1, "", "label_dict"], [76, 3, 1, "", "labels"], [76, 3, 1, "", "names"], [76, 3, 1, "", "nodefaults"]], "pycbc.waveform.plugin": [[76, 5, 1, "", "add_custom_waveform"], [76, 5, 1, "", "add_length_estimator"], [76, 5, 1, "", "retrieve_waveform_plugins"]], "pycbc.waveform.premerger": [[76, 5, 1, "", "premerger_taylorf2"]], "pycbc.waveform.ringdown": [[76, 5, 1, "", "Kerr_factor"], [76, 5, 1, "", "fd_damped_sinusoid"], [76, 5, 1, "", "fd_output_vector"], [76, 5, 1, "", "format_lmns"], [76, 5, 1, "", "get_fd_from_final_mass_spin"], [76, 5, 1, "", "get_fd_from_freqtau"], [76, 5, 1, "", "get_td_from_final_mass_spin"], [76, 5, 1, "", "get_td_from_freqtau"], [76, 5, 1, "", "lm_amps_phases"], [76, 5, 1, "", "lm_arbitrary_harmonics"], [76, 5, 1, "", "lm_deltaf"], [76, 5, 1, "", "lm_deltat"], [76, 5, 1, "", "lm_ffinal"], [76, 5, 1, "", "lm_freqs_taus"], [76, 5, 1, "", "lm_tfinal"], [76, 5, 1, "", "multimode_base"], [76, 5, 1, "", "parse_mode"], [76, 5, 1, "", "props"], [76, 5, 1, "", "qnm_freq_decay"], [76, 5, 1, "", "qnm_time_decay"], [76, 5, 1, "", "spher_harms"], [76, 5, 1, "", "td_damped_sinusoid"], [76, 5, 1, "", "td_output_vector"]], "pycbc.waveform.sinegauss": [[76, 5, 1, "", "fd_sine_gaussian"]], "pycbc.waveform.spa_tmplt": [[76, 5, 1, "", "findchirp_chirptime"], [76, 5, 1, "", "spa_amplitude_factor"], [76, 5, 1, "", "spa_distance"], [76, 5, 1, "", "spa_length_in_time"], [76, 5, 1, "", "spa_tmplt"], [76, 5, 1, "", "spa_tmplt_end"], [76, 5, 1, "", "spa_tmplt_engine"], [76, 5, 1, "", "spa_tmplt_norm"], [76, 5, 1, "", "spa_tmplt_precondition"]], "pycbc.waveform.spa_tmplt_cpu": [[76, 5, 1, "", "cbrt_lookup"], [76, 5, 1, "", "get_cbrt"], [76, 5, 1, "", "get_log"], [76, 5, 1, "", "logv_lookup"], [76, 5, 1, "", "spa_tmplt_engine"], [76, 5, 1, "", "spa_tmplt_inline_sequence"]], "pycbc.waveform.supernovae": [[76, 5, 1, "", "get_corecollapse_bounce"]], "pycbc.waveform.utils": [[76, 5, 1, "", "amplitude_from_frequencyseries"], [76, 5, 1, "", "amplitude_from_polarizations"], [76, 5, 1, "", "apply_fd_time_shift"], [76, 5, 1, "", "apply_fseries_time_shift"], [76, 5, 1, "", "ceilpow2"], [76, 5, 1, "", "coalign_waveforms"], [76, 5, 1, "", "fd_taper"], [76, 5, 1, "", "fd_to_td"], [76, 5, 1, "", "frequency_from_polarizations"], [76, 5, 1, "", "phase_from_frequencyseries"], [76, 5, 1, "", "phase_from_polarizations"], [76, 5, 1, "", "taper_timeseries"], [76, 5, 1, "", "td_taper"], [76, 5, 1, "", "time_from_frequencyseries"]], "pycbc.waveform.utils_cpu": [[76, 5, 1, "", "apply_fseries_time_shift"], [76, 5, 1, "", "fstimeshift"], [76, 5, 1, "", "fstimeshift32"]], "pycbc.waveform.waveform": [[76, 6, 1, "", "FailedWaveformError"], [76, 6, 1, "", "NoWaveformError"], [76, 5, 1, "", "fd_approximants"], [76, 5, 1, "", "filter_approximants"], [76, 5, 1, "", "get_fd_det_waveform"], [76, 5, 1, "", "get_fd_det_waveform_sequence"], [76, 5, 1, "", "get_fd_waveform"], [76, 5, 1, "", "get_fd_waveform_from_td"], [76, 5, 1, "", "get_fd_waveform_sequence"], [76, 5, 1, "", "get_sgburst_waveform"], [76, 5, 1, "", "get_td_det_waveform_from_fd_det"], [76, 5, 1, "", "get_td_waveform"], [76, 5, 1, "", "get_td_waveform_from_fd"], [76, 5, 1, "", "get_template_amplitude_norm"], [76, 5, 1, "", "get_two_pol_waveform_filter"], [76, 5, 1, "", "get_waveform_end_frequency"], [76, 5, 1, "", "get_waveform_filter"], [76, 5, 1, "", "get_waveform_filter_length_in_time"], [76, 5, 1, "", "get_waveform_filter_norm"], [76, 5, 1, "", "print_fd_approximants"], [76, 5, 1, "", "print_sgburst_approximants"], [76, 5, 1, "", "print_td_approximants"], [76, 5, 1, "", "sgburst_approximants"], [76, 5, 1, "", "td_approximants"], [76, 5, 1, "", "td_waveform_to_fd_waveform"], [76, 5, 1, "", "waveform_norm_exists"]], "pycbc.waveform.waveform_modes": [[76, 5, 1, "", "default_modes"], [76, 5, 1, "", "fd_waveform_mode_approximants"], [76, 5, 1, "", "get_fd_waveform_modes"], [76, 5, 1, "", "get_glm"], [76, 5, 1, "", "get_imrphenomxh_modes"], [76, 5, 1, "", "get_nrsur_modes"], [76, 5, 1, "", "get_td_waveform_modes"], [76, 5, 1, "", "sum_modes"], [76, 5, 1, "", "td_waveform_mode_approximants"]], "pycbc.workflow": [[77, 0, 0, "-", "coincidence"], [77, 0, 0, "-", "configparser_test"], [77, 0, 0, "-", "configuration"], [77, 0, 0, "-", "core"], [77, 0, 0, "-", "datafind"], [77, 0, 0, "-", "dq"], [77, 0, 0, "-", "grb_utils"], [77, 0, 0, "-", "inference_followups"], [77, 0, 0, "-", "injection"], [77, 0, 0, "-", "jobsetup"], [77, 0, 0, "-", "matched_filter"], [77, 0, 0, "-", "minifollowups"], [77, 0, 0, "-", "pegasus_sites"], [77, 0, 0, "-", "pegasus_workflow"], [77, 0, 0, "-", "plotting"], [77, 0, 0, "-", "psd"], [77, 0, 0, "-", "psdfiles"], [77, 0, 0, "-", "segment"], [77, 0, 0, "-", "splittable"], [77, 0, 0, "-", "tmpltbank"]], "pycbc.workflow.coincidence": [[77, 1, 1, "", "CensorForeground"], [77, 1, 1, "", "MergeExecutable"], [77, 1, 1, "", "PyCBCAddStatmap"], [77, 1, 1, "", "PyCBCBank2HDFExecutable"], [77, 1, 1, "", "PyCBCCombineStatmap"], [77, 1, 1, "", "PyCBCDistributeBackgroundBins"], [77, 1, 1, "", "PyCBCExcludeZerolag"], [77, 1, 1, "", "PyCBCFindCoincExecutable"], [77, 1, 1, "", "PyCBCFindSnglsExecutable"], [77, 1, 1, "", "PyCBCFitByTemplateExecutable"], [77, 1, 1, "", "PyCBCFitOverParamExecutable"], [77, 1, 1, "", "PyCBCHDFInjFindExecutable"], [77, 1, 1, "", "PyCBCSnglsStatMapExecutable"], [77, 1, 1, "", "PyCBCSnglsStatMapInjExecutable"], [77, 1, 1, "", "PyCBCStatMapExecutable"], [77, 1, 1, "", "PyCBCStatMapInjExecutable"], [77, 1, 1, "", "PyCBCTrig2HDFExecutable"], [77, 5, 1, "", "convert_bank_to_hdf"], [77, 5, 1, "", "convert_trig_to_hdf"], [77, 5, 1, "", "find_injections_in_hdf_coinc"], [77, 5, 1, "", "get_ordered_ifo_list"], [77, 5, 1, "", "make_foreground_censored_veto"], [77, 5, 1, "", "merge_single_detector_hdf_files"], [77, 5, 1, "", "rerank_coinc_followup"], [77, 5, 1, "", "select_files_by_ifo_combination"], [77, 5, 1, "", "setup_combine_statmap"], [77, 5, 1, "", "setup_exclude_zerolag"], [77, 5, 1, "", "setup_interval_coinc"], [77, 5, 1, "", "setup_interval_coinc_inj"], [77, 5, 1, "", "setup_sngls"], [77, 5, 1, "", "setup_sngls_inj"], [77, 5, 1, "", "setup_sngls_statmap"], [77, 5, 1, "", "setup_sngls_statmap_inj"], [77, 5, 1, "", "setup_statmap"], [77, 5, 1, "", "setup_statmap_inj"], [77, 5, 1, "", "setup_trigger_fitting"]], "pycbc.workflow.coincidence.CensorForeground": [[77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.MergeExecutable": [[77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCAddStatmap": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCCombineStatmap": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCExcludeZerolag": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCFindCoincExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 4, 1, "", "file_input_options"]], "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCStatMapExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.configparser_test": [[77, 5, 1, "", "add_options_to_section"], [77, 5, 1, "", "check_duplicate_options"], [77, 5, 1, "", "interpolate_string"], [77, 5, 1, "", "parse_workflow_ini_file"], [77, 5, 1, "", "perform_extended_interpolation"], [77, 5, 1, "", "read_ini_file"], [77, 5, 1, "", "sanity_check_subsections"], [77, 5, 1, "", "split_multi_sections"]], "pycbc.workflow.configuration": [[77, 1, 1, "", "WorkflowConfigParser"], [77, 5, 1, "", "add_workflow_command_line_group"], [77, 5, 1, "", "resolve_url"]], "pycbc.workflow.configuration.WorkflowConfigParser": [[77, 2, 1, "", "get_cli_option"], [77, 2, 1, "", "interpolate_exe"], [77, 2, 1, "", "perform_exe_expansion"], [77, 2, 1, "", "resolve_file_url"], [77, 2, 1, "", "resolve_urls"], [77, 2, 1, "", "section_to_cli"]], "pycbc.workflow.core": [[77, 6, 1, "", "CalledProcessErrorMod"], [77, 1, 1, "", "Executable"], [77, 1, 1, "", "File"], [77, 1, 1, "", "FileList"], [77, 1, 1, "", "Node"], [77, 1, 1, "", "SegFile"], [77, 1, 1, "", "Workflow"], [77, 5, 1, "", "add_workflow_settings_cli"], [77, 5, 1, "", "get_full_analysis_chunk"], [77, 5, 1, "", "get_random_label"], [77, 5, 1, "", "make_analysis_dir"], [77, 5, 1, "", "make_external_call"], [77, 5, 1, "", "resolve_td_option"], [77, 5, 1, "", "resolve_url_to_file"]], "pycbc.workflow.core.Executable": [[77, 4, 1, "", "ALL_TRIGGERS"], [77, 4, 1, "", "FINAL_RESULT"], [77, 4, 1, "", "INTERMEDIATE_PRODUCT"], [77, 4, 1, "", "KEEP_BUT_RAISE_WARNING"], [77, 4, 1, "", "MERGED_TRIGGERS"], [77, 2, 1, "", "add_ini_profile"], [77, 2, 1, "", "add_opt"], [77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 4, 1, "", "file_input_options"], [77, 2, 1, "", "get_opt"], [77, 2, 1, "", "get_transformation"], [77, 2, 1, "", "has_opt"], [77, 3, 1, "", "ifo"], [77, 4, 1, "", "time_dependent_options"], [77, 2, 1, "", "update_current_retention_level"], [77, 2, 1, "", "update_current_tags"], [77, 2, 1, "", "update_output_directory"]], "pycbc.workflow.core.File": [[77, 2, 1, "", "add_metadata"], [77, 3, 1, "", "cache_entry"], [77, 2, 1, "", "from_path"], [77, 3, 1, "", "ifo"], [77, 3, 1, "", "segment"]], "pycbc.workflow.core.FileList": [[77, 2, 1, "", "categorize_by_attr"], [77, 2, 1, "", "convert_to_lal_cache"], [77, 2, 1, "", "dump"], [77, 4, 1, "", "entry_class"], [77, 2, 1, "", "find_all_output_in_range"], [77, 2, 1, "", "find_output"], [77, 2, 1, "", "find_output_at_time"], [77, 2, 1, "", "find_output_in_range"], [77, 2, 1, "", "find_output_with_ifo"], [77, 2, 1, "", "find_output_with_tag"], [77, 2, 1, "", "find_output_without_tag"], [77, 2, 1, "", "find_outputs_in_range"], [77, 2, 1, "", "get_times_covered_by_files"], [77, 2, 1, "", "load"], [77, 2, 1, "", "to_file_object"]], "pycbc.workflow.core.Node": [[77, 2, 1, "", "add_multiifo_input_list_opt"], [77, 2, 1, "", "add_multiifo_output_list_opt"], [77, 2, 1, "", "get_command_line"], [77, 2, 1, "", "new_multiifo_output_list_opt"], [77, 2, 1, "", "new_output_file_opt"], [77, 3, 1, "", "output_file"], [77, 3, 1, "", "output_files"], [77, 2, 1, "", "resolve_td_options"]], "pycbc.workflow.core.SegFile": [[77, 2, 1, "", "from_multi_segment_list"], [77, 2, 1, "", "from_segment_list"], [77, 2, 1, "", "from_segment_list_dict"], [77, 2, 1, "", "from_segment_xml"], [77, 2, 1, "", "parse_segdict_key"], [77, 2, 1, "", "remove_short_sci_segs"], [77, 2, 1, "", "return_union_seglist"], [77, 2, 1, "", "to_segment_xml"]], "pycbc.workflow.core.Workflow": [[77, 3, 1, "", "exec_sites_str"], [77, 2, 1, "", "execute_node"], [77, 2, 1, "", "get_ifo_combinations"], [77, 3, 1, "", "output_map"], [77, 2, 1, "", "save"], [77, 2, 1, "", "save_config"], [77, 3, 1, "", "sites"], [77, 3, 1, "", "staging_site"], [77, 3, 1, "", "staging_site_str"]], "pycbc.workflow.datafind": [[77, 5, 1, "", "convert_cachelist_to_filelist"], [77, 5, 1, "", "datafind_keep_unique_backups"], [77, 5, 1, "", "get_missing_segs_from_frame_file_cache"], [77, 5, 1, "", "get_science_segs_from_datafind_outs"], [77, 5, 1, "", "get_segment_summary_times"], [77, 5, 1, "", "log_datafind_command"], [77, 5, 1, "", "run_datafind_instance"], [77, 5, 1, "", "setup_datafind_from_pregenerated_lcf_files"], [77, 5, 1, "", "setup_datafind_runtime_cache_multi_calls_perifo"], [77, 5, 1, "", "setup_datafind_runtime_cache_single_call_perifo"], [77, 5, 1, "", "setup_datafind_runtime_frames_multi_calls_perifo"], [77, 5, 1, "", "setup_datafind_runtime_frames_single_call_perifo"], [77, 5, 1, "", "setup_datafind_workflow"]], "pycbc.workflow.dq": [[77, 1, 1, "", "PyCBCBinTriggerRatesDQExecutable"], [77, 1, 1, "", "PyCBCCalculateDQExecutable"], [77, 1, 1, "", "PyCBCCalculateDQFlagExecutable"], [77, 1, 1, "", "PyCBCRerankDQExecutable"], [77, 5, 1, "", "setup_dq_reranking"]], "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.dq.PyCBCCalculateDQExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.dq.PyCBCCalculateDQFlagExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.dq.PyCBCRerankDQExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils": [[77, 1, 1, "", "PycbcGrbInjCombinerExecutable"], [77, 1, 1, "", "PycbcGrbInjFinderExecutable"], [77, 1, 1, "", "PycbcGrbTrigClusterExecutable"], [77, 1, 1, "", "PycbcGrbTrigCombinerExecutable"], [77, 5, 1, "", "fermi_core_tail_model"], [77, 5, 1, "", "get_coh_PTF_files"], [77, 5, 1, "", "get_ipn_sky_files"], [77, 5, 1, "", "get_sky_grid_scale"], [77, 5, 1, "", "make_exttrig_file"], [77, 5, 1, "", "make_gating_node"], [77, 5, 1, "", "select_grb_pp_class"], [77, 5, 1, "", "set_grb_start_end"], [77, 5, 1, "", "setup_pygrb_pp_workflow"]], "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.inference_followups": [[77, 5, 1, "", "create_fits_file"], [77, 5, 1, "", "create_posterior_files"], [77, 5, 1, "", "get_diagnostic_plots"], [77, 5, 1, "", "get_plot_group"], [77, 5, 1, "", "make_diagnostic_plots"], [77, 5, 1, "", "make_inference_acceptance_rate_plot"], [77, 5, 1, "", "make_inference_dynesty_run_plot"], [77, 5, 1, "", "make_inference_dynesty_trace_plot"], [77, 5, 1, "", "make_inference_inj_recovery_plot"], [77, 5, 1, "", "make_inference_plot"], [77, 5, 1, "", "make_inference_plot_mcmc_history"], [77, 5, 1, "", "make_inference_posterior_plot"], [77, 5, 1, "", "make_inference_pp_plot"], [77, 5, 1, "", "make_inference_pp_table"], [77, 5, 1, "", "make_inference_prior_plot"], [77, 5, 1, "", "make_inference_samples_plot"], [77, 5, 1, "", "make_inference_skymap"], [77, 5, 1, "", "make_inference_summary_table"], [77, 5, 1, "", "make_posterior_workflow"]], "pycbc.workflow.injection": [[77, 1, 1, "", "PyCBCMergeHDFExecutable"], [77, 1, 1, "", "PyCBCOptimalSNRExecutable"], [77, 5, 1, "", "compute_inj_optimal_snr"], [77, 5, 1, "", "cut_distant_injections"], [77, 5, 1, "", "inj_to_hdf"], [77, 5, 1, "", "setup_injection_workflow"], [77, 5, 1, "", "veto_injections"]], "pycbc.workflow.injection.PyCBCMergeHDFExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.injection.PyCBCOptimalSNRExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup": [[77, 1, 1, "", "JobSegmenter"], [77, 1, 1, "", "LalappsInspinjExecutable"], [77, 1, 1, "", "LigolwAddExecutable"], [77, 1, 1, "", "LigolwCBCAlignTotalSpinExecutable"], [77, 1, 1, "", "LigolwCBCJitterSkylocExecutable"], [77, 1, 1, "", "PyCBCInspiralExecutable"], [77, 1, 1, "", "PyCBCMultiInspiralExecutable"], [77, 1, 1, "", "PyCBCTmpltbankExecutable"], [77, 1, 1, "", "PycbcConditionStrainExecutable"], [77, 1, 1, "", "PycbcCreateInjectionsExecutable"], [77, 1, 1, "", "PycbcDarkVsBrightInjectionsExecutable"], [77, 1, 1, "", "PycbcHDFSplitInjExecutable"], [77, 1, 1, "", "PycbcInferenceExecutable"], [77, 1, 1, "", "PycbcSplitBankExecutable"], [77, 1, 1, "", "PycbcSplitBankXmlExecutable"], [77, 1, 1, "", "PycbcSplitInspinjExecutable"], [77, 5, 1, "", "identify_needed_data"], [77, 5, 1, "", "int_gps_time_to_str"], [77, 5, 1, "", "multi_ifo_coherent_job_setup"], [77, 5, 1, "", "select_generic_executable"], [77, 5, 1, "", "select_matchedfilter_class"], [77, 5, 1, "", "select_tmpltbank_class"], [77, 5, 1, "", "sngl_ifo_job_setup"]], "pycbc.workflow.jobsetup.JobSegmenter": [[77, 2, 1, "", "get_data_times_for_job"], [77, 2, 1, "", "get_valid_times_for_job"], [77, 2, 1, "", "pick_tile_size"]], "pycbc.workflow.jobsetup.LalappsInspinjExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 4, 1, "", "extension"]], "pycbc.workflow.jobsetup.LigolwAddExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.LigolwCBCAlignTotalSpinExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.LigolwCBCJitterSkylocExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PyCBCInspiralExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 2, 1, "", "get_valid_times"], [77, 4, 1, "", "time_dependent_options"], [77, 2, 1, "", "zero_pad_data_extend"]], "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 2, 1, "", "get_valid_times"]], "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable": [[77, 2, 1, "", "create_nodata_node"], [77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 2, 1, "", "get_valid_times"]], "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 4, 1, "", "extension"]], "pycbc.workflow.jobsetup.PycbcDarkVsBrightInjectionsExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PycbcInferenceExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.jobsetup.PycbcSplitBankExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"], [77, 4, 1, "", "extension"]], "pycbc.workflow.jobsetup.PycbcSplitBankXmlExecutable": [[77, 4, 1, "", "extension"]], "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.matched_filter": [[77, 5, 1, "", "setup_matchedfltr_dax_generated"], [77, 5, 1, "", "setup_matchedfltr_dax_generated_multi"], [77, 5, 1, "", "setup_matchedfltr_workflow"]], "pycbc.workflow.minifollowups": [[77, 1, 1, "", "PlotQScanExecutable"], [77, 1, 1, "", "SingleTemplateExecutable"], [77, 1, 1, "", "SingleTimeFreqExecutable"], [77, 5, 1, "", "grouper"], [77, 5, 1, "", "make_coinc_info"], [77, 5, 1, "", "make_inj_info"], [77, 5, 1, "", "make_plot_waveform_plot"], [77, 5, 1, "", "make_qscan_plot"], [77, 5, 1, "", "make_single_template_plots"], [77, 5, 1, "", "make_singles_timefreq"], [77, 5, 1, "", "make_skipped_html"], [77, 5, 1, "", "make_sngl_ifo"], [77, 5, 1, "", "make_trigger_timeseries"], [77, 5, 1, "", "setup_foreground_minifollowups"], [77, 5, 1, "", "setup_injection_minifollowups"], [77, 5, 1, "", "setup_single_det_minifollowups"]], "pycbc.workflow.minifollowups.PlotQScanExecutable": [[77, 4, 1, "", "time_dependent_options"]], "pycbc.workflow.minifollowups.SingleTemplateExecutable": [[77, 4, 1, "", "time_dependent_options"]], "pycbc.workflow.minifollowups.SingleTimeFreqExecutable": [[77, 4, 1, "", "time_dependent_options"]], "pycbc.workflow.pegasus_sites": [[77, 5, 1, "", "add_condorpool_copy_site"], [77, 5, 1, "", "add_condorpool_shared_site"], [77, 5, 1, "", "add_condorpool_symlink_site"], [77, 5, 1, "", "add_ini_site_profile"], [77, 5, 1, "", "add_local_site"], [77, 5, 1, "", "add_osg_site"], [77, 5, 1, "", "add_site"], [77, 5, 1, "", "add_site_pegasus_profile"], [77, 5, 1, "", "make_catalog"]], "pycbc.workflow.pegasus_workflow": [[77, 1, 1, "", "Executable"], [77, 1, 1, "", "File"], [77, 1, 1, "", "Node"], [77, 1, 1, "", "ProfileShortcuts"], [77, 1, 1, "", "SubWorkflow"], [77, 1, 1, "", "Transformation"], [77, 1, 1, "", "Workflow"]], "pycbc.workflow.pegasus_workflow.Executable": [[77, 2, 1, "", "add_profile"], [77, 2, 1, "", "create_transformation"], [77, 4, 1, "", "id"]], "pycbc.workflow.pegasus_workflow.File": [[77, 2, 1, "", "add_pfn"], [77, 3, 1, "", "dax_repr"], [77, 2, 1, "", "from_path"], [77, 2, 1, "", "has_pfn"], [77, 2, 1, "", "insert_into_dax"], [77, 2, 1, "", "output_map_str"]], "pycbc.workflow.pegasus_workflow.Node": [[77, 2, 1, "", "add_arg"], [77, 2, 1, "", "add_input"], [77, 2, 1, "", "add_input_arg"], [77, 2, 1, "", "add_input_list_opt"], [77, 2, 1, "", "add_input_opt"], [77, 2, 1, "", "add_list_opt"], [77, 2, 1, "", "add_opt"], [77, 2, 1, "", "add_output"], [77, 2, 1, "", "add_output_arg"], [77, 2, 1, "", "add_output_list_opt"], [77, 2, 1, "", "add_output_opt"], [77, 2, 1, "", "add_profile"], [77, 2, 1, "", "add_raw_arg"], [77, 2, 1, "", "new_output_file_opt"]], "pycbc.workflow.pegasus_workflow.ProfileShortcuts": [[77, 2, 1, "", "set_category"], [77, 2, 1, "", "set_execution_site"], [77, 2, 1, "", "set_memory"], [77, 2, 1, "", "set_num_cpus"], [77, 2, 1, "", "set_num_retries"], [77, 2, 1, "", "set_priority"], [77, 2, 1, "", "set_storage"], [77, 2, 1, "", "set_universe"]], "pycbc.workflow.pegasus_workflow.SubWorkflow": [[77, 2, 1, "", "add_into_workflow"], [77, 2, 1, "", "add_planner_arg"], [77, 2, 1, "", "set_subworkflow_properties"]], "pycbc.workflow.pegasus_workflow.Transformation": [[77, 2, 1, "", "is_same_as"]], "pycbc.workflow.pegasus_workflow.Workflow": [[77, 2, 1, "", "add_container"], [77, 2, 1, "", "add_explicit_dependancy"], [77, 2, 1, "", "add_node"], [77, 2, 1, "", "add_subworkflow_dependancy"], [77, 2, 1, "", "add_transformation"], [77, 2, 1, "", "add_workflow"], [77, 2, 1, "", "plan_and_submit"], [77, 2, 1, "", "save"], [77, 2, 1, "", "traverse_workflow_io"]], "pycbc.workflow.plotting": [[77, 1, 1, "", "PlotExecutable"], [77, 5, 1, "", "excludestr"], [77, 5, 1, "", "make_binned_hist"], [77, 5, 1, "", "make_coinc_snrchi_plot"], [77, 5, 1, "", "make_dq_percentile_plot"], [77, 5, 1, "", "make_dq_trigger_rate_plot"], [77, 5, 1, "", "make_foreground_table"], [77, 5, 1, "", "make_foundmissed_plot"], [77, 5, 1, "", "make_gating_plot"], [77, 5, 1, "", "make_ifar_plot"], [77, 5, 1, "", "make_inj_table"], [77, 5, 1, "", "make_range_plot"], [77, 5, 1, "", "make_results_web_page"], [77, 5, 1, "", "make_seg_plot"], [77, 5, 1, "", "make_seg_table"], [77, 5, 1, "", "make_segments_plot"], [77, 5, 1, "", "make_sensitivity_plot"], [77, 5, 1, "", "make_single_hist"], [77, 5, 1, "", "make_singles_plot"], [77, 5, 1, "", "make_snrchi_plot"], [77, 5, 1, "", "make_snrifar_plot"], [77, 5, 1, "", "make_snrratehist_plot"], [77, 5, 1, "", "make_spectrum_plot"], [77, 5, 1, "", "make_template_plot"], [77, 5, 1, "", "make_throughput_plot"], [77, 5, 1, "", "make_veto_table"], [77, 5, 1, "", "requirestr"]], "pycbc.workflow.plotting.PlotExecutable": [[77, 2, 1, "", "create_node"], [77, 4, 1, "", "current_retention_level"]], "pycbc.workflow.psd": [[77, 5, 1, "", "make_average_psd"], [77, 5, 1, "", "make_psd_file"], [77, 5, 1, "", "merge_psds"], [77, 5, 1, "", "setup_psd_calculate"]], "pycbc.workflow.psdfiles": [[77, 5, 1, "", "setup_psd_pregenerated"], [77, 5, 1, "", "setup_psd_workflow"]], "pycbc.workflow.segment": [[77, 5, 1, "", "generate_triggered_segment"], [77, 5, 1, "", "get_flag_segments_file"], [77, 5, 1, "", "get_segments_file"], [77, 5, 1, "", "get_triggered_coherent_segment"], [77, 5, 1, "", "save_veto_definer"]], "pycbc.workflow.splittable": [[77, 5, 1, "", "select_splitfilejob_instance"], [77, 5, 1, "", "setup_splittable_dax_generated"], [77, 5, 1, "", "setup_splittable_workflow"]], "pycbc.workflow.tmpltbank": [[77, 5, 1, "", "setup_tmpltbank_dax_generated"], [77, 5, 1, "", "setup_tmpltbank_pregenerated"], [77, 5, 1, "", "setup_tmpltbank_without_frames"], [77, 5, 1, "", "setup_tmpltbank_workflow"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "exception", "Python exception"]}, "titleterms": {"applic": 9, "workflow": [9, 10, 22, 25, 31, 77, 80, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "calcul": [10, 28, 83], "effectu": 10, "fit": 10, "factor": 10, "templat": [10, 41, 80, 85, 98], "bank": [10, 76, 80, 85, 98], "introduct": [10, 22, 23, 26, 29, 31, 80, 82, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98], "creat": [10, 11, 22, 33, 79, 84], "configur": [10, 22, 31, 33, 77, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "file": [10, 18, 19, 22, 25, 26, 29, 31, 33, 42, 48, 52, 78, 82, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98], "gener": [10, 18, 22, 29, 43, 51, 52, 76, 80, 83, 85, 89, 90, 91, 92, 93, 94, 95, 96, 98], "understand": [10, 22], "result": [10, 22, 71, 91, 92], "valid": [10, 15, 86, 96], "product": [10, 46, 93, 95], "analysi": [10, 85, 95], "procedur": 10, "evalu": 10, "known": 10, "issu": 10, "build": [11, 12, 46, 48], "document": [11, 17, 20, 23, 26, 31, 46, 80, 85, 88, 93, 95], "github": [11, 79], "page": [11, 91, 92], "project": [11, 16], "push": 11, "bundl": 12, "execut": [12, 25, 86, 87, 88, 89, 90, 91, 92, 95, 97, 98], "us": [12, 14, 18, 19, 23, 25, 35, 39, 41, 46, 80, 89, 90, 93, 97, 98], "script": [12, 18, 20, 84], "releas": [12, 79], "cvmf": 12, "catalog": [13, 54], "observ": 13, "gravit": [13, 16, 26, 30, 78, 93], "wave": [13, 16, 26, 30, 78, 93], "merger": 13, "which": [13, 80, 88], "do": [13, 22, 95], "we": 13, "have": [13, 95], "inform": 13, "about": 13, "plot": [13, 28, 29, 45, 71, 77, 83, 87, 95], "some": [13, 80], "kei": [13, 19], "statist": [13, 87], "from": [13, 18, 29, 37, 48, 52, 93, 95, 96], "access": 13, "data": [13, 15, 25, 29, 31, 48, 78, 85, 93, 95], "around": 13, "each": 13, "event": [13, 56], "pycbc": [14, 18, 19, 20, 21, 23, 25, 30, 31, 43, 46, 48, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 79, 80, 84, 85, 86, 88, 89, 90, 96, 97, 98], "scientif": 14, "public": 14, "cite": 14, "softwar": [14, 29], "describ": 14, "algorithm": 14, "bayesian": 14, "infer": [14, 18, 31, 42, 43, 60, 61, 62, 63, 64, 91, 92], "search": [14, 93], "compact": 14, "binari": 14, "coalesc": 14, "queri": [15, 26, 29], "time": [15, 16, 24, 29, 38, 51, 52, 83, 93, 96], "hardwar": [15, 29], "inject": [15, 29, 33, 36, 65, 77, 78, 85, 87, 89, 91], "more": 15, "determin": 15, "an": [15, 24, 32, 52, 80], "instrument": 15, "ha": 15, "find": [15, 82, 87], "what": [15, 83], "flag": [15, 96], "can": [15, 83], "i": [15, 80, 83, 95], "detector": [16, 53, 83], "locat": [16, 18, 88], "light": 16, "travel": 16, "between": [16, 83], "sourc": [16, 48, 80], "pass": 16, "through": 16, "antenna": 16, "pattern": 16, "signal": [16, 28, 78], "frame": [16, 26, 59, 78], "develop": [17, 31, 46], "distribut": [18, 32, 55], "sampl": [18, 41, 45], "python": 18, "ini": [18, 22, 88, 95, 96], "make": [18, 45, 84], "mass": [18, 55], "m1": 18, "m2": 18, "mchirp": 18, "q": 18, "uniform": [18, 55], "mass1": 18, "mass2": 18, "sky": 18, "spin": [18, 55, 80], "exampl": [18, 22, 25, 31, 33, 34, 35, 38, 41, 44, 80, 81, 88, 91, 92, 96], "run": [19, 29, 32, 33, 82, 93, 94, 95], "under": 19, "docker": [19, 46], "jupyt": 19, "notebook": 19, "within": [19, 25, 84], "share": 19, "user": 19, "ssh": 19, "code": [20, 48, 80, 87, 88], "sphinx": 20, "packag": [20, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "modul": [20, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 80, 85, 86, 88, 89, 90, 96, 97, 98], "extend": [21, 93], "extern": [21, 55], "plugin": [21, 76, 84], "dag": 22, "faith": 22, "comparison": 22, "how": [22, 29, 42, 44, 95], "config": [22, 74, 88, 96], "perform": 23, "fft": [23, 46, 57], "function": 23, "base": [23, 63, 64, 87], "api": [23, 44], "class": [23, 42], "choos": 23, "specif": [23, 25, 45], "backend": 23, "method": [23, 26, 85], "filter": [24, 58, 85, 90], "appli": 24, "highpass": 24, "lowpass": 24, "fir": 24, "match": [24, 80, 83, 85, 90], "snr": 24, "chisq": [24, 75], "seri": [24, 52, 79], "hdf": [25, 66], "singl": [25, 41, 56], "inspir": [25, 85, 90], "trigger": [25, 56, 82, 90, 95], "column": 25, "vector": 25, "addit": [25, 48], "reserv": 25, "combin": 25, "region": 25, "refer": 25, "arrai": [25, 74], "read": [26, 52, 70], "ldr": [26, 29], "server": [26, 29], "write": 26, "index": 27, "process": [28, 46], "gw150914": [28, 34, 38, 92], "whiten": 28, "strain": [28, 72, 78], "nois": [28, 34, 51, 68, 94], "listen": 28, "hanford": 28, "waveform": [29, 31, 43, 76, 83, 84], "content": [29, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 96], "command": [29, 80, 82, 88], "line": [29, 72, 80, 88], "pycbc_generate_hwinj": 29, "select": [29, 95], "psd": [29, 52, 70, 71, 77], "estim": [29, 36, 37, 52, 70, 91, 92, 94], "lalapps_inspinj": [29, 89], "output": [29, 31], "pycbc_generate_hwinj_from_xml": 29, "check": [29, 48], "ascii": 29, "pycbc_plot_hwinj": 29, "recov": 29, "pycbc_inspir": [29, 90], "segment": [29, 77, 85, 96], "databas": 29, "power": 30, "astronomi": 30, "get": [30, 91, 92], "start": 30, "instal": [30, 46, 47, 48, 49], "overview": [31, 42, 44, 45, 80, 85], "model": [31, 34, 35, 38, 39, 41, 43, 63, 84], "sampler": [31, 40, 41, 42, 44, 64], "prior": [31, 95], "static": 31, "paramet": [31, 36, 37, 41, 43, 76, 91, 92], "set": [31, 49, 93, 95], "advanc": 31, "transform": [31, 53], "calibr": [31, 72], "constraint": [31, 55], "checkpoint": 31, "visual": 31, "posterior": [31, 42, 45, 61], "For": 31, "analyt": [32, 52, 63, 70], "simul": [33, 37, 78], "bbh": [33, 91], "1": 33, "2": 33, "setup": [33, 86, 89, 90, 91, 92, 96, 97, 98], "3": 33, "gaussian": [34, 51, 55, 68], "hierarch": [35, 63], "lens": 35, "lisa": [36, 37], "smbhb": [36, 37], "ldc": 37, "margin": [38, 41], "rel": [39, 43], "try": 40, "out": [40, 48], "differ": 40, "emce": [40, 61, 64], "parallel": 40, "temper": 40, "ptemce": [40, 61, 64], "dynesti": [40, 61, 64, 91, 92], "ultranest": [40, 61, 64], "epsi": [40, 61, 64], "cpnest": 40, "multinest": [40, 61, 64], "quickstart": 41, "subset": 41, "over": 41, "all": 41, "abitrari": 41, "coordin": [41, 53], "nest": 41, "io": [42, 61, 66], "guidelin": [42, 44], "inherit": [42, 44], "diagram": [42, 44], "add": [42, 44, 47], "detail": [43, 44, 93, 95], "common": 43, "standard": [43, 95], "full": [43, 46, 95], "heterodyn": 43, "extrins": 43, "onli": 43, "composit": 43, "pycbc_inference_plot_posterior": 45, "iter": 45, "thin": 45, "chain": 45, "movi": 45, "pycbc_inference_plot_movi": 45, "simpl": 46, "virtualenv": [46, 49], "ldg": 46, "igwn": 46, "cluster": [46, 87], "other": [46, 86], "scenario": 46, "intel": 46, "mkl": [46, 57], "optim": 46, "librari": [46, 81], "graphic": 46, "unit": 46, "support": [46, 47, 89, 90, 97, 98], "cuda": [46, 47], "relat": 46, "help": 46, "instruct": [47, 89, 90, 97, 98], "option": [47, 80, 87, 88], "depend": 47, "lalsuit": 48, "obtain": [48, 85, 96], "version": [48, 53, 71, 96], "your": 48, "virtual": 48, "environ": 48, "extra": 48, "up": [49, 93, 95], "pip": 49, "domain": [51, 83], "handl": 52, "save": 52, "lalsimul": 52, "subpackag": [53, 60], "submodul": [53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77], "bin_util": 53, "boundari": 53, "convers": 53, "cosmologi": 53, "dq": [53, 71, 77], "libutil": 53, "mchirp_area": 53, "opt": 53, "pnutil": 53, "pool": 53, "rate": 53, "scheme": 53, "sensit": [53, 87], "angular": [55, 62], "arbitrari": 55, "bound": 55, "fixedsampl": 55, "joint": 55, "power_law": 55, "qnm": 55, "sky_loc": 55, "uniform_log": 55, "util": [55, 76], "coher": 56, "coinc": 56, "coinc_rat": 56, "cut": 56, "eventmgr": 56, "eventmgr_cython": 56, "rank": 56, "signific": 56, "simd_threshold_cython": 56, "stat": 56, "threshold_cpu": 56, "trigger_fit": 56, "veto": [56, 75, 93, 96], "backend_cpu": 57, "backend_mkl": 57, "backend_support": 57, "class_api": 57, "core": [57, 77], "fft_callback": 57, "fftw": 57, "fftw_prune": 57, "fftw_pruned_cython": 57, "func_api": 57, "npfft": 57, "parser_support": 57, "autocorrel": 58, "matchedfilt": [58, 90], "matchedfilter_cpu": 58, "matchedfilter_numpi": 58, "qtransform": 58, "resampl": 58, "simd_correl": 58, "simd_correlate_cython": 58, "zpk": 58, "gwosc": 59, "store": 59, "burn_in": 60, "entropi": 60, "evid": 60, "gelman_rubin": 60, "gewek": 60, "option_util": [60, 73], "base_hdf": 61, "base_mcmc": [61, 64], "base_multitemp": [61, 64], "base_nested_sampl": 61, "base_sampl": 61, "emcee_pt": [61, 64, 92], "txt": 61, "jump": 62, "bounded_norm": 62, "discret": 62, "normal": 62, "base_data": 63, "brute_marg": 63, "data_util": 63, "gated_gaussian_nois": 63, "gaussian_nois": 63, "marginalized_gaussian_nois": 63, "relbin": 63, "relbin_cpu": 63, "single_templ": 63, "tool": 63, "base_cub": 64, "dummi": 64, "injfilterrejector": 65, "ligolw": 66, "live": 66, "record": 66, "neutron_star": 67, "eos_util": 67, "pg_isso_solv": 67, "reproduc": 68, "popul": 69, "fgmc_function": 69, "fgmc_laguerr": 69, "fgmc_plot": 69, "live_pastro": 69, "live_pastro_util": 69, "population_model": 69, "rates_funct": 69, "scale_inject": 69, "analytical_spac": 70, "variat": 70, "color": 71, "followup": 71, "layout": 71, "legacy_grb": 71, "metadata": 71, "mpld3_util": 71, "pygrb_plotting_util": 71, "pygrb_postprocessing_util": 71, "render": 71, "scatter_histogram": 71, "str_util": 71, "table_util": 71, "gate": 72, "recalibr": 72, "tmpltbank": [73, 77, 80, 98], "bank_convers": 73, "bank_output_util": 73, "brute_force_method": 73, "calc_moment": 73, "coord_util": 73, "lambda_map": 73, "lattice_util": 73, "partitioned_bank": 73, "type": 74, "align": [74, 80], "array_cpu": 74, "frequencyseri": 74, "optpars": 74, "timeseri": 74, "autochisq": 75, "bank_chisq": 75, "chisq_cpu": 75, "sgchisq": 75, "compress": 76, "decompress_cpu": 76, "decompress_cpu_cython": 76, "multiband": 76, "nltide": 76, "premerg": 76, "pycbc_phenomc_tmplt": 76, "ringdown": 76, "sinegauss": 76, "spa_tmplt": 76, "spa_tmplt_cpu": 76, "supernova": 76, "utils_cpu": 76, "waveform_mod": 76, "coincid": [77, 85, 87], "configparser_test": 77, "datafind": [77, 86], "grb_util": 77, "inference_followup": 77, "jobsetup": 77, "matched_filt": [77, 90], "minifollowup": 77, "pegasus_sit": 77, "pegasus_workflow": 77, "psdfile": 77, "splittabl": [77, 97], "pycbc_condition_strain": 78, "oper": 78, "split": [78, 85, 97], "exist": [78, 96], "shorter": 78, "condit": 78, "caveat": 78, "backport": 79, "bug": 79, "fix": 79, "previou": [79, 93, 95], "non": 80, "placement": 80, "pycbc_geom_nonspinbank": [80, 98], "background": [80, 87], "geometr": 80, "pycbc_geom_aligned_bank": 80, "stochast": 80, "ian": 80, "": [80, 88], "recommend": 80, "should": 80, "want": [80, 95], "f2": 80, "metric": 80, "anoth": 80, "ie": 80, "imr": 80, "direct": 80, "pycbc_aligned_stoch_bank": 80, "lalapps_cbc_sbank": 80, "sbank": 80, "hybrid": 80, "approach": 80, "best": 80, "both": 80, "world": 80, "The": [80, 86, 89, 90, 96, 97, 98], "interact": 81, "tutori": 81, "upload": 82, "gracedb": 82, "requir": [82, 88], "input": 82, "one": 83, "multipl": 83, "td": 83, "fd": 83, "togeth": 83, "gw": 83, "phase": 83, "amplitud": 83, "frequenc": 83, "evolut": 83, "new": [84, 93], "approxim": 84, "avail": 84, "ad": [84, 96], "custom": 84, "basic": 85, "tabl": [85, 97], "usag": [86, 89, 90, 96, 97, 98], "section": [86, 88, 89, 90, 95, 97, 98], "hdf5": 87, "limit": 87, "asign": 87, "interfac": 88, "suppli": 88, "overrid": 88, "global": 88, "xxx": 88, "subsect": 88, "macro": 88, "complet": 88, "sharedopt": 88, "them": [89, 90, 97, 98], "lalapps_inspiral_ahop": 90, "pycbc_make_inference_inj_workflow": 91, "A": [91, 92, 93, 94, 95], "plan": [91, 92, 93, 95], "pycbc_make_inference_workflow": 92, "gw170814": 92, "pycbc_make_offline_search_workflow": 93, "submit": [93, 95], "monitor": [93, 95], "debug": [93, 95], "pegasu": [93, 95], "dashboard": [93, 95], "analyz": 93, "reus": [93, 95], "gp": 93, "end": 93, "re": 93, "defin": [93, 96], "fail": 93, "partial": 93, "open": 93, "scienc": 93, "grid": 93, "prerequisit": 93, "pycbc_make_psd_estimation_workflow": 94, "pycbc_make_offline_grb_workflow": 95, "grb": 95, "cbc": 95, "profil": 95, "directori": 95, "ar": 95, "you": 95, "ye": 95, "No": 95, "my": 95, "own": 95, "descript": 96, "syntax": 96, "number": 96, "ifo": 96, "provid": 96, "pad": 96, "pre": 96, "xml": 96, "pycbc_splitbank": 97, "ex": 98, "lalapps_tmpltbank_ahop": 98}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx.ext.viewcode": 1, "sphinx": 57}, "alltitles": {"Applications and Workflows": [[9, "applications-and-workflows"]], "Calculating the Effectualness (Fitting Factor) of Template Banks": [[10, "calculating-the-effectualness-fitting-factor-of-template-banks"]], "Introduction": [[10, "introduction"], [22, "introduction"], [23, "introduction"], [26, "introduction"], [29, "introduction"], [31, "introduction"], [80, "introduction"], [80, "id5"], [82, "introduction"], [85, "introduction"], [86, "introduction"], [87, "introduction"], [88, "introduction"], [89, "introduction"], [90, "introduction"], [91, "introduction"], [92, "introduction"], [93, "introduction"], [95, "introduction"], [96, "introduction"], [97, "introduction"], [98, "introduction"]], "Creating a configuration file": [[10, "creating-a-configuration-file"]], "Generating the workflow": [[10, "generating-the-workflow"], [22, "generating-the-workflow"], [93, "generating-the-workflow"]], "Understanding the results": [[10, "understanding-the-results"], [22, "understanding-the-results"]], "Validating template banks for production analysis": [[10, "validating-template-banks-for-production-analysis"]], "Procedure": [[10, "procedure"]], "Evaluation": [[10, "evaluation"]], "Known issues": [[10, "known-issues"]], "Building Documentation for GitHub Pages": [[11, "building-documentation-for-github-pages"]], "Creating a GitHub project page": [[11, "creating-a-github-project-page"]], "Building and pushing the documentation": [[11, "building-and-pushing-the-documentation"]], "Building Bundled Executables": [[12, "building-bundled-executables"]], "Using the build script": [[12, "using-the-build-script"]], "Building Releases for CVMFS": [[12, "building-releases-for-cvmfs"]], "Catalog of Observed Gravitational-wave Mergers": [[13, "catalog-of-observed-gravitational-wave-mergers"]], "Which mergers do we have information about?": [[13, "which-mergers-do-we-have-information-about"]], "Plotting some key statistics from the catalog": [[13, "plotting-some-key-statistics-from-the-catalog"]], "Accessing data around each event": [[13, "accessing-data-around-each-event"]], "Use of PyCBC in Scientific Publications": [[14, "use-of-pycbc-in-scientific-publications"]], "Citing the PyCBC Software": [[14, "citing-the-pycbc-software"]], "Citing the scientific publications that describe the algorithms": [[14, "citing-the-scientific-publications-that-describe-the-algorithms"]], "Bayesian Inference": [[14, "bayesian-inference"]], "Searches for Compact Binary Coalescence": [[14, "searches-for-compact-binary-coalescence"]], "Query times of valid data, hardware injections, and more.": [[15, "query-times-of-valid-data-hardware-injections-and-more"]], "Determine the times an instrument has valid data": [[15, "determine-the-times-an-instrument-has-valid-data"]], "Finding times of hardware injections": [[15, "finding-times-of-hardware-injections"]], "What flags can I query?": [[15, "what-flags-can-i-query"]], "Gravitational-wave Detectors": [[16, "gravitational-wave-detectors"]], "Detector Locations": [[16, "detector-locations"]], "Light travel time between detectors": [[16, "light-travel-time-between-detectors"]], "Time source gravitational-wave passes through detector": [[16, "time-source-gravitational-wave-passes-through-detector"]], "Antenna Patterns and Projecting a Signal into the Detector Frame": [[16, "antenna-patterns-and-projecting-a-signal-into-the-detector-frame"]], "Documentation for Developers": [[17, "documentation-for-developers"]], "Using PyCBC Distributions from PyCBC Inference": [[18, "using-pycbc-distributions-from-pycbc-inference"]], "Generating samples in a Python script by using the .ini file": [[18, "generating-samples-in-a-python-script-by-using-the-ini-file"]], "Making Mass Distributions in M1 and M2": [[18, "making-mass-distributions-in-m1-and-m2"]], "Generating mchirp and q from uniform mass1 and mass2": [[18, "generating-mchirp-and-q-from-uniform-mass1-and-mass2"]], "Sky Location Distribution as Spin Distribution Example": [[18, "sky-location-distribution-as-spin-distribution-example"]], "Running PyCBC under Docker": [[19, "running-pycbc-under-docker"]], "Using jupyter notebook within docker": [[19, "using-jupyter-notebook-within-docker"]], "Sharing user files and SSH keys": [[19, "sharing-user-files-and-ssh-keys"]], "Documenting PyCBC code": [[20, "documenting-pycbc-code"]], "Sphinx": [[20, "sphinx"]], "Documenting the PyCBC package": [[20, "documenting-the-pycbc-package"]], "Documenting PyCBC modules": [[20, "documenting-pycbc-modules"]], "Documenting PyCBC scripts": [[20, "documenting-pycbc-scripts"]], "Extending PyCBC with external plugins": [[21, "extending-pycbc-with-external-plugins"]], "Dag Generator for Doing Faithfulness Comparisons": [[22, "dag-generator-for-doing-faithfulness-comparisons"]], "How to generate a workflow": [[22, "how-to-generate-a-workflow"]], "Creating a configuration (.ini) file": [[22, "creating-a-configuration-ini-file"]], "Example config files": [[22, "example-config-files"]], "Performing FFTs in PyCBC": [[23, "performing-ffts-in-pycbc"]], "Using the function based API": [[23, "using-the-function-based-api"]], "Using the class-based API": [[23, "using-the-class-based-api"]], "Choosing a specific backend": [[23, "choosing-a-specific-backend"]], "Method documentation": [[23, "method-documentation"], [26, "method-documentation"], [85, "method-documentation"]], "Filtering": [[24, "filtering"]], "Applying highpass / lowpass filters": [[24, "applying-highpass-lowpass-filters"]], "Applying an FIR filter": [[24, "applying-an-fir-filter"]], "Matched Filter SNR": [[24, "matched-filter-snr"]], "Chisq time series": [[24, "chisq-time-series"]], "HDF files within the PyCBC workflow": [[25, "hdf-files-within-the-pycbc-workflow"]], "single inspiral triggers": [[25, "single-inspiral-triggers"]], "Executables": [[25, "executables"], [25, "id1"]], "Specification": [[25, "specification"], [25, "id2"]], "Column vectors of trigger data": [[25, "id3"], [25, "id6"]], "Additional Data": [[25, "id4"], [25, "id8"]], "reserved columns": [[25, "id5"]], "combined single inspiral triggers": [[25, "combined-single-inspiral-triggers"]], "region reference arrays": [[25, "id7"]], "Example uses": [[25, "example-uses"]], "Reading Gravitational-wave Frames": [[26, "reading-gravitational-wave-frames"]], "Querying a LDR server": [[26, "querying-a-ldr-server"]], "Reading a frame file": [[26, "reading-a-frame-file"]], "Writing a frame file": [[26, "writing-a-frame-file"]], "Index": [[27, "index"]], "Signal Processing with GW150914": [[28, "signal-processing-with-gw150914"]], "Plotting the whitened strain": [[28, "plotting-the-whitened-strain"]], "Calculate the signal-to-noise": [[28, "calculate-the-signal-to-noise"]], "Listen to GW150914 in Hanford": [[28, "listen-to-gw150914-in-hanford"]], "Hardware injection waveform generation": [[29, "hardware-injection-waveform-generation"]], "Contents": [[29, "contents"]], "Generate waveform from command line (pycbc_generate_hwinj)": [[29, "generate-waveform-from-command-line-pycbc-generate-hwinj"]], "Select a time for the injection": [[29, "select-a-time-for-the-injection"]], "Select data for PSD estimation": [[29, "select-data-for-psd-estimation"]], "Run pycbc_generate_hwinj": [[29, "run-pycbc-generate-hwinj"]], "Generate waveform from lalapps_inspinj output (pycbc_generate_hwinj_from_xml)": [[29, "generate-waveform-from-lalapps-inspinj-output-pycbc-generate-hwinj-from-xml"]], "Run lalapps_inspinj": [[29, "run-lalapps-inspinj"]], "Run pycbc_generate_hwinj_from_xml": [[29, "run-pycbc-generate-hwinj-from-xml"]], "Checks for the hardware injection output": [[29, "checks-for-the-hardware-injection-output"]], "Plot ASCII waveform files with pycbc_plot_hwinj": [[29, "plot-ascii-waveform-files-with-pycbc-plot-hwinj"]], "Recover software injection with pycbc_inspiral": [[29, "recover-software-injection-with-pycbc-inspiral"]], "Recover ASCII file injection with pycbc_inspiral": [[29, "recover-ascii-file-injection-with-pycbc-inspiral"]], "How to query the segment database": [[29, "how-to-query-the-segment-database"]], "How to query the LDR server": [[29, "how-to-query-the-ldr-server"]], "PyCBC: Powering Gravitational-wave Astronomy": [[30, "pycbc-powering-gravitational-wave-astronomy"]], "Getting Started": [[30, "getting-started"]], "Installation": [[30, "installation"]], "PyCBC inference documentation (pycbc.inference)": [[31, "pycbc-inference-documentation-pycbc-inference"]], "Overview": [[31, "overview"], [45, "overview"], [80, "overview"], [80, "id1"]], "Configuring the model, sampler, priors, and data": [[31, "configuring-the-model-sampler-priors-and-data"]], "Configuring the model": [[31, "configuring-the-model"]], "Configuring the sampler": [[31, "configuring-the-sampler"]], "Configuring the prior": [[31, "configuring-the-prior"]], "Static parameters": [[31, "static-parameters"]], "Setting data": [[31, "setting-data"]], "Advanced configuration settings": [[31, "advanced-configuration-settings"]], "Waveform transforms": [[31, "waveform-transforms"]], "Calibration parameters": [[31, "calibration-parameters"]], "Constraints": [[31, "constraints"]], "Checkpointing and output files": [[31, "checkpointing-and-output-files"]], "Examples": [[31, "examples"]], "Visualizing the Posteriors": [[31, "visualizing-the-posteriors"]], "Workflows": [[31, "workflows"]], "For Developers": [[31, "for-developers"]], "Running on an analytic distribution": [[32, "running-on-an-analytic-distribution"]], "Simulated BBH example": [[33, "simulated-bbh-example"]], "1. Create the injection": [[33, "create-the-injection"]], "2. Setup the configuration files": [[33, "setup-the-configuration-files"]], "3. Run": [[33, "run"]], "GW150914 example with gaussian noise model": [[34, "gw150914-example-with-gaussian-noise-model"]], "Using the hierarchical model": [[35, "using-the-hierarchical-model"]], "Lensing example": [[35, "lensing-example"]], "LISA SMBHB injection and parameter estimation": [[36, "lisa-smbhb-injection-and-parameter-estimation"]], "LISA parameter estimation for simulated SMBHB from LDC": [[37, "lisa-parameter-estimation-for-simulated-smbhb-from-ldc"]], "Marginalized time model": [[38, "marginalized-time-model"]], "Example with GW150914": [[38, "example-with-gw150914"]], "Using the relative model": [[39, "using-the-relative-model"]], "Trying out different samplers": [[40, "trying-out-different-samplers"]], "Emcee": [[40, "id1"]], "Parallel-tempered Emcee": [[40, "id2"]], "PTEmcee": [[40, "id3"]], "Dynesty": [[40, "id4"]], "Ultranest": [[40, "id5"]], "Epsie": [[40, "id6"]], "cpnest": [[40, "id7"]], "Multinest": [[40, "id8"]], "Using the single template model": [[41, "using-the-single-template-model"]], "Quickstart example": [[41, "quickstart-example"]], "Marginalization subset of parameters": [[41, "marginalization-subset-of-parameters"]], "Marginalization over all parameters": [[41, "marginalization-over-all-parameters"]], "Abitrary sampling coordinates with nested samplers": [[41, "abitrary-sampling-coordinates-with-nested-samplers"]], "Inference IO": [[42, "inference-io"]], "Overview & Guidelines": [[42, "overview-guidelines"], [44, "overview-guidelines"]], "Posterior Files": [[42, "posterior-files"]], "Inheritance diagrams": [[42, "inheritance-diagrams"], [44, "inheritance-diagrams"]], "How to add a sampler IO class": [[42, "how-to-add-a-sampler-io-class"]], "Details of common Models in PyCBC Inference": [[43, "details-of-common-models-in-pycbc-inference"]], "Standard models with full waveform generation": [[43, "standard-models-with-full-waveform-generation"]], "Heterodyne / Relative Models": [[43, "heterodyne-relative-models"]], "Extrinsic Parameter Only Models": [[43, "extrinsic-parameter-only-models"]], "Composite Models": [[43, "composite-models"]], "Sampler API": [[44, "sampler-api"]], "Detailed example": [[44, "detailed-example"]], "How to add a sampler": [[44, "how-to-add-a-sampler"]], "Plotting the posteriors (pycbc_inference_plot_posterior)": [[45, "plotting-the-posteriors-pycbc-inference-plot-posterior"]], "Plotting a specific iteration": [[45, "plotting-a-specific-iteration"]], "Plotting a thinned chain of samples": [[45, "plotting-a-thinned-chain-of-samples"]], "Making a movie (pycbc_inference_plot_movie)": [[45, "making-a-movie-pycbc-inference-plot-movie"]], "Installing PyCBC": [[46, "installing-pycbc"]], "Simple Installation": [[46, "simple-installation"]], "Full Virtualenv for Development and Production": [[46, "full-virtualenv-for-development-and-production"]], "Development build on LDG / IGWN clusters": [[46, "development-build-on-ldg-igwn-clusters"]], "Other scenarios": [[46, "other-scenarios"]], "Docker": [[46, "docker"]], "Building the Documentation": [[46, "building-the-documentation"]], "Use of Intel MKL Optimized FFT libraries": [[46, "use-of-intel-mkl-optimized-fft-libraries"]], "Graphics Processing Unit support with CUDA": [[46, "graphics-processing-unit-support-with-cuda"]], "Related Help": [[46, "related-help"]], "Instructions to add CUDA support (optional)": [[47, "instructions-to-add-cuda-support-optional"]], "Installing the CUDA dependencies": [[47, "installing-the-cuda-dependencies"]], "Installing lalsuite for PyCBC": [[48, "installing-lalsuite-for-pycbc"]], "Obtaining the source code and checking out a version": [[48, "obtaining-the-source-code-and-checking-out-a-version"]], "Building and installing into your virtual environment": [[48, "building-and-installing-into-your-virtual-environment"]], "Additional data files from lalsuite-extra": [[48, "additional-data-files-from-lalsuite-extra"]], "Setting up virtualenv": [[49, "setting-up-virtualenv"]], "Install pip": [[49, "install-pip"]], "Install virtualenv": [[49, "install-virtualenv"]], "pycbc": [[50, "pycbc"]], "Generating Noise": [[51, "generating-noise"]], "Generating time domain Gaussian noise": [[51, "generating-time-domain-gaussian-noise"]], "Handling PSDs": [[52, "handling-psds"]], "Reading / Saving a PSD from a file": [[52, "reading-saving-a-psd-from-a-file"]], "Generating an Analytic PSD from lalsimulation": [[52, "generating-an-analytic-psd-from-lalsimulation"]], "Estimating the PSD of a time series": [[52, "estimating-the-psd-of-a-time-series"]], "pycbc package": [[53, "pycbc-package"]], "Subpackages": [[53, "subpackages"], [60, "subpackages"]], "Submodules": [[53, "submodules"], [54, "submodules"], [55, "submodules"], [56, "submodules"], [57, "submodules"], [58, "submodules"], [59, "submodules"], [60, "submodules"], [61, "submodules"], [62, "submodules"], [63, "submodules"], [64, "submodules"], [65, "submodules"], [66, "submodules"], [67, "submodules"], [68, "submodules"], [69, "submodules"], [70, "submodules"], [71, "submodules"], [72, "submodules"], [73, "submodules"], [74, "submodules"], [75, "submodules"], [76, "submodules"], [77, "submodules"]], "pycbc.bin_utils module": [[53, "module-pycbc.bin_utils"]], "pycbc.boundaries module": [[53, "module-pycbc.boundaries"]], "pycbc.conversions module": [[53, "module-pycbc.conversions"]], "pycbc.coordinates module": [[53, "module-pycbc.coordinates"]], "pycbc.cosmology module": [[53, "module-pycbc.cosmology"]], "pycbc.detector module": [[53, "module-pycbc.detector"]], "pycbc.dq module": [[53, "module-pycbc.dq"]], "pycbc.libutils module": [[53, "module-pycbc.libutils"]], "pycbc.mchirp_area module": [[53, "module-pycbc.mchirp_area"]], "pycbc.opt module": [[53, "module-pycbc.opt"]], "pycbc.pnutils module": [[53, "module-pycbc.pnutils"]], "pycbc.pool module": [[53, "module-pycbc.pool"]], "pycbc.rate module": [[53, "module-pycbc.rate"]], "pycbc.scheme module": [[53, "module-pycbc.scheme"]], "pycbc.sensitivity module": [[53, "module-pycbc.sensitivity"]], "pycbc.transforms module": [[53, "module-pycbc.transforms"]], "pycbc.version module": [[53, "module-pycbc.version"]], "Module contents": [[53, "module-pycbc"], [54, "module-pycbc.catalog"], [55, "module-pycbc.distributions"], [56, "module-pycbc.events"], [57, "module-pycbc.fft"], [58, "module-pycbc.filter"], [59, "module-pycbc.frame"], [60, "module-pycbc.inference"], [61, "module-pycbc.inference.io"], [62, "module-pycbc.inference.jump"], [63, "module-pycbc.inference.models"], [64, "module-pycbc.inference.sampler"], [65, "module-pycbc.inject"], [66, "module-pycbc.io"], [67, "module-pycbc.neutron_stars"], [68, "module-pycbc.noise"], [69, "module-pycbc.population"], [70, "module-pycbc.psd"], [71, "module-pycbc.results"], [72, "module-pycbc.strain"], [73, "module-pycbc.tmpltbank"], [74, "module-pycbc.types"], [75, "module-pycbc.vetoes"], [76, "module-pycbc.waveform"], [77, "module-pycbc.workflow"]], "pycbc.catalog package": [[54, "pycbc-catalog-package"]], "pycbc.catalog.catalog module": [[54, "module-pycbc.catalog.catalog"]], "pycbc.distributions package": [[55, "pycbc-distributions-package"]], "pycbc.distributions.angular module": [[55, "module-pycbc.distributions.angular"]], "pycbc.distributions.arbitrary module": [[55, "module-pycbc.distributions.arbitrary"]], "pycbc.distributions.bounded module": [[55, "module-pycbc.distributions.bounded"]], "pycbc.distributions.constraints module": [[55, "module-pycbc.distributions.constraints"]], "pycbc.distributions.external module": [[55, "module-pycbc.distributions.external"]], "pycbc.distributions.fixedsamples module": [[55, "module-pycbc.distributions.fixedsamples"]], "pycbc.distributions.gaussian module": [[55, "module-pycbc.distributions.gaussian"]], "pycbc.distributions.joint module": [[55, "module-pycbc.distributions.joint"]], "pycbc.distributions.mass module": [[55, "module-pycbc.distributions.mass"]], "pycbc.distributions.power_law module": [[55, "module-pycbc.distributions.power_law"]], "pycbc.distributions.qnm module": [[55, "module-pycbc.distributions.qnm"]], "pycbc.distributions.sky_location module": [[55, "module-pycbc.distributions.sky_location"]], "pycbc.distributions.spins module": [[55, "module-pycbc.distributions.spins"]], "pycbc.distributions.uniform module": [[55, "module-pycbc.distributions.uniform"]], "pycbc.distributions.uniform_log module": [[55, "module-pycbc.distributions.uniform_log"]], "pycbc.distributions.utils module": [[55, "module-pycbc.distributions.utils"]], "pycbc.events package": [[56, "pycbc-events-package"]], "pycbc.events.coherent module": [[56, "module-pycbc.events.coherent"]], "pycbc.events.coinc module": [[56, "module-pycbc.events.coinc"]], "pycbc.events.coinc_rate module": [[56, "module-pycbc.events.coinc_rate"]], "pycbc.events.cuts module": [[56, "module-pycbc.events.cuts"]], "pycbc.events.eventmgr module": [[56, "module-pycbc.events.eventmgr"]], "pycbc.events.eventmgr_cython module": [[56, "module-pycbc.events.eventmgr_cython"]], "pycbc.events.ranking module": [[56, "module-pycbc.events.ranking"]], "pycbc.events.significance module": [[56, "module-pycbc.events.significance"]], "pycbc.events.simd_threshold_cython module": [[56, "module-pycbc.events.simd_threshold_cython"]], "pycbc.events.single module": [[56, "module-pycbc.events.single"]], "pycbc.events.stat module": [[56, "module-pycbc.events.stat"]], "pycbc.events.threshold_cpu module": [[56, "module-pycbc.events.threshold_cpu"]], "pycbc.events.trigger_fits module": [[56, "module-pycbc.events.trigger_fits"]], "pycbc.events.triggers module": [[56, "module-pycbc.events.triggers"]], "pycbc.events.veto module": [[56, "module-pycbc.events.veto"]], "pycbc.fft package": [[57, "pycbc-fft-package"]], "pycbc.fft.backend_cpu module": [[57, "module-pycbc.fft.backend_cpu"]], "pycbc.fft.backend_mkl module": [[57, "module-pycbc.fft.backend_mkl"]], "pycbc.fft.backend_support module": [[57, "module-pycbc.fft.backend_support"]], "pycbc.fft.class_api module": [[57, "module-pycbc.fft.class_api"]], "pycbc.fft.core module": [[57, "module-pycbc.fft.core"]], "pycbc.fft.fft_callback module": [[57, "module-pycbc.fft.fft_callback"]], "pycbc.fft.fftw module": [[57, "module-pycbc.fft.fftw"]], "pycbc.fft.fftw_pruned module": [[57, "module-pycbc.fft.fftw_pruned"]], "pycbc.fft.fftw_pruned_cython module": [[57, "module-pycbc.fft.fftw_pruned_cython"]], "pycbc.fft.func_api module": [[57, "module-pycbc.fft.func_api"]], "pycbc.fft.mkl module": [[57, "module-pycbc.fft.mkl"]], "pycbc.fft.npfft module": [[57, "module-pycbc.fft.npfft"]], "pycbc.fft.parser_support module": [[57, "module-pycbc.fft.parser_support"]], "pycbc.filter package": [[58, "pycbc-filter-package"]], "pycbc.filter.autocorrelation module": [[58, "module-pycbc.filter.autocorrelation"]], "pycbc.filter.matchedfilter module": [[58, "module-pycbc.filter.matchedfilter"]], "pycbc.filter.matchedfilter_cpu module": [[58, "module-pycbc.filter.matchedfilter_cpu"]], "pycbc.filter.matchedfilter_numpy module": [[58, "module-pycbc.filter.matchedfilter_numpy"]], "pycbc.filter.qtransform module": [[58, "module-pycbc.filter.qtransform"]], "pycbc.filter.resample module": [[58, "module-pycbc.filter.resample"]], "pycbc.filter.simd_correlate module": [[58, "module-pycbc.filter.simd_correlate"]], "pycbc.filter.simd_correlate_cython module": [[58, "module-pycbc.filter.simd_correlate_cython"]], "pycbc.filter.zpk module": [[58, "module-pycbc.filter.zpk"]], "pycbc.frame package": [[59, "pycbc-frame-package"]], "pycbc.frame.frame module": [[59, "module-pycbc.frame.frame"]], "pycbc.frame.gwosc module": [[59, "module-pycbc.frame.gwosc"]], "pycbc.frame.store module": [[59, "module-pycbc.frame.store"]], "pycbc.inference package": [[60, "pycbc-inference-package"]], "pycbc.inference.burn_in module": [[60, "module-pycbc.inference.burn_in"]], "pycbc.inference.entropy module": [[60, "module-pycbc.inference.entropy"]], "pycbc.inference.evidence module": [[60, "module-pycbc.inference.evidence"]], "pycbc.inference.gelman_rubin module": [[60, "module-pycbc.inference.gelman_rubin"]], "pycbc.inference.geweke module": [[60, "module-pycbc.inference.geweke"]], "pycbc.inference.option_utils module": [[60, "module-pycbc.inference.option_utils"]], "pycbc.inference.io package": [[61, "pycbc-inference-io-package"]], "pycbc.inference.io.base_hdf module": [[61, "module-pycbc.inference.io.base_hdf"]], "pycbc.inference.io.base_mcmc module": [[61, "module-pycbc.inference.io.base_mcmc"]], "pycbc.inference.io.base_multitemper module": [[61, "module-pycbc.inference.io.base_multitemper"]], "pycbc.inference.io.base_nested_sampler module": [[61, "module-pycbc.inference.io.base_nested_sampler"]], "pycbc.inference.io.base_sampler module": [[61, "module-pycbc.inference.io.base_sampler"]], "pycbc.inference.io.dynesty module": [[61, "module-pycbc.inference.io.dynesty"]], "pycbc.inference.io.emcee module": [[61, "module-pycbc.inference.io.emcee"]], "pycbc.inference.io.emcee_pt module": [[61, "module-pycbc.inference.io.emcee_pt"]], "pycbc.inference.io.epsie module": [[61, "module-pycbc.inference.io.epsie"]], "pycbc.inference.io.multinest module": [[61, "module-pycbc.inference.io.multinest"]], "pycbc.inference.io.posterior module": [[61, "module-pycbc.inference.io.posterior"]], "pycbc.inference.io.ptemcee module": [[61, "module-pycbc.inference.io.ptemcee"]], "pycbc.inference.io.txt module": [[61, "module-pycbc.inference.io.txt"]], "pycbc.inference.io.ultranest module": [[61, "module-pycbc.inference.io.ultranest"]], "pycbc.inference.jump package": [[62, "pycbc-inference-jump-package"]], "pycbc.inference.jump.angular module": [[62, "module-pycbc.inference.jump.angular"]], "pycbc.inference.jump.bounded_normal module": [[62, "module-pycbc.inference.jump.bounded_normal"]], "pycbc.inference.jump.discrete module": [[62, "module-pycbc.inference.jump.discrete"]], "pycbc.inference.jump.normal module": [[62, "module-pycbc.inference.jump.normal"]], "pycbc.inference.models package": [[63, "pycbc-inference-models-package"]], "pycbc.inference.models.analytic module": [[63, "module-pycbc.inference.models.analytic"]], "pycbc.inference.models.base module": [[63, "module-pycbc.inference.models.base"]], "pycbc.inference.models.base_data module": [[63, "module-pycbc.inference.models.base_data"]], "pycbc.inference.models.brute_marg module": [[63, "module-pycbc.inference.models.brute_marg"]], "pycbc.inference.models.data_utils module": [[63, "module-pycbc.inference.models.data_utils"]], "pycbc.inference.models.gated_gaussian_noise module": [[63, "module-pycbc.inference.models.gated_gaussian_noise"]], "pycbc.inference.models.gaussian_noise module": [[63, "module-pycbc.inference.models.gaussian_noise"]], "pycbc.inference.models.hierarchical module": [[63, "module-pycbc.inference.models.hierarchical"]], "pycbc.inference.models.marginalized_gaussian_noise module": [[63, "module-pycbc.inference.models.marginalized_gaussian_noise"]], "pycbc.inference.models.relbin module": [[63, "module-pycbc.inference.models.relbin"]], "pycbc.inference.models.relbin_cpu module": [[63, "module-pycbc.inference.models.relbin_cpu"]], "pycbc.inference.models.single_template module": [[63, "module-pycbc.inference.models.single_template"]], "pycbc.inference.models.tools module": [[63, "module-pycbc.inference.models.tools"]], "pycbc.inference.sampler package": [[64, "pycbc-inference-sampler-package"]], "pycbc.inference.sampler.base module": [[64, "module-pycbc.inference.sampler.base"]], "pycbc.inference.sampler.base_cube module": [[64, "module-pycbc.inference.sampler.base_cube"]], "pycbc.inference.sampler.base_mcmc module": [[64, "module-pycbc.inference.sampler.base_mcmc"]], "pycbc.inference.sampler.base_multitemper module": [[64, "module-pycbc.inference.sampler.base_multitemper"]], "pycbc.inference.sampler.dummy module": [[64, "module-pycbc.inference.sampler.dummy"]], "pycbc.inference.sampler.dynesty module": [[64, "module-pycbc.inference.sampler.dynesty"]], "pycbc.inference.sampler.emcee module": [[64, "module-pycbc.inference.sampler.emcee"]], "pycbc.inference.sampler.emcee_pt module": [[64, "module-pycbc.inference.sampler.emcee_pt"]], "pycbc.inference.sampler.epsie module": [[64, "module-pycbc.inference.sampler.epsie"]], "pycbc.inference.sampler.multinest module": [[64, "module-pycbc.inference.sampler.multinest"]], "pycbc.inference.sampler.ptemcee module": [[64, "module-pycbc.inference.sampler.ptemcee"]], "pycbc.inference.sampler.ultranest module": [[64, "module-pycbc.inference.sampler.ultranest"]], "pycbc.inject package": [[65, "pycbc-inject-package"]], "pycbc.inject.inject module": [[65, "module-pycbc.inject.inject"]], "pycbc.inject.injfilterrejector module": [[65, "module-pycbc.inject.injfilterrejector"]], "pycbc.io package": [[66, "pycbc-io-package"]], "pycbc.io.hdf module": [[66, "module-pycbc.io.hdf"]], "pycbc.io.ligolw module": [[66, "module-pycbc.io.ligolw"]], "pycbc.io.live module": [[66, "module-pycbc.io.live"]], "pycbc.io.record module": [[66, "module-pycbc.io.record"]], "pycbc.neutron_stars package": [[67, "pycbc-neutron-stars-package"]], "pycbc.neutron_stars.eos_utils module": [[67, "module-pycbc.neutron_stars.eos_utils"]], "pycbc.neutron_stars.pg_isso_solver module": [[67, "module-pycbc.neutron_stars.pg_isso_solver"]], "pycbc.noise package": [[68, "pycbc-noise-package"]], "pycbc.noise.gaussian module": [[68, "module-pycbc.noise.gaussian"]], "pycbc.noise.reproduceable module": [[68, "module-pycbc.noise.reproduceable"]], "pycbc.population package": [[69, "pycbc-population-package"]], "pycbc.population.fgmc_functions module": [[69, "module-pycbc.population.fgmc_functions"]], "pycbc.population.fgmc_laguerre module": [[69, "module-pycbc.population.fgmc_laguerre"]], "pycbc.population.fgmc_plots module": [[69, "module-pycbc.population.fgmc_plots"]], "pycbc.population.live_pastro module": [[69, "module-pycbc.population.live_pastro"]], "pycbc.population.live_pastro_utils module": [[69, "module-pycbc.population.live_pastro_utils"]], "pycbc.population.population_models module": [[69, "module-pycbc.population.population_models"]], "pycbc.population.rates_functions module": [[69, "module-pycbc.population.rates_functions"]], "pycbc.population.scale_injections module": [[69, "module-pycbc.population.scale_injections"]], "pycbc.psd package": [[70, "pycbc-psd-package"]], "pycbc.psd.analytical module": [[70, "module-pycbc.psd.analytical"]], "pycbc.psd.analytical_space module": [[70, "module-pycbc.psd.analytical_space"]], "pycbc.psd.estimate module": [[70, "module-pycbc.psd.estimate"]], "pycbc.psd.read module": [[70, "module-pycbc.psd.read"]], "pycbc.psd.variation module": [[70, "module-pycbc.psd.variation"]], "pycbc.results package": [[71, "pycbc-results-package"]], "pycbc.results.color module": [[71, "module-pycbc.results.color"]], "pycbc.results.dq module": [[71, "module-pycbc.results.dq"]], "pycbc.results.followup module": [[71, "module-pycbc.results.followup"]], "pycbc.results.layout module": [[71, "module-pycbc.results.layout"]], "pycbc.results.legacy_grb module": [[71, "module-pycbc.results.legacy_grb"]], "pycbc.results.metadata module": [[71, "module-pycbc.results.metadata"]], "pycbc.results.mpld3_utils module": [[71, "module-pycbc.results.mpld3_utils"]], "pycbc.results.plot module": [[71, "module-pycbc.results.plot"]], "pycbc.results.psd module": [[71, "module-pycbc.results.psd"]], "pycbc.results.pygrb_plotting_utils module": [[71, "module-pycbc.results.pygrb_plotting_utils"]], "pycbc.results.pygrb_postprocessing_utils module": [[71, "module-pycbc.results.pygrb_postprocessing_utils"]], "pycbc.results.render module": [[71, "module-pycbc.results.render"]], "pycbc.results.scatter_histograms module": [[71, "module-pycbc.results.scatter_histograms"]], "pycbc.results.str_utils module": [[71, "module-pycbc.results.str_utils"]], "pycbc.results.table_utils module": [[71, "module-pycbc.results.table_utils"]], "pycbc.results.versioning module": [[71, "module-pycbc.results.versioning"]], "pycbc.strain package": [[72, "pycbc-strain-package"]], "pycbc.strain.calibration module": [[72, "module-pycbc.strain.calibration"]], "pycbc.strain.gate module": [[72, "module-pycbc.strain.gate"]], "pycbc.strain.lines module": [[72, "module-pycbc.strain.lines"]], "pycbc.strain.recalibrate module": [[72, "module-pycbc.strain.recalibrate"]], "pycbc.strain.strain module": [[72, "module-pycbc.strain.strain"]], "pycbc.tmpltbank package": [[73, "pycbc-tmpltbank-package"]], "pycbc.tmpltbank.bank_conversions module": [[73, "module-pycbc.tmpltbank.bank_conversions"]], "pycbc.tmpltbank.bank_output_utils module": [[73, "module-pycbc.tmpltbank.bank_output_utils"]], "pycbc.tmpltbank.brute_force_methods module": [[73, "module-pycbc.tmpltbank.brute_force_methods"]], "pycbc.tmpltbank.calc_moments module": [[73, "module-pycbc.tmpltbank.calc_moments"]], "pycbc.tmpltbank.coord_utils module": [[73, "module-pycbc.tmpltbank.coord_utils"]], "pycbc.tmpltbank.lambda_mapping module": [[73, "module-pycbc.tmpltbank.lambda_mapping"]], "pycbc.tmpltbank.lattice_utils module": [[73, "module-pycbc.tmpltbank.lattice_utils"]], "pycbc.tmpltbank.option_utils module": [[73, "module-pycbc.tmpltbank.option_utils"]], "pycbc.tmpltbank.partitioned_bank module": [[73, "module-pycbc.tmpltbank.partitioned_bank"]], "pycbc.types package": [[74, "pycbc-types-package"]], "pycbc.types.aligned module": [[74, "module-pycbc.types.aligned"]], "pycbc.types.array module": [[74, "module-pycbc.types.array"]], "pycbc.types.array_cpu module": [[74, "module-pycbc.types.array_cpu"]], "pycbc.types.config module": [[74, "module-pycbc.types.config"]], "pycbc.types.frequencyseries module": [[74, "module-pycbc.types.frequencyseries"]], "pycbc.types.optparse module": [[74, "module-pycbc.types.optparse"]], "pycbc.types.timeseries module": [[74, "module-pycbc.types.timeseries"]], "pycbc.vetoes package": [[75, "pycbc-vetoes-package"]], "pycbc.vetoes.autochisq module": [[75, "module-pycbc.vetoes.autochisq"]], "pycbc.vetoes.bank_chisq module": [[75, "module-pycbc.vetoes.bank_chisq"]], "pycbc.vetoes.chisq module": [[75, "module-pycbc.vetoes.chisq"]], "pycbc.vetoes.chisq_cpu module": [[75, "module-pycbc.vetoes.chisq_cpu"]], "pycbc.vetoes.sgchisq module": [[75, "module-pycbc.vetoes.sgchisq"]], "pycbc.waveform package": [[76, "pycbc-waveform-package"]], "pycbc.waveform.bank module": [[76, "module-pycbc.waveform.bank"]], "pycbc.waveform.compress module": [[76, "module-pycbc.waveform.compress"]], "pycbc.waveform.decompress_cpu module": [[76, "module-pycbc.waveform.decompress_cpu"]], "pycbc.waveform.decompress_cpu_cython module": [[76, "module-pycbc.waveform.decompress_cpu_cython"]], "pycbc.waveform.generator module": [[76, "module-pycbc.waveform.generator"]], "pycbc.waveform.multiband module": [[76, "module-pycbc.waveform.multiband"]], "pycbc.waveform.nltides module": [[76, "module-pycbc.waveform.nltides"]], "pycbc.waveform.parameters module": [[76, "module-pycbc.waveform.parameters"]], "pycbc.waveform.plugin module": [[76, "module-pycbc.waveform.plugin"]], "pycbc.waveform.premerger module": [[76, "module-pycbc.waveform.premerger"]], "pycbc.waveform.pycbc_phenomC_tmplt module": [[76, "pycbc-waveform-pycbc-phenomc-tmplt-module"]], "pycbc.waveform.ringdown module": [[76, "module-pycbc.waveform.ringdown"]], "pycbc.waveform.sinegauss module": [[76, "module-pycbc.waveform.sinegauss"]], "pycbc.waveform.spa_tmplt module": [[76, "module-pycbc.waveform.spa_tmplt"]], "pycbc.waveform.spa_tmplt_cpu module": [[76, "module-pycbc.waveform.spa_tmplt_cpu"]], "pycbc.waveform.supernovae module": [[76, "module-pycbc.waveform.supernovae"]], "pycbc.waveform.utils module": [[76, "module-pycbc.waveform.utils"]], "pycbc.waveform.utils_cpu module": [[76, "module-pycbc.waveform.utils_cpu"]], "pycbc.waveform.waveform module": [[76, "module-pycbc.waveform.waveform"]], "pycbc.waveform.waveform_modes module": [[76, "module-pycbc.waveform.waveform_modes"]], "pycbc.workflow package": [[77, "pycbc-workflow-package"]], "pycbc.workflow.coincidence module": [[77, "module-pycbc.workflow.coincidence"]], "pycbc.workflow.configparser_test module": [[77, "module-pycbc.workflow.configparser_test"]], "pycbc.workflow.configuration module": [[77, "module-pycbc.workflow.configuration"]], "pycbc.workflow.core module": [[77, "module-pycbc.workflow.core"]], "pycbc.workflow.datafind module": [[77, "module-pycbc.workflow.datafind"]], "pycbc.workflow.dq module": [[77, "module-pycbc.workflow.dq"]], "pycbc.workflow.grb_utils module": [[77, "module-pycbc.workflow.grb_utils"]], "pycbc.workflow.inference_followups module": [[77, "module-pycbc.workflow.inference_followups"]], "pycbc.workflow.injection module": [[77, "module-pycbc.workflow.injection"]], "pycbc.workflow.jobsetup module": [[77, "module-pycbc.workflow.jobsetup"]], "pycbc.workflow.matched_filter module": [[77, "module-pycbc.workflow.matched_filter"]], "pycbc.workflow.minifollowups module": [[77, "module-pycbc.workflow.minifollowups"]], "pycbc.workflow.pegasus_sites module": [[77, "module-pycbc.workflow.pegasus_sites"]], "pycbc.workflow.pegasus_workflow module": [[77, "module-pycbc.workflow.pegasus_workflow"]], "pycbc.workflow.plotting module": [[77, "module-pycbc.workflow.plotting"]], "pycbc.workflow.psd module": [[77, "module-pycbc.workflow.psd"]], "pycbc.workflow.psdfiles module": [[77, "module-pycbc.workflow.psdfiles"]], "pycbc.workflow.segment module": [[77, "module-pycbc.workflow.segment"]], "pycbc.workflow.splittable module": [[77, "module-pycbc.workflow.splittable"]], "pycbc.workflow.tmpltbank module": [[77, "module-pycbc.workflow.tmpltbank"]], "pycbc_condition_strain: operations with strain data files": [[78, "pycbc-condition-strain-operations-with-strain-data-files"]], "Splitting existing data into shorter frame files": [[78, "splitting-existing-data-into-shorter-frame-files"]], "Conditioning existing data": [[78, "conditioning-existing-data"]], "Injecting simulated signals into existing data": [[78, "injecting-simulated-signals-into-existing-data"]], "Simulating gravitational-wave data": [[78, "simulating-gravitational-wave-data"]], "Caveats": [[78, "caveats"]], "Creating Releases of PyCBC": [[79, "creating-releases-of-pycbc"]], "Creating the release on GitHub": [[79, "creating-the-release-on-github"]], "Backporting Bug Fixes to Previous Release Series": [[79, "backporting-bug-fixes-to-previous-release-series"]], "PyCBC template bank generation documentation (pycbc.tmpltbank)": [[80, "pycbc-template-bank-generation-documentation-pycbc-tmpltbank"]], "Non spin bank placement: pycbc_geom_nonspinbank": [[80, "non-spin-bank-placement-pycbc-geom-nonspinbank"]], "Background": [[80, "background"], [80, "id2"], [80, "id6"]], "Some examples": [[80, "some-examples"], [80, "id3"], [80, "id7"]], "Command line options": [[80, "command-line-options"], [80, "id4"]], "Aligned-spin geometric placement: pycbc_geom_aligned_bank": [[80, "aligned-spin-geometric-placement-pycbc-geom-aligned-bank"]], "Aligned-spin stochastic placement": [[80, "aligned-spin-stochastic-placement"]], "Ian\u2019s recommendation: Which stochastic code should I use?": [[80, "ian-s-recommendation-which-stochastic-code-should-i-use"]], "I want to use the F2 metric": [[80, "i-want-to-use-the-f2-metric"]], "I want to use another metric, ie. an IMR metric": [[80, "i-want-to-use-another-metric-ie-an-imr-metric"]], "I want to use direct match": [[80, "i-want-to-use-direct-match"]], "Command line options: pycbc_aligned_stoch_bank": [[80, "command-line-options-pycbc-aligned-stoch-bank"]], "Command line options: lalapps_cbc_sbank": [[80, "command-line-options-lalapps-cbc-sbank"]], "Sbank workflow generator": [[80, "sbank-workflow-generator"]], "Hybrid approaches: the best of both worlds": [[80, "hybrid-approaches-the-best-of-both-worlds"]], "The module\u2019s source code": [[80, "the-module-s-source-code"]], "Library Examples and Interactive Tutorials": [[81, "library-examples-and-interactive-tutorials"]], "Uploading triggers to gracedb": [[82, "uploading-triggers-to-gracedb"]], "Requirements": [[82, "requirements"], [88, "requirements"], [88, "id2"]], "Finding input files": [[82, "finding-input-files"]], "Running the command": [[82, "running-the-command"]], "Waveforms": [[83, "waveforms"]], "What waveforms can I generate?": [[83, "what-waveforms-can-i-generate"]], "Plotting Time Domain Waveforms": [[83, "plotting-time-domain-waveforms"]], "Generating one waveform in multiple detectors": [[83, "generating-one-waveform-in-multiple-detectors"]], "Calculating the match between waveforms": [[83, "calculating-the-match-between-waveforms"]], "Plotting a TD and FD waveform together in the TD": [[83, "plotting-a-td-and-fd-waveform-together-in-the-td"]], "Plotting GW phase and amplitude of TD waveform": [[83, "plotting-gw-phase-and-amplitude-of-td-waveform"]], "Plotting frequency evolution of TD waveform": [[83, "plotting-frequency-evolution-of-td-waveform"]], "Making new waveform approximants available to PyCBC": [[84, "making-new-waveform-approximants-available-to-pycbc"]], "Adding a custom waveform model within a script": [[84, "adding-a-custom-waveform-model-within-a-script"]], "Creating a plugin for PyCBC": [[84, "creating-a-plugin-for-pycbc"]], "Workflow: the inspiral analysis workflow generator (pycbc.workflow)": [[85, "workflow-the-inspiral-analysis-workflow-generator-pycbc-workflow"]], "Workflow module documentation": [[85, "workflow-module-documentation"]], "Basics and overview": [[85, "basics-and-overview"]], "Generating segments": [[85, "generating-segments"]], "Obtaining data": [[85, "obtaining-data"]], "Injection generation": [[85, "injection-generation"]], "Template bank": [[85, "template-bank"]], "Split table": [[85, "split-table"]], "Matched-filtering": [[85, "matched-filtering"]], "Coincidence": [[85, "coincidence"]], "The workflow datafind and validation module": [[86, "the-workflow-datafind-and-validation-module"]], "Usage": [[86, "usage"], [89, "usage"], [90, "usage"], [96, "usage"], [97, "usage"], [98, "usage"]], "Configuration file setup": [[86, "configuration-file-setup"], [89, "configuration-file-setup"], [90, "configuration-file-setup"], [96, "configuration-file-setup"], [97, "configuration-file-setup"], [98, "configuration-file-setup"]], "[workflow-datafind] section": [[86, "workflow-datafind-section"]], "[executables]": [[86, "executables"], [89, "executables"], [90, "executables"], [97, "executables"], [98, "executables"]], "Other sections": [[86, "other-sections"]], "[datafind]": [[86, "datafind"]], "pycbc.workflow.datafind Module": [[86, "pycbc-workflow-datafind-module"]], "HDF5 Based Coincidence Code": [[87, "hdf5-based-coincidence-code"]], "Limitations": [[87, "limitations"]], "Configuration File": [[87, "configuration-file"], [95, "configuration-file"]], "Workflow Configuration": [[87, "workflow-configuration"]], "Executable Configuration": [[87, "executable-configuration"]], "Options to the coincidence/background executable": [[87, "options-to-the-coincidence-background-executable"]], "Options to the coincidence clustering + statistic asignment executable": [[87, "options-to-the-coincidence-clustering-statistic-asignment-executable"]], "Options to the injection finding executable": [[87, "options-to-the-injection-finding-executable"]], "Options for sensitivity plotting": [[87, "options-for-sensitivity-plotting"]], "Pycbc\u2019s workflow module configuration file(s) and command line interface": [[88, "pycbc-s-workflow-module-configuration-file-s-and-command-line-interface"]], "Supplying the config file on the command line and overriding options": [[88, "supplying-the-config-file-on-the-command-line-and-overriding-options"]], "Example": [[88, "example"], [88, "id1"], [88, "id3"]], "Global options - the [workflow] section": [[88, "global-options-the-workflow-section"]], "[workflow-XXX] subsections": [[88, "workflow-xxx-subsections"]], "Executable locations - the [executables] section": [[88, "executable-locations-the-executables-section"]], "executable macros": [[88, "executable-macros"]], "which(executable)": [[88, "which-executable"]], "Executable options": [[88, "executable-options"]], "Example complete workflow .ini file": [[88, "example-complete-workflow-ini-file"]], "[sharedoptions] section": [[88, "sharedoptions-section"]], "Code documentation": [[88, "code-documentation"]], "pycbc.workflow.configuration Module": [[88, "pycbc-workflow-configuration-module"]], "The workflow injection generation module": [[89, "the-workflow-injection-generation-module"]], "[workflow-injections] section": [[89, "workflow-injections-section"]], "Supported injection executables and instructions for using them": [[89, "supported-injection-executables-and-instructions-for-using-them"]], "lalapps_inspinj": [[89, "lalapps-inspinj"]], "pycbc.workflow.injection Module": [[89, "pycbc-workflow-injection-module"]], "The workflow matched-filter module": [[90, "the-workflow-matched-filter-module"]], "[workflow-matchedfilter] section": [[90, "workflow-matchedfilter-section"]], "Supported inspiral trigger generators and instructions for using them": [[90, "supported-inspiral-trigger-generators-and-instructions-for-using-them"]], "lalapps_inspiral_ahope": [[90, "lalapps-inspiral-ahope"]], "pycbc_inspiral": [[90, "pycbc-inspiral"]], "pycbc.workflow.matched_filter Module": [[90, "pycbc-workflow-matched-filter-module"]], "pycbc_make_inference_inj_workflow: A parameter estimation workflow generator for injections": [[91, "pycbc-make-inference-inj-workflow-a-parameter-estimation-workflow-generator-for-injections"]], "Example: BBH injections with dynesty": [[91, "example-bbh-injections-with-dynesty"]], "Get the inference configuration files": [[91, "get-the-inference-configuration-files"], [92, "get-the-inference-configuration-files"]], "Setup the workflow configuration file": [[91, "setup-the-workflow-configuration-file"], [92, "setup-the-workflow-configuration-file"]], "Generate the workflow": [[91, "generate-the-workflow"], [92, "generate-the-workflow"], [95, "generate-the-workflow"]], "Plan and execute the workflow": [[91, "plan-and-execute-the-workflow"], [92, "plan-and-execute-the-workflow"]], "Results page": [[91, "results-page"], [92, "results-page"]], "pycbc_make_inference_workflow: A parameter estimation workflow generator": [[92, "pycbc-make-inference-workflow-a-parameter-estimation-workflow-generator"]], "Example: GW150914 and GW170814 with emcee_pt": [[92, "example-gw150914-and-gw170814-with-emcee-pt"]], "Example: GW150914 and GW170814 with dynesty": [[92, "example-gw150914-and-gw170814-with-dynesty"]], "pycbc_make_offline_search_workflow: A workflow to search for gravitational waves": [[93, "pycbc-make-offline-search-workflow-a-workflow-to-search-for-gravitational-waves"]], "Configuration file": [[93, "configuration-file"], [94, "configuration-file"]], "Planning and Submitting the Workflow": [[93, "planning-and-submitting-the-workflow"], [95, "planning-and-submitting-the-workflow"]], "Monitor and Debug the Workflow (Detailed Pegasus Documentation)": [[93, "monitor-and-debug-the-workflow-detailed-pegasus-documentation"], [95, "monitor-and-debug-the-workflow-detailed-pegasus-documentation"]], "Pegasus Dashboard": [[93, "pegasus-dashboard"], [95, "pegasus-dashboard"]], "Pegasus Analyzer": [[93, "pegasus-analyzer"]], "Reuse of data from a previous workflow": [[93, "reuse-of-data-from-a-previous-workflow"], [95, "reuse-of-data-from-a-previous-workflow"]], "Setting up a workflow for data reuse": [[93, "setting-up-a-workflow-for-data-reuse"]], "Extending the GPS end time of a previous workflow": [[93, "extending-the-gps-end-time-of-a-previous-workflow"]], "Re-running a workflow using a new veto definer file": [[93, "re-running-a-workflow-using-a-new-veto-definer-file"]], "Re-running a failed workflow": [[93, "re-running-a-failed-workflow"]], "Using partial products from a previous workflow": [[93, "using-partial-products-from-a-previous-workflow"]], "Running on the Open Science Grid": [[93, "running-on-the-open-science-grid"]], "Prerequisites": [[93, "prerequisites"]], "Configuring the workflow": [[93, "configuring-the-workflow"]], "Running the workflow": [[93, "running-the-workflow"]], "pycbc_make_psd_estimation_workflow: A workflow generator for noise estimation": [[94, "pycbc-make-psd-estimation-workflow-a-workflow-generator-for-noise-estimation"]], "Generating and running the workflow": [[94, "generating-and-running-the-workflow"]], "pycbc_make_offline_grb_workflow: A GRB triggered CBC analysis workflow generator": [[95, "pycbc-make-offline-grb-workflow-a-grb-triggered-cbc-analysis-workflow-generator"]], "Workflow Sections": [[95, "workflow-sections"]], "Executable Sections": [[95, "executable-sections"]], "Pegasus Profile Sections": [[95, "pegasus-profile-sections"]], "How to run": [[95, "how-to-run"]], "Set up a run directory": [[95, "set-up-a-run-directory"]], "Configuration files - Are you running from production configuration (.ini) files?": [[95, "configuration-files-are-you-running-from-production-configuration-ini-files"]], "Yes, I want to run in a standard production configuration": [[95, "yes-i-want-to-run-in-a-standard-production-configuration"]], "No, I have my own configuration files": [[95, "no-i-have-my-own-configuration-files"]], "Pegasus Plots": [[95, "pegasus-plots"]], "Generate the full workflow you want to do": [[95, "generate-the-full-workflow-you-want-to-do"]], "Select the files you want to reuse from the prior run": [[95, "select-the-files-you-want-to-reuse-from-the-prior-run"]], "Plan the workflow": [[95, "plan-the-workflow"]], "The workflow segment generation module": [[96, "the-workflow-segment-generation-module"]], "Example config file": [[96, "example-config-file"]], "Description of the ini file contents": [[96, "description-of-the-ini-file-contents"]], "Flag syntax": [[96, "flag-syntax"]], "Version numbers": [[96, "version-numbers"]], "The veto-definer file": [[96, "the-veto-definer-file"]], "Adding a ifo": [[96, "adding-a-ifo"]], "Providing padding": [[96, "providing-padding"]], "Providing valid times": [[96, "providing-valid-times"]], "Obtaining segments from pre-existing XML files": [[96, "obtaining-segments-from-pre-existing-xml-files"]], "pycbc.workflow.segment Module": [[96, "pycbc-workflow-segment-module"]], "The workflow table splitting module": [[97, "the-workflow-table-splitting-module"]], "[workflow-splittable] section": [[97, "workflow-splittable-section"]], "Supported splittable executables and instructions for using them": [[97, "supported-splittable-executables-and-instructions-for-using-them"]], "pycbc_splitbank": [[97, "pycbc-splitbank"]], "pycbc.workflow.splittable Module": [[97, "pycbc-workflow-splittable-module"]], "The workflow template bank generation module": [[98, "the-workflow-template-bank-generation-module"]], "[workflow-tmpltbank] section": [[98, "workflow-tmpltbank-section"]], "Supported template bank exes and instructions for using them": [[98, "supported-template-bank-exes-and-instructions-for-using-them"]], "lalapps_tmpltbank_ahope": [[98, "lalapps-tmpltbank-ahope"]], "pycbc_geom_nonspinbank": [[98, "pycbc-geom-nonspinbank"]], "pycbc.workflow.tmpltbank Module": [[98, "pycbc-workflow-tmpltbank-module"]]}, "indexentries": {"a0() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.A0"]], "a3() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.A3"]], "aligntotalspin (class in pycbc.transforms)": [[53, "pycbc.transforms.AlignTotalSpin"]], "alignedmassspintocartesianspin (class in pycbc.transforms)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin"]], "basetransform (class in pycbc.transforms)": [[53, "pycbc.transforms.BaseTransform"]], "binnedarray (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.BinnedArray"]], "binnedratios (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.BinnedRatios"]], "bins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.Bins"]], "bounds (class in pycbc.boundaries)": [[53, "pycbc.boundaries.Bounds"]], "broadcastpool (class in pycbc.pool)": [[53, "pycbc.pool.BroadcastPool"]], "cpuscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.CPUScheme"]], "cudascheme (class in pycbc.scheme)": [[53, "pycbc.scheme.CUDAScheme"]], "cartesianspin1tosphericalspin1 (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpin1ToSphericalSpin1"]], "cartesianspin2tosphericalspin2 (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpin2ToSphericalSpin2"]], "cartesianspintoalignedmassspin (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin"]], "cartesianspintochip (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpinToChiP"]], "cartesianspintoprecessionmassspin (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin"]], "cartesiantospherical (class in pycbc.transforms)": [[53, "pycbc.transforms.CartesianToSpherical"]], "chiptocartesianspin (class in pycbc.transforms)": [[53, "pycbc.transforms.ChiPToCartesianSpin"]], "chirpdistancetodistance (class in pycbc.transforms)": [[53, "pycbc.transforms.ChirpDistanceToDistance"]], "choosebyschemedict (class in pycbc.scheme)": [[53, "pycbc.scheme.ChooseBySchemeDict"]], "closedbound (class in pycbc.boundaries)": [[53, "pycbc.boundaries.ClosedBound"]], "customtransform (class in pycbc.transforms)": [[53, "pycbc.transforms.CustomTransform"]], "defaultscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.DefaultScheme"]], "detector (class in pycbc.detector)": [[53, "pycbc.detector.Detector"]], "distancetochirpdistance (class in pycbc.transforms)": [[53, "pycbc.transforms.DistanceToChirpDistance"]], "distancetoredshift (class in pycbc.transforms)": [[53, "pycbc.transforms.DistanceToRedshift"]], "exponent (class in pycbc.transforms)": [[53, "pycbc.transforms.Exponent"]], "irregularbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.IrregularBins"]], "lisa (class in pycbc.detector)": [[53, "pycbc.detector.LISA"]], "lambdafrommultipletovfiles (class in pycbc.transforms)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles"]], "lambdafromtovfile (class in pycbc.transforms)": [[53, "pycbc.transforms.LambdaFromTOVFile"]], "limitedsizedict (class in pycbc.opt)": [[53, "pycbc.opt.LimitedSizeDict"]], "linearbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LinearBins"]], "linearplusoverflowbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins"]], "log (class in pycbc.transforms)": [[53, "pycbc.transforms.Log"]], "logformatter (class in pycbc)": [[53, "pycbc.LogFormatter"]], "logarithmicbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LogarithmicBins"]], "logarithmicplusoverflowbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins"]], "logistic (class in pycbc.transforms)": [[53, "pycbc.transforms.Logistic"]], "logit (class in pycbc.transforms)": [[53, "pycbc.transforms.Logit"]], "mklscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.MKLScheme"]], "mass1mass2tomchirpeta (class in pycbc.transforms)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta"]], "mass1mass2tomchirpq (class in pycbc.transforms)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ"]], "mchirpetatomass1mass2 (class in pycbc.transforms)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2"]], "mchirpqtomass1mass2 (class in pycbc.transforms)": [[53, "pycbc.transforms.MchirpQToMass1Mass2"]], "ndbins (class in pycbc.bin_utils)": [[53, "pycbc.bin_utils.NDBins"]], "numpyscheme (class in pycbc.scheme)": [[53, "pycbc.scheme.NumpyScheme"]], "openbound (class in pycbc.boundaries)": [[53, "pycbc.boundaries.OpenBound"]], "precessionmassspintocartesianspin (class in pycbc.transforms)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin"]], "reflectedbound (class in pycbc.boundaries)": [[53, "pycbc.boundaries.ReflectedBound"]], "scheme (class in pycbc.scheme)": [[53, "pycbc.scheme.Scheme"]], "singlepool (class in pycbc.pool)": [[53, "pycbc.pool.SinglePool"]], "sphericalspin1tocartesianspin1 (class in pycbc.transforms)": [[53, "pycbc.transforms.SphericalSpin1ToCartesianSpin1"]], "sphericalspin2tocartesianspin2 (class in pycbc.transforms)": [[53, "pycbc.transforms.SphericalSpin2ToCartesianSpin2"]], "sphericaltocartesian (class in pycbc.transforms)": [[53, "pycbc.transforms.SphericalToCartesian"]], "add_detector_on_earth() (in module pycbc.detector)": [[53, "pycbc.detector.add_detector_on_earth"]], "allmap() (pycbc.pool.broadcastpool method)": [[53, "pycbc.pool.BroadcastPool.allmap"]], "antenna_pattern() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.antenna_pattern"]], "apply_conditions() (pycbc.boundaries.bounds method)": [[53, "pycbc.boundaries.Bounds.apply_conditions"]], "apply_cyclic() (in module pycbc.boundaries)": [[53, "pycbc.boundaries.apply_cyclic"]], "apply_transforms() (in module pycbc.transforms)": [[53, "pycbc.transforms.apply_transforms"]], "argmax() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.argmax"]], "argmin() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.argmin"]], "bins() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.bins"]], "bounds (pycbc.transforms.logistic property)": [[53, "pycbc.transforms.Logistic.bounds"]], "bounds (pycbc.transforms.logit property)": [[53, "pycbc.transforms.Logit.bounds"]], "broadcast() (pycbc.pool.broadcastpool method)": [[53, "pycbc.pool.BroadcastPool.broadcast"]], "broadcast() (pycbc.pool.singlepool method)": [[53, "pycbc.pool.SinglePool.broadcast"]], "calc_areas() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.calc_areas"]], "calc_probabilities() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.calc_probabilities"]], "cartesian_to_spherical() (in module pycbc.coordinates)": [[53, "pycbc.coordinates.cartesian_to_spherical"]], "cartesian_to_spherical_azimuthal() (in module pycbc.coordinates)": [[53, "pycbc.coordinates.cartesian_to_spherical_azimuthal"]], "cartesian_to_spherical_polar() (in module pycbc.coordinates)": [[53, "pycbc.coordinates.cartesian_to_spherical_polar"]], "cartesian_to_spherical_rho() (in module pycbc.coordinates)": [[53, "pycbc.coordinates.cartesian_to_spherical_rho"]], "centres() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.centres"]], "centres() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.centres"]], "centres() (pycbc.bin_utils.bins method)": [[53, "pycbc.bin_utils.Bins.centres"]], "centres() (pycbc.bin_utils.irregularbins method)": [[53, "pycbc.bin_utils.IrregularBins.centres"]], "centres() (pycbc.bin_utils.linearbins method)": [[53, "pycbc.bin_utils.LinearBins.centres"]], "centres() (pycbc.bin_utils.linearplusoverflowbins method)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins.centres"]], "centres() (pycbc.bin_utils.logarithmicbins method)": [[53, "pycbc.bin_utils.LogarithmicBins.centres"]], "centres() (pycbc.bin_utils.logarithmicplusoverflowbins method)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins.centres"]], "centres() (pycbc.bin_utils.ndbins method)": [[53, "pycbc.bin_utils.NDBins.centres"]], "chi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_a"]], "chi_eff() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_eff"]], "chi_eff_from_spherical() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_eff_from_spherical"]], "chi_p() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_p"]], "chi_p_from_spherical() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_p_from_spherical"]], "chi_p_from_xi1_xi2() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_p_from_xi1_xi2"]], "chi_perp_from_mass1_mass2_xi2() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_perp_from_mass1_mass2_xi2"]], "chi_perp_from_spinx_spiny() (in module pycbc.conversions)": [[53, "pycbc.conversions.chi_perp_from_spinx_spiny"]], "chirp_distance() (in module pycbc.conversions)": [[53, "pycbc.conversions.chirp_distance"]], "chirp_distance() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.chirp_distance"]], "chirp_volume_montecarlo() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.chirp_volume_montecarlo"]], "choose_pool() (in module pycbc.pool)": [[53, "pycbc.pool.choose_pool"]], "clean_cuda() (in module pycbc.scheme)": [[53, "pycbc.scheme.clean_cuda"]], "compute_efficiency() (in module pycbc.rate)": [[53, "pycbc.rate.compute_efficiency"]], "compute_jacobian() (in module pycbc.transforms)": [[53, "pycbc.transforms.compute_jacobian"]], "compute_lower_limit() (in module pycbc.rate)": [[53, "pycbc.rate.compute_lower_limit"]], "compute_search_efficiency_in_bins() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.compute_search_efficiency_in_bins"]], "compute_search_volume_in_bins() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.compute_search_volume_in_bins"]], "compute_upper_limit() (in module pycbc.rate)": [[53, "pycbc.rate.compute_upper_limit"]], "compute_volume_vs_mass() (in module pycbc.rate)": [[53, "pycbc.rate.compute_volume_vs_mass"]], "confidence_interval_min_width() (in module pycbc.rate)": [[53, "pycbc.rate.confidence_interval_min_width"]], "contains_conditioned() (pycbc.boundaries.bounds method)": [[53, "pycbc.boundaries.Bounds.contains_conditioned"]], "converter() (pycbc.logformatter method)": [[53, "pycbc.LogFormatter.converter"]], "copy() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.copy"]], "cosmological_quantity_from_redshift() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.cosmological_quantity_from_redshift"]], "cpuonly() (in module pycbc.scheme)": [[53, "pycbc.scheme.cpuonly"]], "current_prefix() (in module pycbc.scheme)": [[53, "pycbc.scheme.current_prefix"]], "cyclic (pycbc.boundaries.bounds property)": [[53, "pycbc.boundaries.Bounds.cyclic"]], "data (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.data"]], "det_tc() (in module pycbc.conversions)": [[53, "pycbc.conversions.det_tc"]], "distance (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.distance"]], "distance (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.distance"]], "distance_from_comoving_volume() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.distance_from_comoving_volume"]], "dquadmon_from_lambda() (in module pycbc.conversions)": [[53, "pycbc.conversions.dquadmon_from_lambda"]], "effective_distance() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.effective_distance"]], "energy() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.energy"]], "energy_coefficients() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.energy_coefficients"]], "eta_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.eta_from_mass1_mass2"]], "eta_from_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.eta_from_q"]], "eta_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.eta_from_tau0_tau3"]], "eta_mass1_to_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.eta_mass1_to_mass2"]], "f_bklisco() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_BKLISCO"]], "f_erd() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_ERD"]], "f_frd() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_FRD"]], "f_lrd() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_LRD"]], "f_lightring() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_LightRing"]], "f_schwarzisco() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.f_SchwarzISCO"]], "filter_injections_by_mass() (in module pycbc.rate)": [[53, "pycbc.rate.filter_injections_by_mass"]], "final_mass_from_f0_tau() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_mass_from_f0_tau"]], "final_mass_from_initial() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_mass_from_initial"]], "final_spin_from_f0_tau() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_spin_from_f0_tau"]], "final_spin_from_initial() (in module pycbc.conversions)": [[53, "pycbc.conversions.final_spin_from_initial"]], "formattime() (pycbc.logformatter method)": [[53, "pycbc.LogFormatter.formatTime"]], "format_output() (pycbc.transforms.basetransform static method)": [[53, "pycbc.transforms.BaseTransform.format_output"]], "freq_from_final_mass_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.freq_from_final_mass_spin"]], "freqlmn_from_other_lmn() (in module pycbc.conversions)": [[53, "pycbc.conversions.freqlmn_from_other_lmn"]], "frequency_cutoff_from_name() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.frequency_cutoff_from_name"]], "frequency_to_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.frequency_to_velocity"]], "from_cli() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.from_cli"]], "from_cli() (in module pycbc.scheme)": [[53, "pycbc.scheme.from_cli"]], "from_config() (pycbc.transforms.basetransform class method)": [[53, "pycbc.transforms.BaseTransform.from_config"]], "from_config() (pycbc.transforms.customtransform class method)": [[53, "pycbc.transforms.CustomTransform.from_config"]], "from_config() (pycbc.transforms.lambdafrommultipletovfiles class method)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.from_config"]], "from_config() (pycbc.transforms.lambdafromtovfile class method)": [[53, "pycbc.transforms.LambdaFromTOVFile.from_config"]], "from_config() (pycbc.transforms.logistic class method)": [[53, "pycbc.transforms.Logistic.from_config"]], "from_config() (pycbc.transforms.logit class method)": [[53, "pycbc.transforms.Logit.from_config"]], "get_area() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.get_area"]], "get_available_detectors() (in module pycbc.detector)": [[53, "pycbc.detector.get_available_detectors"]], "get_beta_sigma_from_aligned_spins() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_beta_sigma_from_aligned_spins"]], "get_common_cbc_transforms() (in module pycbc.transforms)": [[53, "pycbc.transforms.get_common_cbc_transforms"]], "get_ctypes_library() (in module pycbc.libutils)": [[53, "pycbc.libutils.get_ctypes_library"]], "get_eos() (pycbc.transforms.lambdafrommultipletovfiles method)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.get_eos"]], "get_final_freq() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_final_freq"]], "get_freq() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_freq"]], "get_gcrs_pos() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.get_gcrs_pos"]], "get_icrs_pos() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.get_icrs_pos"]], "get_inspiral_tf() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.get_inspiral_tf"]], "get_libpath_from_dirlist() (in module pycbc.libutils)": [[53, "pycbc.libutils.get_libpath_from_dirlist"]], "get_pos() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.get_pos"]], "getconf() (in module pycbc.opt)": [[53, "pycbc.opt.getconf"]], "gmst_accurate() (in module pycbc.detector)": [[53, "pycbc.detector.gmst_accurate"]], "gmst_estimate() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.gmst_estimate"]], "gps_now() (in module pycbc)": [[53, "pycbc.gps_now"]], "hpd_coverage() (in module pycbc.rate)": [[53, "pycbc.rate.hpd_coverage"]], "hpd_credible_interval() (in module pycbc.rate)": [[53, "pycbc.rate.hpd_credible_interval"]], "hpd_threshold() (in module pycbc.rate)": [[53, "pycbc.rate.hpd_threshold"]], "hybridenergy() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.hybridEnergy"]], "hybrid_meco_frequency() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.hybrid_meco_frequency"]], "hybrid_meco_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.hybrid_meco_velocity"]], "import_optional() (in module pycbc.libutils)": [[53, "pycbc.libutils.import_optional"]], "incdenominator() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.incdenominator"]], "incnumerator() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.incnumerator"]], "init_logging() (in module pycbc)": [[53, "pycbc.init_logging"]], "inputvar (pycbc.transforms.log property)": [[53, "pycbc.transforms.Log.inputvar"]], "inputvar (pycbc.transforms.logit property)": [[53, "pycbc.transforms.Logit.inputvar"]], "insert_args() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.insert_args"]], "insert_optimization_option_group() (in module pycbc.opt)": [[53, "pycbc.opt.insert_optimization_option_group"]], "insert_processing_option_group() (in module pycbc.scheme)": [[53, "pycbc.scheme.insert_processing_option_group"]], "integral_element() (in module pycbc.rate)": [[53, "pycbc.rate.integral_element"]], "integrate_efficiency() (in module pycbc.rate)": [[53, "pycbc.rate.integrate_efficiency"]], "intmc() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.intmc"]], "inverse (pycbc.transforms.alignedmassspintocartesianspin attribute)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.inverse"]], "inverse (pycbc.transforms.basetransform attribute)": [[53, "pycbc.transforms.BaseTransform.inverse"]], "inverse (pycbc.transforms.cartesianspintoalignedmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.inverse"]], "inverse (pycbc.transforms.cartesianspintoprecessionmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.inverse"]], "inverse (pycbc.transforms.cartesiantospherical attribute)": [[53, "pycbc.transforms.CartesianToSpherical.inverse"]], "inverse (pycbc.transforms.chiptocartesianspin attribute)": [[53, "pycbc.transforms.ChiPToCartesianSpin.inverse"]], "inverse (pycbc.transforms.chirpdistancetodistance attribute)": [[53, "pycbc.transforms.ChirpDistanceToDistance.inverse"]], "inverse (pycbc.transforms.distancetochirpdistance attribute)": [[53, "pycbc.transforms.DistanceToChirpDistance.inverse"]], "inverse (pycbc.transforms.distancetoredshift attribute)": [[53, "pycbc.transforms.DistanceToRedshift.inverse"]], "inverse (pycbc.transforms.exponent attribute)": [[53, "pycbc.transforms.Exponent.inverse"]], "inverse (pycbc.transforms.log attribute)": [[53, "pycbc.transforms.Log.inverse"]], "inverse (pycbc.transforms.logistic attribute)": [[53, "pycbc.transforms.Logistic.inverse"]], "inverse (pycbc.transforms.logit attribute)": [[53, "pycbc.transforms.Logit.inverse"]], "inverse (pycbc.transforms.mass1mass2tomchirpeta attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.inverse"]], "inverse (pycbc.transforms.mass1mass2tomchirpq attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.inverse"]], "inverse (pycbc.transforms.mchirpqtomass1mass2 attribute)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.inverse"]], "inverse (pycbc.transforms.precessionmassspintocartesianspin attribute)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.inverse"]], "inverse (pycbc.transforms.sphericalspin1tocartesianspin1 attribute)": [[53, "pycbc.transforms.SphericalSpin1ToCartesianSpin1.inverse"]], "inverse (pycbc.transforms.sphericalspin2tocartesianspin2 attribute)": [[53, "pycbc.transforms.SphericalSpin2ToCartesianSpin2.inverse"]], "inverse (pycbc.transforms.sphericaltocartesian attribute)": [[53, "pycbc.transforms.SphericalToCartesian.inverse"]], "inverse_jacobian() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.inverse_jacobian"]], "inverse_jacobian() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.inverse_jacobian"]], "inverse_transform() (pycbc.transforms.alignedmassspintocartesianspin method)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.inverse_transform"]], "inverse_transform() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.inverse_transform"]], "inverse_transform() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.inverse_transform"]], "inverse_transform() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.inverse_transform"]], "inverse_transform() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.inverse_transform"]], "inverse_transform() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.inverse_transform"]], "inverse_transform() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.inverse_transform"]], "inverse_transform() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.inverse_transform"]], "inverse_transform() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.inverse_transform"]], "inverse_transform() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.inverse_transform"]], "inverse_transform() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.inverse_transform"]], "inverse_transform() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.inverse_transform"]], "inverse_transform() (pycbc.transforms.precessionmassspintocartesianspin method)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.inverse_transform"]], "inverse_transform() (pycbc.transforms.sphericaltocartesian method)": [[53, "pycbc.transforms.SphericalToCartesian.inverse_transform"]], "invq_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.invq_from_mass1_mass2"]], "is_main_process() (in module pycbc.pool)": [[53, "pycbc.pool.is_main_process"]], "jacobian() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.jacobian"]], "jacobian() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.jacobian"]], "jacobian() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.jacobian"]], "jacobian() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.jacobian"]], "jacobian() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.jacobian"]], "jacobian() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.jacobian"]], "jacobian() (pycbc.transforms.customtransform method)": [[53, "pycbc.transforms.CustomTransform.jacobian"]], "jacobian() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.jacobian"]], "jacobian() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.jacobian"]], "jacobian() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.jacobian"]], "jacobian() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.jacobian"]], "jacobian() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.jacobian"]], "jacobian() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.jacobian"]], "jacobian() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.jacobian"]], "jacobian() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.jacobian"]], "jacobian() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.jacobian"]], "jframe_to_l0frame() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.jframe_to_l0frame"]], "kerr_lightring() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.kerr_lightring"]], "kerr_lightring_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.kerr_lightring_velocity"]], "l0frame_to_jframe() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.l0frame_to_jframe"]], "lal() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.lal"]], "lambda_data (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.lambda_data"]], "lambda_from_mass_tov_file() (in module pycbc.conversions)": [[53, "pycbc.conversions.lambda_from_mass_tov_file"]], "lambda_from_tov_data() (pycbc.transforms.lambdafromtovfile static method)": [[53, "pycbc.transforms.LambdaFromTOVFile.lambda_from_tov_data"]], "lambda_param (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.lambda_param"]], "lambda_param (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.lambda_param"]], "lambda_tilde() (in module pycbc.conversions)": [[53, "pycbc.conversions.lambda_tilde"]], "larger() (pycbc.boundaries.closedbound method)": [[53, "pycbc.boundaries.ClosedBound.larger"]], "larger() (pycbc.boundaries.openbound method)": [[53, "pycbc.boundaries.OpenBound.larger"]], "light_travel_time_to_detector() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.light_travel_time_to_detector"]], "load_detector_config() (in module pycbc.detector)": [[53, "pycbc.detector.load_detector_config"]], "logistic() (pycbc.transforms.logit static method)": [[53, "pycbc.transforms.Logit.logistic"]], "logit() (pycbc.transforms.logit static method)": [[53, "pycbc.transforms.Logit.logit"]], "logregularize() (pycbc.bin_utils.binnedarray method)": [[53, "pycbc.bin_utils.BinnedArray.logregularize"]], "logregularize() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.logregularize"]], "lower() (pycbc.bin_utils.bins method)": [[53, "pycbc.bin_utils.Bins.lower"]], "lower() (pycbc.bin_utils.irregularbins method)": [[53, "pycbc.bin_utils.IrregularBins.lower"]], "lower() (pycbc.bin_utils.linearbins method)": [[53, "pycbc.bin_utils.LinearBins.lower"]], "lower() (pycbc.bin_utils.linearplusoverflowbins method)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins.lower"]], "lower() (pycbc.bin_utils.logarithmicbins method)": [[53, "pycbc.bin_utils.LogarithmicBins.lower"]], "lower() (pycbc.bin_utils.logarithmicplusoverflowbins method)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins.lower"]], "lower() (pycbc.bin_utils.ndbins method)": [[53, "pycbc.bin_utils.NDBins.lower"]], "makedir() (in module pycbc)": [[53, "pycbc.makedir"]], "map() (pycbc.pool.broadcastpool method)": [[53, "pycbc.pool.BroadcastPool.map"]], "map() (pycbc.pool.singlepool method)": [[53, "pycbc.pool.SinglePool.map"]], "map_file (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.map_file"]], "mass1_from_mass2_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mass2_eta"]], "mass1_from_mchirp_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mchirp_eta"]], "mass1_from_mchirp_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mchirp_q"]], "mass1_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mtotal_eta"]], "mass1_from_mtotal_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_mtotal_q"]], "mass1_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass1_from_tau0_tau3"]], "mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_spin1z_spin2z_to_beta_sigma_gamma"]], "mass1_mass2_to_mchirp_eta() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_to_mchirp_eta"]], "mass1_mass2_to_mtotal_eta() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_to_mtotal_eta"]], "mass1_mass2_to_tau0_tau3() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mass1_mass2_to_tau0_tau3"]], "mass2_from_mass1_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mass1_eta"]], "mass2_from_mchirp_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mchirp_eta"]], "mass2_from_mchirp_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mchirp_q"]], "mass2_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mtotal_eta"]], "mass2_from_mtotal_q() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_mtotal_q"]], "mass2_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.mass2_from_tau0_tau3"]], "mass_data (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.mass_data"]], "mass_param (pycbc.transforms.lambdafrommultipletovfiles property)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.mass_param"]], "mass_param (pycbc.transforms.lambdafromtovfile property)": [[53, "pycbc.transforms.LambdaFromTOVFile.mass_param"]], "max (pycbc.boundaries.bounds property)": [[53, "pycbc.boundaries.Bounds.max"]], "mchirp_eta_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mchirp_eta_to_mass1_mass2"]], "mchirp_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.mchirp_from_mass1_mass2"]], "mchirp_from_tau0() (in module pycbc.conversions)": [[53, "pycbc.conversions.mchirp_from_tau0"]], "mchirp_mass1_to_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mchirp_mass1_to_mass2"]], "mchirp_q_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mchirp_q_to_mass1_mass2"]], "mean_efficiency_volume() (in module pycbc.rate)": [[53, "pycbc.rate.mean_efficiency_volume"]], "meco2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.meco2"]], "meco_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.meco_velocity"]], "megaparsecs_to_meters() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.megaparsecs_to_meters"]], "min (pycbc.boundaries.bounds property)": [[53, "pycbc.boundaries.Bounds.min"]], "module": [[53, "module-pycbc"], [53, "module-pycbc.bin_utils"], [53, "module-pycbc.boundaries"], [53, "module-pycbc.conversions"], [53, "module-pycbc.coordinates"], [53, "module-pycbc.cosmology"], [53, "module-pycbc.detector"], [53, "module-pycbc.dq"], [53, "module-pycbc.libutils"], [53, "module-pycbc.mchirp_area"], [53, "module-pycbc.opt"], [53, "module-pycbc.pnutils"], [53, "module-pycbc.pool"], [53, "module-pycbc.rate"], [53, "module-pycbc.scheme"], [53, "module-pycbc.sensitivity"], [53, "module-pycbc.transforms"], [53, "module-pycbc.version"], [54, "module-pycbc.catalog"], [54, "module-pycbc.catalog.catalog"], [55, "module-pycbc.distributions"], [55, "module-pycbc.distributions.angular"], [55, "module-pycbc.distributions.arbitrary"], [55, "module-pycbc.distributions.bounded"], [55, "module-pycbc.distributions.constraints"], [55, "module-pycbc.distributions.external"], [55, "module-pycbc.distributions.fixedsamples"], [55, "module-pycbc.distributions.gaussian"], [55, "module-pycbc.distributions.joint"], [55, "module-pycbc.distributions.mass"], [55, "module-pycbc.distributions.power_law"], [55, "module-pycbc.distributions.qnm"], [55, "module-pycbc.distributions.sky_location"], [55, "module-pycbc.distributions.spins"], [55, "module-pycbc.distributions.uniform"], [55, "module-pycbc.distributions.uniform_log"], [55, "module-pycbc.distributions.utils"], [56, "module-pycbc.events"], [56, "module-pycbc.events.coherent"], [56, "module-pycbc.events.coinc"], [56, "module-pycbc.events.coinc_rate"], [56, "module-pycbc.events.cuts"], [56, "module-pycbc.events.eventmgr"], [56, "module-pycbc.events.eventmgr_cython"], [56, "module-pycbc.events.ranking"], [56, "module-pycbc.events.significance"], [56, "module-pycbc.events.simd_threshold_cython"], [56, "module-pycbc.events.single"], [56, "module-pycbc.events.stat"], [56, "module-pycbc.events.threshold_cpu"], [56, "module-pycbc.events.trigger_fits"], [56, "module-pycbc.events.triggers"], [56, "module-pycbc.events.veto"], [57, "module-pycbc.fft"], [57, "module-pycbc.fft.backend_cpu"], [57, "module-pycbc.fft.backend_mkl"], [57, "module-pycbc.fft.backend_support"], [57, "module-pycbc.fft.class_api"], [57, "module-pycbc.fft.core"], [57, "module-pycbc.fft.fft_callback"], [57, "module-pycbc.fft.fftw"], [57, "module-pycbc.fft.fftw_pruned"], [57, "module-pycbc.fft.fftw_pruned_cython"], [57, "module-pycbc.fft.func_api"], [57, "module-pycbc.fft.mkl"], [57, "module-pycbc.fft.npfft"], [57, "module-pycbc.fft.parser_support"], [58, "module-pycbc.filter"], [58, "module-pycbc.filter.autocorrelation"], [58, "module-pycbc.filter.matchedfilter"], [58, "module-pycbc.filter.matchedfilter_cpu"], [58, "module-pycbc.filter.matchedfilter_numpy"], [58, "module-pycbc.filter.qtransform"], [58, "module-pycbc.filter.resample"], [58, "module-pycbc.filter.simd_correlate"], [58, "module-pycbc.filter.simd_correlate_cython"], [58, "module-pycbc.filter.zpk"], [59, "module-pycbc.frame"], [59, "module-pycbc.frame.frame"], [59, "module-pycbc.frame.gwosc"], [59, "module-pycbc.frame.store"], [60, "module-pycbc.inference"], [60, "module-pycbc.inference.burn_in"], [60, "module-pycbc.inference.entropy"], [60, "module-pycbc.inference.evidence"], [60, "module-pycbc.inference.gelman_rubin"], [60, "module-pycbc.inference.geweke"], [60, "module-pycbc.inference.option_utils"], [61, "module-pycbc.inference.io"], [61, "module-pycbc.inference.io.base_hdf"], [61, "module-pycbc.inference.io.base_mcmc"], [61, "module-pycbc.inference.io.base_multitemper"], [61, "module-pycbc.inference.io.base_nested_sampler"], [61, "module-pycbc.inference.io.base_sampler"], [61, "module-pycbc.inference.io.dynesty"], [61, "module-pycbc.inference.io.emcee"], [61, "module-pycbc.inference.io.emcee_pt"], [61, "module-pycbc.inference.io.epsie"], [61, "module-pycbc.inference.io.multinest"], [61, "module-pycbc.inference.io.posterior"], [61, "module-pycbc.inference.io.ptemcee"], [61, "module-pycbc.inference.io.txt"], [61, "module-pycbc.inference.io.ultranest"], [62, "module-pycbc.inference.jump"], [62, "module-pycbc.inference.jump.angular"], [62, "module-pycbc.inference.jump.bounded_normal"], [62, "module-pycbc.inference.jump.discrete"], [62, "module-pycbc.inference.jump.normal"], [63, "module-pycbc.inference.models"], [63, "module-pycbc.inference.models.analytic"], [63, "module-pycbc.inference.models.base"], [63, "module-pycbc.inference.models.base_data"], [63, "module-pycbc.inference.models.brute_marg"], [63, "module-pycbc.inference.models.data_utils"], [63, "module-pycbc.inference.models.gated_gaussian_noise"], [63, "module-pycbc.inference.models.gaussian_noise"], [63, "module-pycbc.inference.models.hierarchical"], [63, "module-pycbc.inference.models.marginalized_gaussian_noise"], [63, "module-pycbc.inference.models.relbin"], [63, "module-pycbc.inference.models.relbin_cpu"], [63, "module-pycbc.inference.models.single_template"], [63, "module-pycbc.inference.models.tools"], [64, "module-pycbc.inference.sampler"], [64, "module-pycbc.inference.sampler.base"], [64, "module-pycbc.inference.sampler.base_cube"], [64, "module-pycbc.inference.sampler.base_mcmc"], [64, "module-pycbc.inference.sampler.base_multitemper"], [64, "module-pycbc.inference.sampler.dummy"], [64, "module-pycbc.inference.sampler.dynesty"], [64, "module-pycbc.inference.sampler.emcee"], [64, "module-pycbc.inference.sampler.emcee_pt"], [64, "module-pycbc.inference.sampler.epsie"], [64, "module-pycbc.inference.sampler.multinest"], [64, "module-pycbc.inference.sampler.ptemcee"], [64, "module-pycbc.inference.sampler.ultranest"], [65, "module-pycbc.inject"], [65, "module-pycbc.inject.inject"], [65, "module-pycbc.inject.injfilterrejector"], [66, "module-pycbc.io"], [66, "module-pycbc.io.hdf"], [66, "module-pycbc.io.ligolw"], [66, "module-pycbc.io.live"], [66, "module-pycbc.io.record"], [67, "module-pycbc.neutron_stars"], [67, "module-pycbc.neutron_stars.eos_utils"], [67, "module-pycbc.neutron_stars.pg_isso_solver"], [68, "module-pycbc.noise"], [68, "module-pycbc.noise.gaussian"], [68, "module-pycbc.noise.reproduceable"], [69, "module-pycbc.population"], [69, "module-pycbc.population.fgmc_functions"], [69, "module-pycbc.population.fgmc_laguerre"], [69, "module-pycbc.population.fgmc_plots"], [69, "module-pycbc.population.live_pastro"], [69, "module-pycbc.population.live_pastro_utils"], [69, "module-pycbc.population.population_models"], [69, "module-pycbc.population.rates_functions"], [69, "module-pycbc.population.scale_injections"], [70, "module-pycbc.psd"], [70, "module-pycbc.psd.analytical"], [70, "module-pycbc.psd.analytical_space"], [70, "module-pycbc.psd.estimate"], [70, "module-pycbc.psd.read"], [70, "module-pycbc.psd.variation"], [71, "module-pycbc.results"], [71, "module-pycbc.results.color"], [71, "module-pycbc.results.dq"], [71, "module-pycbc.results.followup"], [71, "module-pycbc.results.layout"], [71, "module-pycbc.results.legacy_grb"], [71, "module-pycbc.results.metadata"], [71, "module-pycbc.results.mpld3_utils"], [71, "module-pycbc.results.plot"], [71, "module-pycbc.results.psd"], [71, "module-pycbc.results.pygrb_plotting_utils"], [71, "module-pycbc.results.pygrb_postprocessing_utils"], [71, "module-pycbc.results.render"], [71, "module-pycbc.results.scatter_histograms"], [71, "module-pycbc.results.str_utils"], [71, "module-pycbc.results.table_utils"], [71, "module-pycbc.results.versioning"], [72, "module-pycbc.strain"], [72, "module-pycbc.strain.calibration"], [72, "module-pycbc.strain.gate"], [72, "module-pycbc.strain.lines"], [72, "module-pycbc.strain.recalibrate"], [72, "module-pycbc.strain.strain"], [73, "module-pycbc.tmpltbank"], [73, "module-pycbc.tmpltbank.bank_conversions"], [73, "module-pycbc.tmpltbank.bank_output_utils"], [73, "module-pycbc.tmpltbank.brute_force_methods"], [73, "module-pycbc.tmpltbank.calc_moments"], [73, "module-pycbc.tmpltbank.coord_utils"], [73, "module-pycbc.tmpltbank.lambda_mapping"], [73, "module-pycbc.tmpltbank.lattice_utils"], [73, "module-pycbc.tmpltbank.option_utils"], [73, "module-pycbc.tmpltbank.partitioned_bank"], [74, "module-pycbc.types"], [74, "module-pycbc.types.aligned"], [74, "module-pycbc.types.array"], [74, "module-pycbc.types.array_cpu"], [74, "module-pycbc.types.config"], [74, "module-pycbc.types.frequencyseries"], [74, "module-pycbc.types.optparse"], [74, "module-pycbc.types.timeseries"], [75, "module-pycbc.vetoes"], [75, "module-pycbc.vetoes.autochisq"], [75, "module-pycbc.vetoes.bank_chisq"], [75, "module-pycbc.vetoes.chisq"], [75, "module-pycbc.vetoes.chisq_cpu"], [75, "module-pycbc.vetoes.sgchisq"], [76, "module-pycbc.waveform"], [76, "module-pycbc.waveform.bank"], [76, "module-pycbc.waveform.compress"], [76, "module-pycbc.waveform.decompress_cpu"], [76, "module-pycbc.waveform.decompress_cpu_cython"], [76, "module-pycbc.waveform.generator"], [76, "module-pycbc.waveform.multiband"], [76, "module-pycbc.waveform.nltides"], [76, "module-pycbc.waveform.parameters"], [76, "module-pycbc.waveform.plugin"], [76, "module-pycbc.waveform.premerger"], [76, "module-pycbc.waveform.ringdown"], [76, "module-pycbc.waveform.sinegauss"], [76, "module-pycbc.waveform.spa_tmplt"], [76, "module-pycbc.waveform.spa_tmplt_cpu"], [76, "module-pycbc.waveform.supernovae"], [76, "module-pycbc.waveform.utils"], [76, "module-pycbc.waveform.utils_cpu"], [76, "module-pycbc.waveform.waveform"], [76, "module-pycbc.waveform.waveform_modes"], [77, "module-pycbc.workflow"], [77, "module-pycbc.workflow.coincidence"], [77, "module-pycbc.workflow.configparser_test"], [77, "module-pycbc.workflow.configuration"], [77, "module-pycbc.workflow.core"], [77, "module-pycbc.workflow.datafind"], [77, "module-pycbc.workflow.dq"], [77, "module-pycbc.workflow.grb_utils"], [77, "module-pycbc.workflow.inference_followups"], [77, "module-pycbc.workflow.injection"], [77, "module-pycbc.workflow.jobsetup"], [77, "module-pycbc.workflow.matched_filter"], [77, "module-pycbc.workflow.minifollowups"], [77, "module-pycbc.workflow.pegasus_sites"], [77, "module-pycbc.workflow.pegasus_workflow"], [77, "module-pycbc.workflow.plotting"], [77, "module-pycbc.workflow.psd"], [77, "module-pycbc.workflow.psdfiles"], [77, "module-pycbc.workflow.segment"], [77, "module-pycbc.workflow.splittable"], [77, "module-pycbc.workflow.tmpltbank"]], "mtotal_eta_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.mtotal_eta_to_mass1_mass2"]], "mtotal_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.mtotal_from_mass1_mass2"]], "mtotal_from_mchirp_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.mtotal_from_mchirp_eta"]], "mtotal_from_tau0_tau3() (in module pycbc.conversions)": [[53, "pycbc.conversions.mtotal_from_tau0_tau3"]], "name (pycbc.boundaries.closedbound attribute)": [[53, "pycbc.boundaries.ClosedBound.name"]], "name (pycbc.boundaries.openbound attribute)": [[53, "pycbc.boundaries.OpenBound.name"]], "name (pycbc.boundaries.reflectedbound attribute)": [[53, "pycbc.boundaries.ReflectedBound.name"]], "name (pycbc.transforms.aligntotalspin attribute)": [[53, "pycbc.transforms.AlignTotalSpin.name"]], "name (pycbc.transforms.alignedmassspintocartesianspin attribute)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.name"]], "name (pycbc.transforms.basetransform attribute)": [[53, "pycbc.transforms.BaseTransform.name"]], "name (pycbc.transforms.cartesianspin1tosphericalspin1 attribute)": [[53, "pycbc.transforms.CartesianSpin1ToSphericalSpin1.name"]], "name (pycbc.transforms.cartesianspin2tosphericalspin2 attribute)": [[53, "pycbc.transforms.CartesianSpin2ToSphericalSpin2.name"]], "name (pycbc.transforms.cartesianspintoalignedmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.name"]], "name (pycbc.transforms.cartesianspintochip attribute)": [[53, "pycbc.transforms.CartesianSpinToChiP.name"]], "name (pycbc.transforms.cartesianspintoprecessionmassspin attribute)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.name"]], "name (pycbc.transforms.cartesiantospherical attribute)": [[53, "pycbc.transforms.CartesianToSpherical.name"]], "name (pycbc.transforms.chiptocartesianspin attribute)": [[53, "pycbc.transforms.ChiPToCartesianSpin.name"]], "name (pycbc.transforms.chirpdistancetodistance attribute)": [[53, "pycbc.transforms.ChirpDistanceToDistance.name"]], "name (pycbc.transforms.customtransform attribute)": [[53, "pycbc.transforms.CustomTransform.name"]], "name (pycbc.transforms.distancetochirpdistance attribute)": [[53, "pycbc.transforms.DistanceToChirpDistance.name"]], "name (pycbc.transforms.distancetoredshift attribute)": [[53, "pycbc.transforms.DistanceToRedshift.name"]], "name (pycbc.transforms.exponent attribute)": [[53, "pycbc.transforms.Exponent.name"]], "name (pycbc.transforms.lambdafrommultipletovfiles attribute)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.name"]], "name (pycbc.transforms.lambdafromtovfile attribute)": [[53, "pycbc.transforms.LambdaFromTOVFile.name"]], "name (pycbc.transforms.log attribute)": [[53, "pycbc.transforms.Log.name"]], "name (pycbc.transforms.logistic attribute)": [[53, "pycbc.transforms.Logistic.name"]], "name (pycbc.transforms.logit attribute)": [[53, "pycbc.transforms.Logit.name"]], "name (pycbc.transforms.mass1mass2tomchirpeta attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.name"]], "name (pycbc.transforms.mass1mass2tomchirpq attribute)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.name"]], "name (pycbc.transforms.mchirpetatomass1mass2 attribute)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.name"]], "name (pycbc.transforms.mchirpqtomass1mass2 attribute)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.name"]], "name (pycbc.transforms.precessionmassspintocartesianspin attribute)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.name"]], "name (pycbc.transforms.sphericalspin1tocartesianspin1 attribute)": [[53, "pycbc.transforms.SphericalSpin1ToCartesianSpin1.name"]], "name (pycbc.transforms.sphericalspin2tocartesianspin2 attribute)": [[53, "pycbc.transforms.SphericalSpin2ToCartesianSpin2.name"]], "name (pycbc.transforms.sphericaltocartesian attribute)": [[53, "pycbc.transforms.SphericalToCartesian.name"]], "nearest_larger_binary_number() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.nearest_larger_binary_number"]], "nltides_gw_phase_diff_isco() (in module pycbc.conversions)": [[53, "pycbc.conversions.nltides_gw_phase_diff_isco"]], "normalize_pdf() (in module pycbc.rate)": [[53, "pycbc.rate.normalize_pdf"]], "optimal_dec_from_detector() (in module pycbc.conversions)": [[53, "pycbc.conversions.optimal_dec_from_detector"]], "optimal_orientation() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.optimal_orientation"]], "optimal_ra_from_detector() (in module pycbc.conversions)": [[53, "pycbc.conversions.optimal_ra_from_detector"]], "order_transforms() (in module pycbc.transforms)": [[53, "pycbc.transforms.order_transforms"]], "outputvar (pycbc.transforms.log property)": [[53, "pycbc.transforms.Log.outputvar"]], "outputvar (pycbc.transforms.logit property)": [[53, "pycbc.transforms.Logit.outputvar"]], "overhead_antenna_pattern() (in module pycbc.detector)": [[53, "pycbc.detector.overhead_antenna_pattern"]], "parse_flag_str() (in module pycbc.dq)": [[53, "pycbc.dq.parse_flag_str"]], "parse_veto_definer() (in module pycbc.dq)": [[53, "pycbc.dq.parse_veto_definer"]], "parsecs_to_meters() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.parsecs_to_meters"]], "phi1_from_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi1_from_phi_a_phi_s"]], "phi2_from_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi2_from_phi_a_phi_s"]], "phi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi_a"]], "phi_from_spinx_spiny() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi_from_spinx_spiny"]], "phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.phi_s"]], "pkg_config() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config"]], "pkg_config_check_exists() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config_check_exists"]], "pkg_config_header_strings() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config_header_strings"]], "pkg_config_libdirs() (in module pycbc.libutils)": [[53, "pycbc.libutils.pkg_config_libdirs"]], "ppdets() (in module pycbc.detector)": [[53, "pycbc.detector.ppdets"]], "primary_mass() (in module pycbc.conversions)": [[53, "pycbc.conversions.primary_mass"]], "primary_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.primary_spin"]], "primary_xi() (in module pycbc.conversions)": [[53, "pycbc.conversions.primary_xi"]], "project_wave() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.project_wave"]], "pycbc": [[53, "module-pycbc"]], "pycbc.bin_utils": [[53, "module-pycbc.bin_utils"]], "pycbc.boundaries": [[53, "module-pycbc.boundaries"]], "pycbc.conversions": [[53, "module-pycbc.conversions"]], "pycbc.coordinates": [[53, "module-pycbc.coordinates"]], "pycbc.cosmology": [[53, "module-pycbc.cosmology"]], "pycbc.detector": [[53, "module-pycbc.detector"]], "pycbc.dq": [[53, "module-pycbc.dq"]], "pycbc.libutils": [[53, "module-pycbc.libutils"]], "pycbc.mchirp_area": [[53, "module-pycbc.mchirp_area"]], "pycbc.opt": [[53, "module-pycbc.opt"]], "pycbc.pnutils": [[53, "module-pycbc.pnutils"]], "pycbc.pool": [[53, "module-pycbc.pool"]], "pycbc.rate": [[53, "module-pycbc.rate"]], "pycbc.scheme": [[53, "module-pycbc.scheme"]], "pycbc.sensitivity": [[53, "module-pycbc.sensitivity"]], "pycbc.transforms": [[53, "module-pycbc.transforms"]], "pycbc.version": [[53, "module-pycbc.version"]], "q_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.q_from_mass1_mass2"]], "query_cumulative_flags() (in module pycbc.dq)": [[53, "pycbc.dq.query_cumulative_flags"]], "query_dqsegdb2() (in module pycbc.dq)": [[53, "pycbc.dq.query_dqsegdb2"]], "query_flag() (in module pycbc.dq)": [[53, "pycbc.dq.query_flag"]], "query_str() (in module pycbc.dq)": [[53, "pycbc.dq.query_str"]], "random_string() (in module pycbc)": [[53, "pycbc.random_string"]], "ratio() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.ratio"]], "read_transforms_from_config() (in module pycbc.transforms)": [[53, "pycbc.transforms.read_transforms_from_config"]], "redshift() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.redshift"]], "redshift_estimation() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.redshift_estimation"]], "redshift_from_comoving_volume() (in module pycbc.cosmology)": [[53, "pycbc.cosmology.redshift_from_comoving_volume"]], "reflect() (pycbc.boundaries.reflectedbound method)": [[53, "pycbc.boundaries.ReflectedBound.reflect"]], "reflect_left() (pycbc.boundaries.reflectedbound method)": [[53, "pycbc.boundaries.ReflectedBound.reflect_left"]], "reflect_right() (pycbc.boundaries.reflectedbound method)": [[53, "pycbc.boundaries.ReflectedBound.reflect_right"]], "reflect_well() (in module pycbc.boundaries)": [[53, "pycbc.boundaries.reflect_well"]], "register_clean_cuda() (in module pycbc.scheme)": [[53, "pycbc.scheme.register_clean_cuda"]], "regularize() (pycbc.bin_utils.binnedratios method)": [[53, "pycbc.bin_utils.BinnedRatios.regularize"]], "remnant_mass_from_mass1_mass2_cartesian_spin_eos() (in module pycbc.conversions)": [[53, "pycbc.conversions.remnant_mass_from_mass1_mass2_cartesian_spin_eos"]], "remnant_mass_from_mass1_mass2_spherical_spin_eos() (in module pycbc.conversions)": [[53, "pycbc.conversions.remnant_mass_from_mass1_mass2_spherical_spin_eos"]], "schemed() (in module pycbc.scheme)": [[53, "pycbc.scheme.schemed"]], "secondary_mass() (in module pycbc.conversions)": [[53, "pycbc.conversions.secondary_mass"]], "secondary_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.secondary_spin"]], "secondary_xi() (in module pycbc.conversions)": [[53, "pycbc.conversions.secondary_xi"]], "set_gmst_reference() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.set_gmst_reference"]], "smaller() (pycbc.boundaries.closedbound method)": [[53, "pycbc.boundaries.ClosedBound.smaller"]], "smaller() (pycbc.boundaries.openbound method)": [[53, "pycbc.boundaries.OpenBound.smaller"]], "snr_from_loglr() (in module pycbc.conversions)": [[53, "pycbc.conversions.snr_from_loglr"]], "solar_mass_to_kg() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.solar_mass_to_kg"]], "spherical_to_cartesian() (in module pycbc.coordinates)": [[53, "pycbc.coordinates.spherical_to_cartesian"]], "spin1x_from_xi1_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin1x_from_xi1_phi_a_phi_s"]], "spin1y_from_xi1_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin1y_from_xi1_phi_a_phi_s"]], "spin1z_from_mass1_mass2_chi_eff_chi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin1z_from_mass1_mass2_chi_eff_chi_a"]], "spin2x_from_mass1_mass2_xi2_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin2x_from_mass1_mass2_xi2_phi_a_phi_s"]], "spin2y_from_mass1_mass2_xi2_phi_a_phi_s() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin2y_from_mass1_mass2_xi2_phi_a_phi_s"]], "spin2z_from_mass1_mass2_chi_eff_chi_a() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin2z_from_mass1_mass2_chi_eff_chi_a"]], "spin_from_pulsar_freq() (in module pycbc.conversions)": [[53, "pycbc.conversions.spin_from_pulsar_freq"]], "src_mass_from_z_det_mass() (in module pycbc.mchirp_area)": [[53, "pycbc.mchirp_area.src_mass_from_z_det_mass"]], "t2_cutoff_frequency() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.t2_cutoff_frequency"]], "t2_cutoff_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.t2_cutoff_velocity"]], "t4_cutoff_velocity() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.t4_cutoff_velocity"]], "tau0_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau0_from_mass1_mass2"]], "tau0_from_mchirp() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau0_from_mchirp"]], "tau0_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau0_from_mtotal_eta"]], "tau0_tau3_to_mass1_mass2() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.tau0_tau3_to_mass1_mass2"]], "tau0_tau3_to_mtotal_eta() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.tau0_tau3_to_mtotal_eta"]], "tau3_from_mass1_mass2() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau3_from_mass1_mass2"]], "tau3_from_mtotal_eta() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau3_from_mtotal_eta"]], "tau_from_final_mass_spin() (in module pycbc.conversions)": [[53, "pycbc.conversions.tau_from_final_mass_spin"]], "taulmn_from_other_lmn() (in module pycbc.conversions)": [[53, "pycbc.conversions.taulmn_from_other_lmn"]], "time_delay_from_detector() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.time_delay_from_detector"]], "time_delay_from_detector() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.time_delay_from_detector"]], "time_delay_from_earth_center() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.time_delay_from_earth_center"]], "time_delay_from_earth_center() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.time_delay_from_earth_center"]], "time_delay_from_location() (pycbc.detector.detector method)": [[53, "pycbc.detector.Detector.time_delay_from_location"]], "time_delay_from_location() (pycbc.detector.lisa method)": [[53, "pycbc.detector.LISA.time_delay_from_location"]], "transform() (pycbc.transforms.aligntotalspin method)": [[53, "pycbc.transforms.AlignTotalSpin.transform"]], "transform() (pycbc.transforms.alignedmassspintocartesianspin method)": [[53, "pycbc.transforms.AlignedMassSpinToCartesianSpin.transform"]], "transform() (pycbc.transforms.basetransform method)": [[53, "pycbc.transforms.BaseTransform.transform"]], "transform() (pycbc.transforms.cartesianspintoalignedmassspin method)": [[53, "pycbc.transforms.CartesianSpinToAlignedMassSpin.transform"]], "transform() (pycbc.transforms.cartesianspintochip method)": [[53, "pycbc.transforms.CartesianSpinToChiP.transform"]], "transform() (pycbc.transforms.cartesianspintoprecessionmassspin method)": [[53, "pycbc.transforms.CartesianSpinToPrecessionMassSpin.transform"]], "transform() (pycbc.transforms.cartesiantospherical method)": [[53, "pycbc.transforms.CartesianToSpherical.transform"]], "transform() (pycbc.transforms.chiptocartesianspin method)": [[53, "pycbc.transforms.ChiPToCartesianSpin.transform"]], "transform() (pycbc.transforms.chirpdistancetodistance method)": [[53, "pycbc.transforms.ChirpDistanceToDistance.transform"]], "transform() (pycbc.transforms.customtransform method)": [[53, "pycbc.transforms.CustomTransform.transform"]], "transform() (pycbc.transforms.distancetochirpdistance method)": [[53, "pycbc.transforms.DistanceToChirpDistance.transform"]], "transform() (pycbc.transforms.distancetoredshift method)": [[53, "pycbc.transforms.DistanceToRedshift.transform"]], "transform() (pycbc.transforms.exponent method)": [[53, "pycbc.transforms.Exponent.transform"]], "transform() (pycbc.transforms.lambdafrommultipletovfiles method)": [[53, "pycbc.transforms.LambdaFromMultipleTOVFiles.transform"]], "transform() (pycbc.transforms.lambdafromtovfile method)": [[53, "pycbc.transforms.LambdaFromTOVFile.transform"]], "transform() (pycbc.transforms.log method)": [[53, "pycbc.transforms.Log.transform"]], "transform() (pycbc.transforms.logistic method)": [[53, "pycbc.transforms.Logistic.transform"]], "transform() (pycbc.transforms.logit method)": [[53, "pycbc.transforms.Logit.transform"]], "transform() (pycbc.transforms.mass1mass2tomchirpeta method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpEta.transform"]], "transform() (pycbc.transforms.mass1mass2tomchirpq method)": [[53, "pycbc.transforms.Mass1Mass2ToMchirpQ.transform"]], "transform() (pycbc.transforms.mchirpetatomass1mass2 method)": [[53, "pycbc.transforms.MchirpEtaToMass1Mass2.transform"]], "transform() (pycbc.transforms.mchirpqtomass1mass2 method)": [[53, "pycbc.transforms.MchirpQToMass1Mass2.transform"]], "transform() (pycbc.transforms.precessionmassspintocartesianspin method)": [[53, "pycbc.transforms.PrecessionMassSpinToCartesianSpin.transform"]], "transform() (pycbc.transforms.sphericaltocartesian method)": [[53, "pycbc.transforms.SphericalToCartesian.transform"]], "upper() (pycbc.bin_utils.bins method)": [[53, "pycbc.bin_utils.Bins.upper"]], "upper() (pycbc.bin_utils.irregularbins method)": [[53, "pycbc.bin_utils.IrregularBins.upper"]], "upper() (pycbc.bin_utils.linearbins method)": [[53, "pycbc.bin_utils.LinearBins.upper"]], "upper() (pycbc.bin_utils.linearplusoverflowbins method)": [[53, "pycbc.bin_utils.LinearPlusOverflowBins.upper"]], "upper() (pycbc.bin_utils.logarithmicbins method)": [[53, "pycbc.bin_utils.LogarithmicBins.upper"]], "upper() (pycbc.bin_utils.logarithmicplusoverflowbins method)": [[53, "pycbc.bin_utils.LogarithmicPlusOverflowBins.upper"]], "upper() (pycbc.bin_utils.ndbins method)": [[53, "pycbc.bin_utils.NDBins.upper"]], "use_mpi() (in module pycbc.pool)": [[53, "pycbc.pool.use_mpi"]], "velocity_to_frequency() (in module pycbc.pnutils)": [[53, "pycbc.pnutils.velocity_to_frequency"]], "verify_optimization_options() (in module pycbc.opt)": [[53, "pycbc.opt.verify_optimization_options"]], "verify_processing_options() (in module pycbc.scheme)": [[53, "pycbc.scheme.verify_processing_options"]], "volume_binned_pylal() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_binned_pylal"]], "volume_montecarlo() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_montecarlo"]], "volume_shell() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_shell"]], "volume_to_distance_with_errors() (in module pycbc.sensitivity)": [[53, "pycbc.sensitivity.volume_to_distance_with_errors"]], "xi1_from_spin1x_spin1y() (in module pycbc.conversions)": [[53, "pycbc.conversions.xi1_from_spin1x_spin1y"]], "xi2_from_mass1_mass2_spin2x_spin2y() (in module pycbc.conversions)": [[53, "pycbc.conversions.xi2_from_mass1_mass2_spin2x_spin2y"]], "catalog (class in pycbc.catalog)": [[54, "pycbc.catalog.Catalog"]], "merger (class in pycbc.catalog)": [[54, "pycbc.catalog.Merger"]], "get_source() (in module pycbc.catalog.catalog)": [[54, "pycbc.catalog.catalog.get_source"]], "list_catalogs() (in module pycbc.catalog.catalog)": [[54, "pycbc.catalog.catalog.list_catalogs"]], "median1d() (pycbc.catalog.catalog method)": [[54, "pycbc.catalog.Catalog.median1d"]], "median1d() (pycbc.catalog.merger method)": [[54, "pycbc.catalog.Merger.median1d"]], "pycbc.catalog": [[54, "module-pycbc.catalog"]], "pycbc.catalog.catalog": [[54, "module-pycbc.catalog.catalog"]], "strain() (pycbc.catalog.merger method)": [[54, "pycbc.catalog.Merger.strain"]], "arbitrary (class in pycbc.distributions.arbitrary)": [[55, "pycbc.distributions.arbitrary.Arbitrary"]], "boundeddist (class in pycbc.distributions.bounded)": [[55, "pycbc.distributions.bounded.BoundedDist"]], "constraint (class in pycbc.distributions.constraints)": [[55, "pycbc.distributions.constraints.Constraint"]], "cosangle (class in pycbc.distributions.angular)": [[55, "pycbc.distributions.angular.CosAngle"]], "distributionfunctionfromfile (class in pycbc.distributions.external)": [[55, "pycbc.distributions.external.DistributionFunctionFromFile"]], "external (class in pycbc.distributions.external)": [[55, "pycbc.distributions.external.External"]], "fishersky (class in pycbc.distributions.sky_location)": [[55, "pycbc.distributions.sky_location.FisherSky"]], "fixedsamples (class in pycbc.distributions.fixedsamples)": [[55, "pycbc.distributions.fixedsamples.FixedSamples"]], "fromfile (class in pycbc.distributions.arbitrary)": [[55, "pycbc.distributions.arbitrary.FromFile"]], "gaussian (class in pycbc.distributions.gaussian)": [[55, "pycbc.distributions.gaussian.Gaussian"]], "independentchipchieff (class in pycbc.distributions.spins)": [[55, "pycbc.distributions.spins.IndependentChiPChiEff"]], "jointdistribution (class in pycbc.distributions.joint)": [[55, "pycbc.distributions.joint.JointDistribution"]], "mchirpfromuniformmass1mass2 (class in pycbc.distributions.mass)": [[55, "pycbc.distributions.mass.MchirpfromUniformMass1Mass2"]], "qfromuniformmass1mass2 (class in pycbc.distributions.mass)": [[55, "pycbc.distributions.mass.QfromUniformMass1Mass2"]], "sinangle (class in pycbc.distributions.angular)": [[55, "pycbc.distributions.angular.SinAngle"]], "supernovaeconvexhull (class in pycbc.distributions.constraints)": [[55, "pycbc.distributions.constraints.SupernovaeConvexHull"]], "uniform (class in pycbc.distributions.uniform)": [[55, "pycbc.distributions.uniform.Uniform"]], "uniformangle (class in pycbc.distributions.angular)": [[55, "pycbc.distributions.angular.UniformAngle"]], "uniformf0tau (class in pycbc.distributions.qnm)": [[55, "pycbc.distributions.qnm.UniformF0Tau"]], "uniformlog10 (class in pycbc.distributions.uniform_log)": [[55, "pycbc.distributions.uniform_log.UniformLog10"]], "uniformpowerlaw (class in pycbc.distributions.power_law)": [[55, "pycbc.distributions.power_law.UniformPowerLaw"]], "uniformradius (class in pycbc.distributions.power_law)": [[55, "pycbc.distributions.power_law.UniformRadius"]], "uniformsky (class in pycbc.distributions.sky_location)": [[55, "pycbc.distributions.sky_location.UniformSky"]], "uniformsolidangle (class in pycbc.distributions.angular)": [[55, "pycbc.distributions.angular.UniformSolidAngle"]], "apply_boundary_conditions() (pycbc.distributions.angular.uniformangle method)": [[55, "pycbc.distributions.angular.UniformAngle.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.angular.uniformsolidangle method)": [[55, "pycbc.distributions.angular.UniformSolidAngle.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.bounded.boundeddist method)": [[55, "pycbc.distributions.bounded.BoundedDist.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.external.external method)": [[55, "pycbc.distributions.external.External.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.fixedsamples.fixedsamples method)": [[55, "pycbc.distributions.fixedsamples.FixedSamples.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.joint.jointdistribution method)": [[55, "pycbc.distributions.joint.JointDistribution.apply_boundary_conditions"]], "apply_boundary_conditions() (pycbc.distributions.spins.independentchipchieff method)": [[55, "pycbc.distributions.spins.IndependentChiPChiEff.apply_boundary_conditions"]], "azimuthal_angle (pycbc.distributions.angular.uniformsolidangle property)": [[55, "pycbc.distributions.angular.UniformSolidAngle.azimuthal_angle"]], "bounded_from_config() (in module pycbc.distributions.bounded)": [[55, "pycbc.distributions.bounded.bounded_from_config"]], "bounds (pycbc.distributions.angular.uniformsolidangle property)": [[55, "pycbc.distributions.angular.UniformSolidAngle.bounds"]], "bounds (pycbc.distributions.bounded.boundeddist property)": [[55, "pycbc.distributions.bounded.BoundedDist.bounds"]], "bounds (pycbc.distributions.joint.jointdistribution property)": [[55, "pycbc.distributions.joint.JointDistribution.bounds"]], "cdf() (pycbc.distributions.gaussian.gaussian method)": [[55, "pycbc.distributions.gaussian.Gaussian.cdf"]], "cdfinv() (pycbc.distributions.bounded.boundeddist method)": [[55, "pycbc.distributions.bounded.BoundedDist.cdfinv"]], "cdfinv() (pycbc.distributions.fixedsamples.fixedsamples method)": [[55, "pycbc.distributions.fixedsamples.FixedSamples.cdfinv"]], "cdfinv() (pycbc.distributions.joint.jointdistribution method)": [[55, "pycbc.distributions.joint.JointDistribution.cdfinv"]], "constraints (pycbc.distributions.joint.jointdistribution attribute)": [[55, "pycbc.distributions.joint.JointDistribution.constraints"]], "contains() (pycbc.distributions.joint.jointdistribution method)": [[55, "pycbc.distributions.joint.JointDistribution.contains"]], "cyclic (pycbc.distributions.joint.jointdistribution property)": [[55, "pycbc.distributions.joint.JointDistribution.cyclic"]], "dim (pycbc.distributions.power_law.uniformpowerlaw attribute)": [[55, "pycbc.distributions.power_law.UniformPowerLaw.dim"]], "distributions (pycbc.distributions.joint.jointdistribution attribute)": [[55, "pycbc.distributions.joint.JointDistribution.distributions"]], "domain (pycbc.distributions.angular.uniformangle property)": [[55, "pycbc.distributions.angular.UniformAngle.domain"]], "draw_samples_from_config() (in module pycbc.distributions.utils)": [[55, "pycbc.distributions.utils.draw_samples_from_config"]], "filename (pycbc.distributions.arbitrary.fromfile property)": [[55, "pycbc.distributions.arbitrary.FromFile.filename"]], "from_config() (pycbc.distributions.angular.uniformangle class method)": [[55, "pycbc.distributions.angular.UniformAngle.from_config"]], "from_config() (pycbc.distributions.angular.uniformsolidangle class method)": [[55, "pycbc.distributions.angular.UniformSolidAngle.from_config"]], "from_config() (pycbc.distributions.arbitrary.arbitrary class method)": [[55, "pycbc.distributions.arbitrary.Arbitrary.from_config"]], "from_config() (pycbc.distributions.arbitrary.fromfile class method)": [[55, "pycbc.distributions.arbitrary.FromFile.from_config"]], "from_config() (pycbc.distributions.bounded.boundeddist class method)": [[55, "pycbc.distributions.bounded.BoundedDist.from_config"]], "from_config() (pycbc.distributions.external.external class method)": [[55, "pycbc.distributions.external.External.from_config"]], "from_config() (pycbc.distributions.fixedsamples.fixedsamples class method)": [[55, "pycbc.distributions.fixedsamples.FixedSamples.from_config"]], "from_config() (pycbc.distributions.gaussian.gaussian class method)": [[55, "pycbc.distributions.gaussian.Gaussian.from_config"]], "from_config() (pycbc.distributions.mass.qfromuniformmass1mass2 class method)": [[55, "pycbc.distributions.mass.QfromUniformMass1Mass2.from_config"]], "from_config() (pycbc.distributions.power_law.uniformpowerlaw class method)": [[55, "pycbc.distributions.power_law.UniformPowerLaw.from_config"]], "from_config() (pycbc.distributions.qnm.uniformf0tau class method)": [[55, "pycbc.distributions.qnm.UniformF0Tau.from_config"]], "from_config() (pycbc.distributions.sky_location.fishersky class method)": [[55, "pycbc.distributions.sky_location.FisherSky.from_config"]], "from_config() (pycbc.distributions.spins.independentchipchieff class method)": [[55, "pycbc.distributions.spins.IndependentChiPChiEff.from_config"]], "from_config() (pycbc.distributions.uniform.uniform class method)": [[55, "pycbc.distributions.uniform.Uniform.from_config"]], "get_arrays_from_file() (pycbc.distributions.arbitrary.fromfile method)": [[55, "pycbc.distributions.arbitrary.FromFile.get_arrays_from_file"]], "get_kde_from_arrays() (pycbc.distributions.arbitrary.arbitrary static method)": [[55, "pycbc.distributions.arbitrary.Arbitrary.get_kde_from_arrays"]], "get_param_bounds_from_config() (in module pycbc.distributions.bounded)": [[55, "pycbc.distributions.bounded.get_param_bounds_from_config"]], "kde (pycbc.distributions.arbitrary.arbitrary property)": [[55, "pycbc.distributions.arbitrary.Arbitrary.kde"]], "kde (pycbc.distributions.arbitrary.fromfile attribute)": [[55, "pycbc.distributions.arbitrary.FromFile.kde"]], "lognorm (pycbc.distributions.arbitrary.fromfile attribute)": [[55, "pycbc.distributions.arbitrary.FromFile.lognorm"]], "lognorm (pycbc.distributions.mass.qfromuniformmass1mass2 property)": [[55, "pycbc.distributions.mass.QfromUniformMass1Mass2.lognorm"]], "lognorm (pycbc.distributions.power_law.uniformpowerlaw property)": [[55, "pycbc.distributions.power_law.UniformPowerLaw.lognorm"]], "lognorm (pycbc.distributions.uniform.uniform property)": [[55, "pycbc.distributions.uniform.Uniform.lognorm"]], "logpdf() (pycbc.distributions.bounded.boundeddist method)": [[55, "pycbc.distributions.bounded.BoundedDist.logpdf"]], "mean (pycbc.distributions.gaussian.gaussian property)": [[55, "pycbc.distributions.gaussian.Gaussian.mean"]], "name (pycbc.distributions.angular.cosangle attribute)": [[55, "pycbc.distributions.angular.CosAngle.name"]], "name (pycbc.distributions.angular.sinangle attribute)": [[55, "pycbc.distributions.angular.SinAngle.name"]], "name (pycbc.distributions.angular.uniformangle attribute)": [[55, "pycbc.distributions.angular.UniformAngle.name"]], "name (pycbc.distributions.angular.uniformsolidangle attribute)": [[55, "pycbc.distributions.angular.UniformSolidAngle.name"]], "name (pycbc.distributions.arbitrary.arbitrary attribute)": [[55, "pycbc.distributions.arbitrary.Arbitrary.name"]], "name (pycbc.distributions.arbitrary.fromfile attribute)": [[55, "pycbc.distributions.arbitrary.FromFile.name"]], "name (pycbc.distributions.constraints.constraint attribute)": [[55, "pycbc.distributions.constraints.Constraint.name"]], "name (pycbc.distributions.constraints.supernovaeconvexhull attribute)": [[55, "pycbc.distributions.constraints.SupernovaeConvexHull.name"]], "name (pycbc.distributions.external.distributionfunctionfromfile attribute)": [[55, "pycbc.distributions.external.DistributionFunctionFromFile.name"]], "name (pycbc.distributions.external.external attribute)": [[55, "pycbc.distributions.external.External.name"]], "name (pycbc.distributions.fixedsamples.fixedsamples attribute)": [[55, "pycbc.distributions.fixedsamples.FixedSamples.name"]], "name (pycbc.distributions.gaussian.gaussian attribute)": [[55, "pycbc.distributions.gaussian.Gaussian.name"]], "name (pycbc.distributions.joint.jointdistribution attribute)": [[55, "pycbc.distributions.joint.JointDistribution.name"]], "name (pycbc.distributions.mass.mchirpfromuniformmass1mass2 attribute)": [[55, "pycbc.distributions.mass.MchirpfromUniformMass1Mass2.name"]], "name (pycbc.distributions.mass.qfromuniformmass1mass2 attribute)": [[55, "pycbc.distributions.mass.QfromUniformMass1Mass2.name"]], "name (pycbc.distributions.power_law.uniformpowerlaw attribute)": [[55, "pycbc.distributions.power_law.UniformPowerLaw.name"]], "name (pycbc.distributions.power_law.uniformradius attribute)": [[55, "pycbc.distributions.power_law.UniformRadius.name"]], "name (pycbc.distributions.qnm.uniformf0tau attribute)": [[55, "pycbc.distributions.qnm.UniformF0Tau.name"]], "name (pycbc.distributions.sky_location.fishersky attribute)": [[55, "pycbc.distributions.sky_location.FisherSky.name"]], "name (pycbc.distributions.sky_location.uniformsky attribute)": [[55, "pycbc.distributions.sky_location.UniformSky.name"]], "name (pycbc.distributions.spins.independentchipchieff attribute)": [[55, "pycbc.distributions.spins.IndependentChiPChiEff.name"]], "name (pycbc.distributions.uniform.uniform attribute)": [[55, "pycbc.distributions.uniform.Uniform.name"]], "name (pycbc.distributions.uniform_log.uniformlog10 attribute)": [[55, "pycbc.distributions.uniform_log.UniformLog10.name"]], "norm (pycbc.distributions.arbitrary.fromfile attribute)": [[55, "pycbc.distributions.arbitrary.FromFile.norm"]], "norm (pycbc.distributions.mass.qfromuniformmass1mass2 property)": [[55, "pycbc.distributions.mass.QfromUniformMass1Mass2.norm"]], "norm (pycbc.distributions.power_law.uniformpowerlaw property)": [[55, "pycbc.distributions.power_law.UniformPowerLaw.norm"]], "norm (pycbc.distributions.uniform.uniform property)": [[55, "pycbc.distributions.uniform.Uniform.norm"]], "params (pycbc.distributions.arbitrary.arbitrary property)": [[55, "pycbc.distributions.arbitrary.Arbitrary.params"]], "params (pycbc.distributions.bounded.boundeddist property)": [[55, "pycbc.distributions.bounded.BoundedDist.params"]], "params (pycbc.distributions.sky_location.fishersky property)": [[55, "pycbc.distributions.sky_location.FisherSky.params"]], "pdf() (pycbc.distributions.bounded.boundeddist method)": [[55, "pycbc.distributions.bounded.BoundedDist.pdf"]], "polar_angle (pycbc.distributions.angular.uniformsolidangle property)": [[55, "pycbc.distributions.angular.UniformSolidAngle.polar_angle"]], "prior_from_config() (in module pycbc.distributions.utils)": [[55, "pycbc.distributions.utils.prior_from_config"]], "pycbc.distributions": [[55, "module-pycbc.distributions"]], "pycbc.distributions.angular": [[55, "module-pycbc.distributions.angular"]], "pycbc.distributions.arbitrary": [[55, "module-pycbc.distributions.arbitrary"]], "pycbc.distributions.bounded": [[55, "module-pycbc.distributions.bounded"]], "pycbc.distributions.constraints": [[55, "module-pycbc.distributions.constraints"]], "pycbc.distributions.external": [[55, "module-pycbc.distributions.external"]], "pycbc.distributions.fixedsamples": [[55, "module-pycbc.distributions.fixedsamples"]], "pycbc.distributions.gaussian": [[55, "module-pycbc.distributions.gaussian"]], "pycbc.distributions.joint": [[55, "module-pycbc.distributions.joint"]], "pycbc.distributions.mass": [[55, "module-pycbc.distributions.mass"]], "pycbc.distributions.power_law": [[55, "module-pycbc.distributions.power_law"]], "pycbc.distributions.qnm": [[55, "module-pycbc.distributions.qnm"]], "pycbc.distributions.sky_location": [[55, "module-pycbc.distributions.sky_location"]], "pycbc.distributions.spins": [[55, "module-pycbc.distributions.spins"]], "pycbc.distributions.uniform": [[55, "module-pycbc.distributions.uniform"]], "pycbc.distributions.uniform_log": [[55, "module-pycbc.distributions.uniform_log"]], "pycbc.distributions.utils": [[55, "module-pycbc.distributions.utils"]], "read_constraints_from_config() (in module pycbc.distributions)": [[55, "pycbc.distributions.read_constraints_from_config"]], "read_distributions_from_config() (in module pycbc.distributions)": [[55, "pycbc.distributions.read_distributions_from_config"]], "read_params_from_config() (in module pycbc.distributions)": [[55, "pycbc.distributions.read_params_from_config"]], "required_parameters (pycbc.distributions.constraints.supernovaeconvexhull attribute)": [[55, "pycbc.distributions.constraints.SupernovaeConvexHull.required_parameters"]], "rvs() (pycbc.distributions.arbitrary.arbitrary method)": [[55, "pycbc.distributions.arbitrary.Arbitrary.rvs"]], "rvs() (pycbc.distributions.bounded.boundeddist method)": [[55, "pycbc.distributions.bounded.BoundedDist.rvs"]], "rvs() (pycbc.distributions.external.external method)": [[55, "pycbc.distributions.external.External.rvs"]], "rvs() (pycbc.distributions.fixedsamples.fixedsamples method)": [[55, "pycbc.distributions.fixedsamples.FixedSamples.rvs"]], "rvs() (pycbc.distributions.joint.jointdistribution method)": [[55, "pycbc.distributions.joint.JointDistribution.rvs"]], "rvs() (pycbc.distributions.mass.qfromuniformmass1mass2 method)": [[55, "pycbc.distributions.mass.QfromUniformMass1Mass2.rvs"]], "rvs() (pycbc.distributions.qnm.uniformf0tau method)": [[55, "pycbc.distributions.qnm.UniformF0Tau.rvs"]], "rvs() (pycbc.distributions.sky_location.fishersky method)": [[55, "pycbc.distributions.sky_location.FisherSky.rvs"]], "rvs() (pycbc.distributions.spins.independentchipchieff method)": [[55, "pycbc.distributions.spins.IndependentChiPChiEff.rvs"]], "set_bandwidth() (pycbc.distributions.arbitrary.arbitrary method)": [[55, "pycbc.distributions.arbitrary.Arbitrary.set_bandwidth"]], "var (pycbc.distributions.gaussian.gaussian property)": [[55, "pycbc.distributions.gaussian.Gaussian.var"]], "variable_args (pycbc.distributions.joint.jointdistribution attribute)": [[55, "pycbc.distributions.joint.JointDistribution.variable_args"]], "well_reflected (pycbc.distributions.joint.jointdistribution property)": [[55, "pycbc.distributions.joint.JointDistribution.well_reflected"]], "within_constraints() (pycbc.distributions.joint.jointdistribution method)": [[55, "pycbc.distributions.joint.JointDistribution.within_constraints"]], "cputhresholdcluster (class in pycbc.events.threshold_cpu)": [[56, "pycbc.events.threshold_cpu.CPUThresholdCluster"]], "coincexpirebuffer (class in pycbc.events.coinc)": [[56, "pycbc.events.coinc.CoincExpireBuffer"]], "dqexpfitfgbgnormstatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.DQExpFitFgBgNormStatistic"]], "eventmanager (class in pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.EventManager"]], "eventmanagercoherent (class in pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.EventManagerCoherent"]], "eventmanagermultidet (class in pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.EventManagerMultiDet"]], "expfitbgratestatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.ExpFitBgRateStatistic"]], "expfitcombinedsnr (class in pycbc.events.stat)": [[56, "pycbc.events.stat.ExpFitCombinedSNR"]], "expfitfgbgkdestatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.ExpFitFgBgKDEStatistic"]], "expfitfgbgnormbbhstatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic"]], "expfitfgbgnormstatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.ExpFitFgBgNormStatistic"]], "expfitstatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.ExpFitStatistic"]], "ks_test() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.KS_test"]], "livecoinctimeslidebackgroundestimator (class in pycbc.events.coinc)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator"]], "livesingle (class in pycbc.events.single)": [[56, "pycbc.events.single.LiveSingle"]], "multiringbuffer (class in pycbc.events.coinc)": [[56, "pycbc.events.coinc.MultiRingBuffer"]], "phasetdexpfitstatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.PhaseTDExpFitStatistic"]], "phasetdstatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.PhaseTDStatistic"]], "quadraturesumstatistic (class in pycbc.events.stat)": [[56, "pycbc.events.stat.QuadratureSumStatistic"]], "stat (class in pycbc.events.stat)": [[56, "pycbc.events.stat.Stat"]], "thresholdcluster (class in pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.ThresholdCluster"]], "add() (pycbc.events.coinc.coincexpirebuffer method)": [[56, "pycbc.events.coinc.CoincExpireBuffer.add"]], "add() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.add"]], "add_singles() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.add_singles"]], "add_template_events() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.add_template_events"]], "add_template_events_to_network() (pycbc.events.eventmgr.eventmanagercoherent method)": [[56, "pycbc.events.eventmgr.EventManagerCoherent.add_template_events_to_network"]], "add_template_network_events() (pycbc.events.eventmgr.eventmanagercoherent method)": [[56, "pycbc.events.eventmgr.EventManagerCoherent.add_template_network_events"]], "add_template_params() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.add_template_params"]], "advance_time() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.advance_time"]], "apply_template_cuts() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.apply_template_cuts"]], "apply_template_fit_cut() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.apply_template_fit_cut"]], "apply_trigger_cuts() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.apply_trigger_cuts"]], "assign_bin_id() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.DQExpFitFgBgNormStatistic.assign_bin_id"]], "assign_dq_val() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.DQExpFitFgBgNormStatistic.assign_dq_val"]], "assign_fits() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.assign_fits"]], "assign_kdes() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgKDEStatistic.assign_kdes"]], "assign_median_sigma() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormStatistic.assign_median_sigma"]], "background_bin_from_string() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.background_bin_from_string"]], "background_time (pycbc.events.coinc.livecoinctimeslidebackgroundestimator property)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.background_time"]], "backout_last() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.backout_last"]], "bank_bins_from_cli() (in module pycbc.events.triggers)": [[56, "pycbc.events.triggers.bank_bins_from_cli"]], "calculate_ifar() (pycbc.events.single.livesingle method)": [[56, "pycbc.events.single.LiveSingle.calculate_ifar"]], "check() (pycbc.events.single.livesingle method)": [[56, "pycbc.events.single.LiveSingle.check"]], "check_expired_triggers() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.check_expired_triggers"]], "check_significance_options() (in module pycbc.events.significance)": [[56, "pycbc.events.significance.check_significance_options"]], "check_update_cuts() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.check_update_cuts"]], "chisq_threshold() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.chisq_threshold"]], "cluster_coincs() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.cluster_coincs"]], "cluster_coincs_multiifo() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.cluster_coincs_multiifo"]], "cluster_over_time() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.cluster_over_time"]], "cluster_reduce() (in module pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.cluster_reduce"]], "cluster_template_events() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.cluster_template_events"]], "cluster_template_events_single_ifo() (pycbc.events.eventmgr.eventmanagermultidet method)": [[56, "pycbc.events.eventmgr.EventManagerMultiDet.cluster_template_events_single_ifo"]], "cluster_template_network_events() (pycbc.events.eventmgr.eventmanagercoherent method)": [[56, "pycbc.events.eventmgr.EventManagerCoherent.cluster_template_network_events"]], "coherent_snr() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.coherent_snr"]], "coinc_old() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.coinc_OLD"]], "coinc_old() (pycbc.events.stat.phasetdexpfitstatistic method)": [[56, "pycbc.events.stat.PhaseTDExpFitStatistic.coinc_OLD"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitbgratestatistic method)": [[56, "pycbc.events.stat.ExpFitBgRateStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitcombinedsnr method)": [[56, "pycbc.events.stat.ExpFitCombinedSNR.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgKDEStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.phasetdexpfitstatistic method)": [[56, "pycbc.events.stat.PhaseTDExpFitStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.phasetdstatistic method)": [[56, "pycbc.events.stat.PhaseTDStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.quadraturesumstatistic method)": [[56, "pycbc.events.stat.QuadratureSumStatistic.coinc_lim_for_thresh"]], "coinc_lim_for_thresh() (pycbc.events.stat.stat method)": [[56, "pycbc.events.stat.Stat.coinc_lim_for_thresh"]], "coinc_lim_for_thresh_old() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.coinc_lim_for_thresh_OLD"]], "coinc_lim_for_thresh_old() (pycbc.events.stat.phasetdexpfitstatistic method)": [[56, "pycbc.events.stat.PhaseTDExpFitStatistic.coinc_lim_for_thresh_OLD"]], "coincbuffer_expireelements() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.coincbuffer_expireelements"]], "coincbuffer_numgreater() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.coincbuffer_numgreater"]], "coincident_snr() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.coincident_snr"]], "combination_noise_lograte() (in module pycbc.events.coinc_rate)": [[56, "pycbc.events.coinc_rate.combination_noise_lograte"]], "combination_noise_rate() (in module pycbc.events.coinc_rate)": [[56, "pycbc.events.coinc_rate.combination_noise_rate"]], "consolidate_events() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.consolidate_events"]], "convert_inputstr() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.convert_inputstr"]], "count_n_louder() (in module pycbc.events.significance)": [[56, "pycbc.events.significance.count_n_louder"]], "cum_fit() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.cum_fit"]], "data (pycbc.events.coinc.coincexpirebuffer property)": [[56, "pycbc.events.coinc.CoincExpireBuffer.data"]], "data() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.data"]], "digest_significance_options() (in module pycbc.events.significance)": [[56, "pycbc.events.significance.digest_significance_options"]], "discard_last() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.discard_last"]], "effsnr() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.effsnr"]], "expire_vector() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.expire_vector"]], "exponential_fitalpha() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.exponential_fitalpha"]], "filled_time (pycbc.events.coinc.multiringbuffer property)": [[56, "pycbc.events.coinc.MultiRingBuffer.filled_time"]], "finalize_events() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.finalize_events"]], "finalize_template_events() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.finalize_template_events"]], "finalize_template_events() (pycbc.events.eventmgr.eventmanagercoherent method)": [[56, "pycbc.events.eventmgr.EventManagerCoherent.finalize_template_events"]], "finalize_template_events() (pycbc.events.eventmgr.eventmanagermultidet method)": [[56, "pycbc.events.eventmgr.EventManagerMultiDet.finalize_template_events"]], "find_dq_val() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.DQExpFitFgBgNormStatistic.find_dq_val"]], "find_fits() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.find_fits"]], "findchirp_cluster_over_window() (in module pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.findchirp_cluster_over_window"]], "findchirp_cluster_over_window_cython() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.findchirp_cluster_over_window_cython"]], "fit_above_thresh() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.fit_above_thresh"]], "fit_fn() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.fit_fn"]], "from_cli() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator class method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.from_cli"]], "from_cli() (pycbc.events.single.livesingle class method)": [[56, "pycbc.events.single.LiveSingle.from_cli"]], "from_multi_ifo_interface() (pycbc.events.eventmgr.eventmanager class method)": [[56, "pycbc.events.eventmgr.EventManager.from_multi_ifo_interface"]], "get_coinc_indexes() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.get_coinc_indexes"]], "get_coinc_triggers() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.get_coinc_triggers"]], "get_found_param() (in module pycbc.events.triggers)": [[56, "pycbc.events.triggers.get_found_param"]], "get_hist() (pycbc.events.stat.phasetdstatistic method)": [[56, "pycbc.events.stat.PhaseTDStatistic.get_hist"]], "get_inj_param() (in module pycbc.events.triggers)": [[56, "pycbc.events.triggers.get_inj_param"]], "get_mass_spin() (in module pycbc.events.triggers)": [[56, "pycbc.events.triggers.get_mass_spin"]], "get_n_louder() (in module pycbc.events.significance)": [[56, "pycbc.events.significance.get_n_louder"]], "get_newsnr() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_newsnr"]], "get_newsnr_sgveto() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_newsnr_sgveto"]], "get_newsnr_sgveto_psdvar() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_newsnr_sgveto_psdvar"]], "get_newsnr_sgveto_psdvar_scaled() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_newsnr_sgveto_psdvar_scaled"]], "get_newsnr_sgveto_psdvar_scaled_threshold() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_newsnr_sgveto_psdvar_scaled_threshold"]], "get_newsnr_sgveto_psdvar_threshold() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_newsnr_sgveto_psdvar_threshold"]], "get_param() (in module pycbc.events.triggers)": [[56, "pycbc.events.triggers.get_param"]], "get_projection_matrix() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.get_projection_matrix"]], "get_ref_vals() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.get_ref_vals"]], "get_segment_definer_comments() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.get_segment_definer_comments"]], "get_sngl_ranking() (pycbc.events.stat.stat method)": [[56, "pycbc.events.stat.Stat.get_sngl_ranking"]], "get_sngls_ranking_from_trigs() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_sngls_ranking_from_trigs"]], "get_snr() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.get_snr"]], "get_statistic() (in module pycbc.events.stat)": [[56, "pycbc.events.stat.get_statistic"]], "get_statistic_from_opts() (in module pycbc.events.stat)": [[56, "pycbc.events.stat.get_statistic_from_opts"]], "ifar() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.ifar"]], "increment() (pycbc.events.coinc.coincexpirebuffer method)": [[56, "pycbc.events.coinc.CoincExpireBuffer.increment"]], "indices_outside_segments() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.indices_outside_segments"]], "indices_outside_times() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.indices_outside_times"]], "indices_within_segments() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.indices_within_segments"]], "indices_within_times() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.indices_within_times"]], "ingest_cuts_option_group() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.ingest_cuts_option_group"]], "insert_args() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator static method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.insert_args"]], "insert_args() (pycbc.events.single.livesingle static method)": [[56, "pycbc.events.single.LiveSingle.insert_args"]], "insert_bank_bins_option_group() (in module pycbc.events.triggers)": [[56, "pycbc.events.triggers.insert_bank_bins_option_group"]], "insert_cuts_option_group() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.insert_cuts_option_group"]], "insert_significance_option_group() (in module pycbc.events.significance)": [[56, "pycbc.events.significance.insert_significance_option_group"]], "insert_statistic_option_group() (in module pycbc.events.stat)": [[56, "pycbc.events.stat.insert_statistic_option_group"]], "keep_loudest_in_interval() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.keep_loudest_in_interval"]], "keep_near_injection() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.keep_near_injection"]], "lognoiserate() (pycbc.events.stat.dqexpfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.DQExpFitFgBgNormStatistic.lognoiserate"]], "lognoiserate() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormStatistic.lognoiserate"]], "lognoiserate() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.lognoiserate"]], "logsignalrate() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgKDEStatistic.logsignalrate"]], "logsignalrate() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.logsignalrate"]], "logsignalrate() (pycbc.events.stat.phasetdstatistic method)": [[56, "pycbc.events.stat.PhaseTDStatistic.logsignalrate"]], "logsignalrateinternals_compute2detrate() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.logsignalrateinternals_compute2detrate"]], "logsignalrateinternals_computepsignalbins() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.logsignalrateinternals_computepsignalbins"]], "make_output_dir() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.make_output_dir"]], "mean_if_greater_than_zero() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.mean_if_greater_than_zero"]], "multiifo_noise_coincident_area() (in module pycbc.events.coinc_rate)": [[56, "pycbc.events.coinc_rate.multiifo_noise_coincident_area"]], "multiifo_noise_lograte() (in module pycbc.events.coinc_rate)": [[56, "pycbc.events.coinc_rate.multiifo_noise_lograte"]], "multiifo_signal_coincident_area() (in module pycbc.events.coinc_rate)": [[56, "pycbc.events.coinc_rate.multiifo_signal_coincident_area"]], "n_louder_from_fit() (in module pycbc.events.significance)": [[56, "pycbc.events.significance.n_louder_from_fit"]], "nbytes (pycbc.events.coinc.coincexpirebuffer property)": [[56, "pycbc.events.coinc.CoincExpireBuffer.nbytes"]], "nbytes (pycbc.events.coinc.multiringbuffer property)": [[56, "pycbc.events.coinc.MultiRingBuffer.nbytes"]], "network_chisq() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.network_chisq"]], "new_template() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.new_template"]], "newsnr() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.newsnr"]], "newsnr_sgveto() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.newsnr_sgveto"]], "newsnr_sgveto_psdvar() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.newsnr_sgveto_psdvar"]], "newsnr_sgveto_psdvar_scaled() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.newsnr_sgveto_psdvar_scaled"]], "newsnr_sgveto_psdvar_scaled_threshold() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.newsnr_sgveto_psdvar_scaled_threshold"]], "newsnr_sgveto_psdvar_threshold() (in module pycbc.events.ranking)": [[56, "pycbc.events.ranking.newsnr_sgveto_psdvar_threshold"]], "newsnr_threshold() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.newsnr_threshold"]], "null_snr() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.null_snr"]], "num_elements() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.num_elements"]], "num_greater() (pycbc.events.coinc.coincexpirebuffer method)": [[56, "pycbc.events.coinc.CoincExpireBuffer.num_greater"]], "parallel_thresh_cluster() (in module pycbc.events.simd_threshold_cython)": [[56, "pycbc.events.simd_threshold_cython.parallel_thresh_cluster"]], "parallel_threshold() (in module pycbc.events.simd_threshold_cython)": [[56, "pycbc.events.simd_threshold_cython.parallel_threshold"]], "parse_statistic_keywords_opt() (in module pycbc.events.stat)": [[56, "pycbc.events.stat.parse_statistic_keywords_opt"]], "pick_best_coinc() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator class method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.pick_best_coinc"]], "power_fitalpha() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.power_fitalpha"]], "pycbc.events": [[56, "module-pycbc.events"]], "pycbc.events.coherent": [[56, "module-pycbc.events.coherent"]], "pycbc.events.coinc": [[56, "module-pycbc.events.coinc"]], "pycbc.events.coinc_rate": [[56, "module-pycbc.events.coinc_rate"]], "pycbc.events.cuts": [[56, "module-pycbc.events.cuts"]], "pycbc.events.eventmgr": [[56, "module-pycbc.events.eventmgr"]], "pycbc.events.eventmgr_cython": [[56, "module-pycbc.events.eventmgr_cython"]], "pycbc.events.ranking": [[56, "module-pycbc.events.ranking"]], "pycbc.events.significance": [[56, "module-pycbc.events.significance"]], "pycbc.events.simd_threshold_cython": [[56, "module-pycbc.events.simd_threshold_cython"]], "pycbc.events.single": [[56, "module-pycbc.events.single"]], "pycbc.events.stat": [[56, "module-pycbc.events.stat"]], "pycbc.events.threshold_cpu": [[56, "module-pycbc.events.threshold_cpu"]], "pycbc.events.trigger_fits": [[56, "module-pycbc.events.trigger_fits"]], "pycbc.events.triggers": [[56, "module-pycbc.events.triggers"]], "pycbc.events.veto": [[56, "module-pycbc.events.veto"]], "rank_stat_coinc() (pycbc.events.stat.expfitbgratestatistic method)": [[56, "pycbc.events.stat.ExpFitBgRateStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.expfitcombinedsnr method)": [[56, "pycbc.events.stat.ExpFitCombinedSNR.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.phasetdexpfitstatistic method)": [[56, "pycbc.events.stat.PhaseTDExpFitStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.phasetdstatistic method)": [[56, "pycbc.events.stat.PhaseTDStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.quadraturesumstatistic method)": [[56, "pycbc.events.stat.QuadratureSumStatistic.rank_stat_coinc"]], "rank_stat_coinc() (pycbc.events.stat.stat method)": [[56, "pycbc.events.stat.Stat.rank_stat_coinc"]], "rank_stat_single() (pycbc.events.stat.expfitcombinedsnr method)": [[56, "pycbc.events.stat.ExpFitCombinedSNR.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.phasetdexpfitstatistic method)": [[56, "pycbc.events.stat.PhaseTDExpFitStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.phasetdstatistic method)": [[56, "pycbc.events.stat.PhaseTDStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.quadraturesumstatistic method)": [[56, "pycbc.events.stat.QuadratureSumStatistic.rank_stat_single"]], "rank_stat_single() (pycbc.events.stat.stat method)": [[56, "pycbc.events.stat.Stat.rank_stat_single"]], "rayleigh_fitalpha() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.rayleigh_fitalpha"]], "reassign_rate() (pycbc.events.stat.expfitbgratestatistic method)": [[56, "pycbc.events.stat.ExpFitBgRateStatistic.reassign_rate"]], "remove() (pycbc.events.coinc.coincexpirebuffer method)": [[56, "pycbc.events.coinc.CoincExpireBuffer.remove"]], "restore_state() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator static method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.restore_state"]], "restore_state() (pycbc.events.eventmgr.eventmanager static method)": [[56, "pycbc.events.eventmgr.EventManager.restore_state"]], "reweight_snr_by_null() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.reweight_snr_by_null"]], "reweightedsnr_cut() (in module pycbc.events.coherent)": [[56, "pycbc.events.coherent.reweightedsnr_cut"]], "save_performance() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.save_performance"]], "save_state() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.save_state"]], "save_state() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.save_state"]], "segments_to_start_end() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.segments_to_start_end"]], "select_segments_by_definer() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.select_segments_by_definer"]], "set_singles_buffer() (pycbc.events.coinc.livecoinctimeslidebackgroundestimator method)": [[56, "pycbc.events.coinc.LiveCoincTimeslideBackgroundEstimator.set_singles_buffer"]], "sigma_multiple_cut_thresh() (in module pycbc.events.cuts)": [[56, "pycbc.events.cuts.sigma_multiple_cut_thresh"]], "single() (pycbc.events.stat.expfitcombinedsnr method)": [[56, "pycbc.events.stat.ExpFitCombinedSNR.single"]], "single() (pycbc.events.stat.expfitfgbgkdestatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgKDEStatistic.single"]], "single() (pycbc.events.stat.expfitfgbgnormbbhstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormBBHStatistic.single"]], "single() (pycbc.events.stat.expfitfgbgnormstatistic method)": [[56, "pycbc.events.stat.ExpFitFgBgNormStatistic.single"]], "single() (pycbc.events.stat.expfitstatistic method)": [[56, "pycbc.events.stat.ExpFitStatistic.single"]], "single() (pycbc.events.stat.phasetdexpfitstatistic method)": [[56, "pycbc.events.stat.PhaseTDExpFitStatistic.single"]], "single() (pycbc.events.stat.phasetdstatistic method)": [[56, "pycbc.events.stat.PhaseTDStatistic.single"]], "single() (pycbc.events.stat.quadraturesumstatistic method)": [[56, "pycbc.events.stat.QuadratureSumStatistic.single"]], "single() (pycbc.events.stat.stat method)": [[56, "pycbc.events.stat.Stat.single"]], "start_end_from_segments() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.start_end_from_segments"]], "start_end_to_segments() (in module pycbc.events.veto)": [[56, "pycbc.events.veto.start_end_to_segments"]], "tail_threshold() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.tail_threshold"]], "threshold() (in module pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.threshold"]], "threshold() (in module pycbc.events.threshold_cpu)": [[56, "pycbc.events.threshold_cpu.threshold"]], "threshold_and_cluster() (in module pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.threshold_and_cluster"]], "threshold_and_cluster() (pycbc.events.threshold_cpu.cputhresholdcluster method)": [[56, "pycbc.events.threshold_cpu.CPUThresholdCluster.threshold_and_cluster"]], "threshold_inline() (in module pycbc.events.threshold_cpu)": [[56, "pycbc.events.threshold_cpu.threshold_inline"]], "threshold_numpy() (in module pycbc.events.threshold_cpu)": [[56, "pycbc.events.threshold_cpu.threshold_numpy"]], "threshold_only() (in module pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.threshold_only"]], "threshold_only() (in module pycbc.events.threshold_cpu)": [[56, "pycbc.events.threshold_cpu.threshold_only"]], "threshold_real_numpy() (in module pycbc.events.eventmgr)": [[56, "pycbc.events.eventmgr.threshold_real_numpy"]], "time_coincidence() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.time_coincidence"]], "time_multi_coincidence() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.time_multi_coincidence"]], "timecluster_cython() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.timecluster_cython"]], "timecoincidence_constructfold() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.timecoincidence_constructfold"]], "timecoincidence_constructidxs() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.timecoincidence_constructidxs"]], "timecoincidence_findidxlen() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.timecoincidence_findidxlen"]], "timecoincidence_getslideint() (in module pycbc.events.eventmgr_cython)": [[56, "pycbc.events.eventmgr_cython.timecoincidence_getslideint"]], "timeslide_durations() (in module pycbc.events.coinc)": [[56, "pycbc.events.coinc.timeslide_durations"]], "update_valid_start() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.update_valid_start"]], "use_alphamax() (pycbc.events.stat.expfitcombinedsnr method)": [[56, "pycbc.events.stat.ExpFitCombinedSNR.use_alphamax"]], "valid_slice() (pycbc.events.coinc.multiringbuffer method)": [[56, "pycbc.events.coinc.MultiRingBuffer.valid_slice"]], "which_bin() (in module pycbc.events.trigger_fits)": [[56, "pycbc.events.trigger_fits.which_bin"]], "write_events() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.write_events"]], "write_events() (pycbc.events.eventmgr.eventmanagermultidet method)": [[56, "pycbc.events.eventmgr.EventManagerMultiDet.write_events"]], "write_to_hdf() (pycbc.events.eventmgr.eventmanager method)": [[56, "pycbc.events.eventmgr.EventManager.write_to_hdf"]], "write_to_hdf() (pycbc.events.eventmgr.eventmanagercoherent method)": [[56, "pycbc.events.eventmgr.EventManagerCoherent.write_to_hdf"]], "write_to_hdf() (pycbc.events.eventmgr.eventmanagermultidet method)": [[56, "pycbc.events.eventmgr.EventManagerMultiDet.write_to_hdf"]], "fft (class in pycbc.fft.class_api)": [[57, "pycbc.fft.class_api.FFT"]], "fft (class in pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.FFT"]], "fft (class in pycbc.fft.mkl)": [[57, "pycbc.fft.mkl.FFT"]], "fft (class in pycbc.fft.npfft)": [[57, "pycbc.fft.npfft.FFT"]], "ifft (class in pycbc.fft.class_api)": [[57, "pycbc.fft.class_api.IFFT"]], "ifft (class in pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.IFFT"]], "ifft (class in pycbc.fft.mkl)": [[57, "pycbc.fft.mkl.IFFT"]], "ifft (class in pycbc.fft.npfft)": [[57, "pycbc.fft.npfft.IFFT"]], "c2c_correlate_ifft() (in module pycbc.fft.fft_callback)": [[57, "pycbc.fft.fft_callback.c2c_correlate_ifft"]], "c2c_half_correlate_ifft() (in module pycbc.fft.fft_callback)": [[57, "pycbc.fft.fft_callback.c2c_half_correlate_ifft"]], "check_status() (in module pycbc.fft.mkl)": [[57, "pycbc.fft.mkl.check_status"]], "compile() (in module pycbc.fft.fft_callback)": [[57, "pycbc.fft.fft_callback.compile"]], "create_descriptor() (in module pycbc.fft.mkl)": [[57, "pycbc.fft.mkl.create_descriptor"]], "execute() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.execute"]], "execute() (pycbc.fft.fftw.fft method)": [[57, "pycbc.fft.fftw.FFT.execute"]], "execute() (pycbc.fft.fftw.ifft method)": [[57, "pycbc.fft.fftw.IFFT.execute"]], "execute() (pycbc.fft.mkl.fft method)": [[57, "pycbc.fft.mkl.FFT.execute"]], "execute() (pycbc.fft.mkl.ifft method)": [[57, "pycbc.fft.mkl.IFFT.execute"]], "execute() (pycbc.fft.npfft.fft method)": [[57, "pycbc.fft.npfft.FFT.execute"]], "execute() (pycbc.fft.npfft.ifft method)": [[57, "pycbc.fft.npfft.IFFT.execute"]], "export_double_wisdom_to_filename() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.export_double_wisdom_to_filename"]], "export_single_wisdom_to_filename() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.export_single_wisdom_to_filename"]], "fft() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.fft"]], "fft() (in module pycbc.fft.func_api)": [[57, "pycbc.fft.func_api.fft"]], "fft() (in module pycbc.fft.mkl)": [[57, "pycbc.fft.mkl.fft"]], "fft() (in module pycbc.fft.npfft)": [[57, "pycbc.fft.npfft.fft"]], "fft_transpose() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.fft_transpose"]], "fft_transpose_fftw() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.fft_transpose_fftw"]], "first_phase() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.first_phase"]], "from_cli() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.from_cli"]], "from_cli() (in module pycbc.fft.parser_support)": [[57, "pycbc.fft.parser_support.from_cli"]], "get_backend() (in module pycbc.fft.backend_cpu)": [[57, "pycbc.fft.backend_cpu.get_backend"]], "get_backend() (in module pycbc.fft.backend_mkl)": [[57, "pycbc.fft.backend_mkl.get_backend"]], "get_backend() (in module pycbc.fft.backend_support)": [[57, "pycbc.fft.backend_support.get_backend"]], "get_backend_modules() (in module pycbc.fft.backend_support)": [[57, "pycbc.fft.backend_support.get_backend_modules"]], "get_backend_names() (in module pycbc.fft.backend_support)": [[57, "pycbc.fft.backend_support.get_backend_names"]], "get_flag() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.get_flag"]], "get_fn_plan() (in module pycbc.fft.fft_callback)": [[57, "pycbc.fft.fft_callback.get_fn_plan"]], "get_measure_level() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.get_measure_level"]], "htilde (pycbc.fft.fft_callback.param attribute)": [[57, "pycbc.fft.fft_callback.param.htilde"]], "htilde (pycbc.fft.fft_callback.param2 attribute)": [[57, "pycbc.fft.fft_callback.param2.htilde"]], "ifft() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.ifft"]], "ifft() (in module pycbc.fft.func_api)": [[57, "pycbc.fft.func_api.ifft"]], "ifft() (in module pycbc.fft.mkl)": [[57, "pycbc.fft.mkl.ifft"]], "ifft() (in module pycbc.fft.npfft)": [[57, "pycbc.fft.npfft.ifft"]], "import_double_wisdom_from_filename() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.import_double_wisdom_from_filename"]], "import_single_wisdom_from_filename() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.import_single_wisdom_from_filename"]], "import_sys_wisdom() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.import_sys_wisdom"]], "in_kmax (pycbc.fft.fft_callback.param2 attribute)": [[57, "pycbc.fft.fft_callback.param2.in_kmax"]], "insert_fft_option_group() (in module pycbc.fft.parser_support)": [[57, "pycbc.fft.parser_support.insert_fft_option_group"]], "insert_fft_options() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.insert_fft_options"]], "out_kmax (pycbc.fft.fft_callback.param2 attribute)": [[57, "pycbc.fft.fft_callback.param2.out_kmax"]], "out_kmin (pycbc.fft.fft_callback.param2 attribute)": [[57, "pycbc.fft.fft_callback.param2.out_kmin"]], "param (class in pycbc.fft.fft_callback)": [[57, "pycbc.fft.fft_callback.param"]], "param2 (class in pycbc.fft.fft_callback)": [[57, "pycbc.fft.fft_callback.param2"]], "plan() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.plan"]], "plan_first_phase() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.plan_first_phase"]], "plan_transpose() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.plan_transpose"]], "pruned_c2cifft() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.pruned_c2cifft"]], "pycbc.fft": [[57, "module-pycbc.fft"]], "pycbc.fft.backend_cpu": [[57, "module-pycbc.fft.backend_cpu"]], "pycbc.fft.backend_mkl": [[57, "module-pycbc.fft.backend_mkl"]], "pycbc.fft.backend_support": [[57, "module-pycbc.fft.backend_support"]], "pycbc.fft.class_api": [[57, "module-pycbc.fft.class_api"]], "pycbc.fft.core": [[57, "module-pycbc.fft.core"]], "pycbc.fft.fft_callback": [[57, "module-pycbc.fft.fft_callback"]], "pycbc.fft.fftw": [[57, "module-pycbc.fft.fftw"]], "pycbc.fft.fftw_pruned": [[57, "module-pycbc.fft.fftw_pruned"]], "pycbc.fft.fftw_pruned_cython": [[57, "module-pycbc.fft.fftw_pruned_cython"]], "pycbc.fft.func_api": [[57, "module-pycbc.fft.func_api"]], "pycbc.fft.mkl": [[57, "module-pycbc.fft.mkl"]], "pycbc.fft.npfft": [[57, "module-pycbc.fft.npfft"]], "pycbc.fft.parser_support": [[57, "module-pycbc.fft.parser_support"]], "second_phase() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.second_phase"]], "second_phase_cython() (in module pycbc.fft.fftw_pruned_cython)": [[57, "pycbc.fft.fftw_pruned_cython.second_phase_cython"]], "set_backend() (in module pycbc.fft.backend_cpu)": [[57, "pycbc.fft.backend_cpu.set_backend"]], "set_backend() (in module pycbc.fft.backend_mkl)": [[57, "pycbc.fft.backend_mkl.set_backend"]], "set_backend() (in module pycbc.fft.backend_support)": [[57, "pycbc.fft.backend_support.set_backend"]], "set_measure_level() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.set_measure_level"]], "set_planning_limit() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.set_planning_limit"]], "set_threads_backend() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.set_threads_backend"]], "splay() (in module pycbc.fft.fftw_pruned)": [[57, "pycbc.fft.fftw_pruned.splay"]], "verify_fft_options() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.verify_fft_options"]], "verify_fft_options() (in module pycbc.fft.parser_support)": [[57, "pycbc.fft.parser_support.verify_fft_options"]], "wisdom_io() (in module pycbc.fft.fftw)": [[57, "pycbc.fft.fftw.wisdom_io"]], "cpucorrelator (class in pycbc.filter.matchedfilter_cpu)": [[58, "pycbc.filter.matchedfilter_cpu.CPUCorrelator"]], "livebatchmatchedfilter (class in pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter"]], "matchedfiltercontrol (class in pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.MatchedFilterControl"]], "matchedfilterskymaxcontrol (class in pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControl"]], "matchedfilterskymaxcontrolnophase (class in pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControlNoPhase"]], "batch_correlate_execute() (in module pycbc.filter.matchedfilter_cpu)": [[58, "pycbc.filter.matchedfilter_cpu.batch_correlate_execute"]], "calculate_acf() (in module pycbc.filter.autocorrelation)": [[58, "pycbc.filter.autocorrelation.calculate_acf"]], "calculate_acl() (in module pycbc.filter.autocorrelation)": [[58, "pycbc.filter.autocorrelation.calculate_acl"]], "ccorrf_parallel() (in module pycbc.filter.simd_correlate_cython)": [[58, "pycbc.filter.simd_correlate_cython.ccorrf_parallel"]], "ccorrf_simd() (in module pycbc.filter.simd_correlate_cython)": [[58, "pycbc.filter.simd_correlate_cython.ccorrf_simd"]], "combine_results() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[58, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.combine_results"]], "compute_followup_snr_series() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.compute_followup_snr_series"]], "compute_max_snr_over_sky_loc_stat() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.compute_max_snr_over_sky_loc_stat"]], "compute_max_snr_over_sky_loc_stat_no_phase() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.compute_max_snr_over_sky_loc_stat_no_phase"]], "compute_u_val_for_sky_loc_stat() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.compute_u_val_for_sky_loc_stat"]], "compute_u_val_for_sky_loc_stat_no_phase() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.compute_u_val_for_sky_loc_stat_no_phase"]], "correlate() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.correlate"]], "correlate() (in module pycbc.filter.matchedfilter_cpu)": [[58, "pycbc.filter.matchedfilter_cpu.correlate"]], "correlate() (in module pycbc.filter.matchedfilter_numpy)": [[58, "pycbc.filter.matchedfilter_numpy.correlate"]], "correlate() (pycbc.filter.matchedfilter_cpu.cpucorrelator method)": [[58, "pycbc.filter.matchedfilter_cpu.CPUCorrelator.correlate"]], "correlate_numpy() (in module pycbc.filter.matchedfilter_cpu)": [[58, "pycbc.filter.matchedfilter_cpu.correlate_numpy"]], "correlate_parallel() (in module pycbc.filter.simd_correlate)": [[58, "pycbc.filter.simd_correlate.correlate_parallel"]], "correlate_simd() (in module pycbc.filter.simd_correlate)": [[58, "pycbc.filter.simd_correlate.correlate_simd"]], "deltam_f() (in module pycbc.filter.qtransform)": [[58, "pycbc.filter.qtransform.deltam_f"]], "filter_zpk() (in module pycbc.filter.zpk)": [[58, "pycbc.filter.zpk.filter_zpk"]], "fir_zero_filter() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.fir_zero_filter"]], "followup_event_significance() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.followup_event_significance"]], "full_matched_filter_and_cluster() (pycbc.filter.matchedfilter.matchedfilterskymaxcontrol method)": [[58, "pycbc.filter.matchedfilter.MatchedFilterSkyMaxControl.full_matched_filter_and_cluster"]], "full_matched_filter_and_cluster_fc() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[58, "pycbc.filter.matchedfilter.MatchedFilterControl.full_matched_filter_and_cluster_fc"]], "full_matched_filter_and_cluster_symm() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[58, "pycbc.filter.matchedfilter.MatchedFilterControl.full_matched_filter_and_cluster_symm"]], "full_matched_filter_thresh_only() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[58, "pycbc.filter.matchedfilter.MatchedFilterControl.full_matched_filter_thresh_only"]], "get_cutoff_indices() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.get_cutoff_indices"]], "hierarchical_matched_filter_and_cluster() (pycbc.filter.matchedfilter.matchedfiltercontrol method)": [[58, "pycbc.filter.matchedfilter.MatchedFilterControl.hierarchical_matched_filter_and_cluster"]], "highpass() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.highpass"]], "highpass_fir() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.highpass_fir"]], "interpolate_complex_frequency() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.interpolate_complex_frequency"]], "lowpass() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.lowpass"]], "lowpass_fir() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.lowpass_fir"]], "make_frequency_series() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.make_frequency_series"]], "match() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.match"]], "matched_filter() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.matched_filter"]], "matched_filter_core() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.matched_filter_core"]], "notch_fir() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.notch_fir"]], "optimized_match() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.optimized_match"]], "overlap() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.overlap"]], "overlap_cplx() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.overlap_cplx"]], "process_all() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[58, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.process_all"]], "process_data() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[58, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.process_data"]], "pycbc.filter": [[58, "module-pycbc.filter"]], "pycbc.filter.autocorrelation": [[58, "module-pycbc.filter.autocorrelation"]], "pycbc.filter.matchedfilter": [[58, "module-pycbc.filter.matchedfilter"]], "pycbc.filter.matchedfilter_cpu": [[58, "module-pycbc.filter.matchedfilter_cpu"]], "pycbc.filter.matchedfilter_numpy": [[58, "module-pycbc.filter.matchedfilter_numpy"]], "pycbc.filter.qtransform": [[58, "module-pycbc.filter.qtransform"]], "pycbc.filter.resample": [[58, "module-pycbc.filter.resample"]], "pycbc.filter.simd_correlate": [[58, "module-pycbc.filter.simd_correlate"]], "pycbc.filter.simd_correlate_cython": [[58, "module-pycbc.filter.simd_correlate_cython"]], "pycbc.filter.zpk": [[58, "module-pycbc.filter.zpk"]], "qplane() (in module pycbc.filter.qtransform)": [[58, "pycbc.filter.qtransform.qplane"]], "qseries() (in module pycbc.filter.qtransform)": [[58, "pycbc.filter.qtransform.qseries"]], "qtiling() (in module pycbc.filter.qtransform)": [[58, "pycbc.filter.qtransform.qtiling"]], "resample_to_delta_t() (in module pycbc.filter.resample)": [[58, "pycbc.filter.resample.resample_to_delta_t"]], "set_data() (pycbc.filter.matchedfilter.livebatchmatchedfilter method)": [[58, "pycbc.filter.matchedfilter.LiveBatchMatchedFilter.set_data"]], "sigma() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.sigma"]], "sigmasq() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.sigmasq"]], "sigmasq_series() (in module pycbc.filter.matchedfilter)": [[58, "pycbc.filter.matchedfilter.sigmasq_series"]], "flag_names_to_bitmask() (in module pycbc.frame)": [[59, "pycbc.frame.flag_names_to_bitmask"]], "frame_paths() (in module pycbc.frame.frame)": [[59, "pycbc.frame.frame.frame_paths"]], "get_run() (in module pycbc.frame.gwosc)": [[59, "pycbc.frame.gwosc.get_run"]], "gwosc_frame_json() (in module pycbc.frame.gwosc)": [[59, "pycbc.frame.gwosc.gwosc_frame_json"]], "gwosc_frame_urls() (in module pycbc.frame.gwosc)": [[59, "pycbc.frame.gwosc.gwosc_frame_urls"]], "pycbc.frame": [[59, "module-pycbc.frame"]], "pycbc.frame.frame": [[59, "module-pycbc.frame.frame"]], "pycbc.frame.gwosc": [[59, "module-pycbc.frame.gwosc"]], "pycbc.frame.store": [[59, "module-pycbc.frame.store"]], "query_and_read_frame() (in module pycbc.frame.frame)": [[59, "pycbc.frame.frame.query_and_read_frame"]], "read_frame() (in module pycbc.frame.frame)": [[59, "pycbc.frame.frame.read_frame"]], "read_frame_gwosc() (in module pycbc.frame.gwosc)": [[59, "pycbc.frame.gwosc.read_frame_gwosc"]], "read_store() (in module pycbc.frame.store)": [[59, "pycbc.frame.store.read_store"]], "read_strain_gwosc() (in module pycbc.frame.gwosc)": [[59, "pycbc.frame.gwosc.read_strain_gwosc"]], "baseburnintests (class in pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.BaseBurnInTests"]], "ensemblemcmcburnintests (class in pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests"]], "ensemblemultitemperedmcmcburnintests (class in pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.EnsembleMultiTemperedMCMCBurnInTests"]], "mcmcburnintests (class in pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.MCMCBurnInTests"]], "multitemperedmcmcburnintests (class in pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.MultiTemperedMCMCBurnInTests"]], "parselabelarg (class in pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.ParseLabelArg"]], "parseparametersarg (class in pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.ParseParametersArg"]], "add_density_option_group() (in module pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.add_density_option_group"]], "add_injsamples_map_opt() (in module pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.add_injsamples_map_opt"]], "add_plot_posterior_option_group() (in module pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.add_plot_posterior_option_group"]], "add_scatter_option_group() (in module pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.add_scatter_option_group"]], "arithmetic_mean_estimator() (in module pycbc.inference.evidence)": [[60, "pycbc.inference.evidence.arithmetic_mean_estimator"]], "available_tests (pycbc.inference.burn_in.baseburnintests attribute)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.available_tests"]], "available_tests (pycbc.inference.burn_in.ensemblemcmcburnintests attribute)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.available_tests"]], "burn_in_index() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.burn_in_index"]], "burn_in_index() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.burn_in_index"]], "burn_in_index() (pycbc.inference.burn_in.mcmcburnintests method)": [[60, "pycbc.inference.burn_in.MCMCBurnInTests.burn_in_index"]], "check_hist_params() (in module pycbc.inference.entropy)": [[60, "pycbc.inference.entropy.check_hist_params"]], "compute_pdf() (in module pycbc.inference.entropy)": [[60, "pycbc.inference.entropy.compute_pdf"]], "entropy() (in module pycbc.inference.entropy)": [[60, "pycbc.inference.entropy.entropy"]], "evaluate() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.evaluate"]], "evaluate() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.evaluate"]], "evaluate() (pycbc.inference.burn_in.mcmcburnintests method)": [[60, "pycbc.inference.burn_in.MCMCBurnInTests.evaluate"]], "evaluate_tests() (in module pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.evaluate_tests"]], "expected_parameters_from_cli() (in module pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.expected_parameters_from_cli"]], "from_config() (pycbc.inference.burn_in.baseburnintests class method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.from_config"]], "gelman_rubin() (in module pycbc.inference.gelman_rubin)": [[60, "pycbc.inference.gelman_rubin.gelman_rubin"]], "geweke() (in module pycbc.inference.geweke)": [[60, "pycbc.inference.geweke.geweke"]], "halfchain() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.halfchain"]], "harmonic_mean_estimator() (in module pycbc.inference.evidence)": [[60, "pycbc.inference.evidence.harmonic_mean_estimator"]], "js() (in module pycbc.inference.entropy)": [[60, "pycbc.inference.entropy.js"]], "kl() (in module pycbc.inference.entropy)": [[60, "pycbc.inference.entropy.kl"]], "ks_test() (in module pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.ks_test"]], "ks_test() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.ks_test"]], "max_posterior() (in module pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.max_posterior"]], "max_posterior() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.max_posterior"]], "max_posterior() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.max_posterior"]], "max_posterior() (pycbc.inference.burn_in.mcmcburnintests method)": [[60, "pycbc.inference.burn_in.MCMCBurnInTests.max_posterior"]], "min_iterations() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.min_iterations"]], "nacl() (in module pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.nacl"]], "nacl() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.nacl"]], "nacl() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.nacl"]], "nacl() (pycbc.inference.burn_in.mcmcburnintests method)": [[60, "pycbc.inference.burn_in.MCMCBurnInTests.nacl"]], "plot_ranges_from_cli() (in module pycbc.inference.option_utils)": [[60, "pycbc.inference.option_utils.plot_ranges_from_cli"]], "posterior_step() (in module pycbc.inference.burn_in)": [[60, "pycbc.inference.burn_in.posterior_step"]], "posterior_step() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.posterior_step"]], "posterior_step() (pycbc.inference.burn_in.ensemblemcmcburnintests method)": [[60, "pycbc.inference.burn_in.EnsembleMCMCBurnInTests.posterior_step"]], "posterior_step() (pycbc.inference.burn_in.mcmcburnintests method)": [[60, "pycbc.inference.burn_in.MCMCBurnInTests.posterior_step"]], "pycbc.inference": [[60, "module-pycbc.inference"]], "pycbc.inference.burn_in": [[60, "module-pycbc.inference.burn_in"]], "pycbc.inference.entropy": [[60, "module-pycbc.inference.entropy"]], "pycbc.inference.evidence": [[60, "module-pycbc.inference.evidence"]], "pycbc.inference.gelman_rubin": [[60, "module-pycbc.inference.gelman_rubin"]], "pycbc.inference.geweke": [[60, "module-pycbc.inference.geweke"]], "pycbc.inference.option_utils": [[60, "module-pycbc.inference.option_utils"]], "stepping_stone_algorithm() (in module pycbc.inference.evidence)": [[60, "pycbc.inference.evidence.stepping_stone_algorithm"]], "thermodynamic_integration() (in module pycbc.inference.evidence)": [[60, "pycbc.inference.evidence.thermodynamic_integration"]], "walk() (in module pycbc.inference.gelman_rubin)": [[60, "pycbc.inference.gelman_rubin.walk"]], "write() (pycbc.inference.burn_in.baseburnintests method)": [[60, "pycbc.inference.burn_in.BaseBurnInTests.write"]], "write() (pycbc.inference.burn_in.mcmcburnintests method)": [[60, "pycbc.inference.burn_in.MCMCBurnInTests.write"]], "baseinferencefile (class in pycbc.inference.io.base_hdf)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile"]], "basenestedsamplerfile (class in pycbc.inference.io.base_nested_sampler)": [[61, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile"]], "basesamplerfile (class in pycbc.inference.io.base_sampler)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile"]], "commonmcmcmetadataio (class in pycbc.inference.io.base_mcmc)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO"]], "commonmultitemperedmetadataio (class in pycbc.inference.io.base_multitemper)": [[61, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO"]], "commonnestedmetadataio (class in pycbc.inference.io.dynesty)": [[61, "pycbc.inference.io.dynesty.CommonNestedMetadataIO"]], "dynestyfile (class in pycbc.inference.io.dynesty)": [[61, "pycbc.inference.io.dynesty.DynestyFile"]], "emceefile (class in pycbc.inference.io.emcee)": [[61, "pycbc.inference.io.emcee.EmceeFile"]], "emceeptfile (class in pycbc.inference.io.emcee_pt)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile"]], "ensemblemcmcmetadataio (class in pycbc.inference.io.base_mcmc)": [[61, "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO"]], "epsiefile (class in pycbc.inference.io.epsie)": [[61, "pycbc.inference.io.epsie.EpsieFile"]], "inferencetxtfile (class in pycbc.inference.io.txt)": [[61, "pycbc.inference.io.txt.InferenceTXTFile"]], "mcmcmetadataio (class in pycbc.inference.io.base_mcmc)": [[61, "pycbc.inference.io.base_mcmc.MCMCMetadataIO"]], "multinestfile (class in pycbc.inference.io.multinest)": [[61, "pycbc.inference.io.multinest.MultinestFile"]], "noinputfileerror": [[61, "pycbc.inference.io.NoInputFileError"]], "ptemceefile (class in pycbc.inference.io.ptemcee)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile"]], "parsetempsarg (class in pycbc.inference.io.base_multitemper)": [[61, "pycbc.inference.io.base_multitemper.ParseTempsArg"]], "posteriorfile (class in pycbc.inference.io.posterior)": [[61, "pycbc.inference.io.posterior.PosteriorFile"]], "printfileparams (class in pycbc.inference.io)": [[61, "pycbc.inference.io.PrintFileParams"]], "resultsargumentparser (class in pycbc.inference.io)": [[61, "pycbc.inference.io.ResultsArgumentParser"]], "ultranestfile (class in pycbc.inference.io.ultranest)": [[61, "pycbc.inference.io.ultranest.UltranestFile"]], "acl (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.acl"]], "act (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.act"]], "actions (pycbc.inference.io.resultsargumentparser property)": [[61, "pycbc.inference.io.ResultsArgumentParser.actions"]], "add_results_option_group() (pycbc.inference.io.resultsargumentparser method)": [[61, "pycbc.inference.io.ResultsArgumentParser.add_results_option_group"]], "betas (pycbc.inference.io.emcee_pt.emceeptfile property)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile.betas"]], "betas (pycbc.inference.io.epsie.epsiefile property)": [[61, "pycbc.inference.io.epsie.EpsieFile.betas"]], "burn_in_index (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.burn_in_index"]], "burn_in_iteration (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.burn_in_iteration"]], "check_integrity() (in module pycbc.inference.io)": [[61, "pycbc.inference.io.check_integrity"]], "cmd (pycbc.inference.io.base_hdf.baseinferencefile property)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.cmd"]], "comments (pycbc.inference.io.txt.inferencetxtfile attribute)": [[61, "pycbc.inference.io.txt.InferenceTXTFile.comments"]], "config_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.config_group"]], "copy() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy"]], "copy_info() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy_info"]], "copy_metadata() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy_metadata"]], "copy_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.copy_samples"]], "data_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.data_group"]], "delimiter (pycbc.inference.io.txt.inferencetxtfile attribute)": [[61, "pycbc.inference.io.txt.InferenceTXTFile.delimiter"]], "effective_nsamples (pycbc.inference.io.base_hdf.baseinferencefile property)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.effective_nsamples"]], "ensemble_read_raw_samples() (in module pycbc.inference.io.base_mcmc)": [[61, "pycbc.inference.io.base_mcmc.ensemble_read_raw_samples"]], "ensemble_read_raw_samples() (in module pycbc.inference.io.base_multitemper)": [[61, "pycbc.inference.io.base_multitemper.ensemble_read_raw_samples"]], "extra_args_parser() (pycbc.inference.io.base_hdf.baseinferencefile static method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.extra_args_parser"]], "extra_args_parser() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio static method)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.extra_args_parser"]], "extra_args_parser() (pycbc.inference.io.base_multitemper.commonmultitemperedmetadataio static method)": [[61, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO.extra_args_parser"]], "extra_args_parser() (pycbc.inference.io.dynesty.commonnestedmetadataio static method)": [[61, "pycbc.inference.io.dynesty.CommonNestedMetadataIO.extra_args_parser"]], "format_attr() (in module pycbc.inference.io.base_hdf)": [[61, "pycbc.inference.io.base_hdf.format_attr"]], "get_common_parameters() (in module pycbc.inference.io)": [[61, "pycbc.inference.io.get_common_parameters"]], "get_file_type() (in module pycbc.inference.io)": [[61, "pycbc.inference.io.get_file_type"]], "get_slice() (pycbc.inference.io.base_hdf.baseinferencefile static method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.get_slice"]], "getattrs() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.getattrs"]], "injections_from_cli() (in module pycbc.inference.io)": [[61, "pycbc.inference.io.injections_from_cli"]], "injections_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.injections_group"]], "is_burned_in (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.is_burned_in"]], "iterations() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.iterations"]], "last_iteration() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.last_iteration"]], "loadfile() (in module pycbc.inference.io)": [[61, "pycbc.inference.io.loadfile"]], "log_evidence (pycbc.inference.io.base_hdf.baseinferencefile property)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.log_evidence"]], "name (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.name"]], "name (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile attribute)": [[61, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.name"]], "name (pycbc.inference.io.dynesty.dynestyfile attribute)": [[61, "pycbc.inference.io.dynesty.DynestyFile.name"]], "name (pycbc.inference.io.emcee.emceefile attribute)": [[61, "pycbc.inference.io.emcee.EmceeFile.name"]], "name (pycbc.inference.io.emcee_pt.emceeptfile attribute)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile.name"]], "name (pycbc.inference.io.epsie.epsiefile attribute)": [[61, "pycbc.inference.io.epsie.EpsieFile.name"]], "name (pycbc.inference.io.multinest.multinestfile attribute)": [[61, "pycbc.inference.io.multinest.MultinestFile.name"]], "name (pycbc.inference.io.posterior.posteriorfile attribute)": [[61, "pycbc.inference.io.posterior.PosteriorFile.name"]], "name (pycbc.inference.io.ptemcee.ptemceefile attribute)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.name"]], "name (pycbc.inference.io.txt.inferencetxtfile attribute)": [[61, "pycbc.inference.io.txt.InferenceTXTFile.name"]], "name (pycbc.inference.io.ultranest.ultranestfile attribute)": [[61, "pycbc.inference.io.ultranest.UltranestFile.name"]], "nchains (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.nchains"]], "nchains (pycbc.inference.io.epsie.epsiefile property)": [[61, "pycbc.inference.io.epsie.EpsieFile.nchains"]], "niterations (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.niterations"]], "niterations (pycbc.inference.io.multinest.multinestfile property)": [[61, "pycbc.inference.io.multinest.MultinestFile.niterations"]], "nsamples_in_chain() (in module pycbc.inference.io.base_mcmc)": [[61, "pycbc.inference.io.base_mcmc.nsamples_in_chain"]], "ntemps (pycbc.inference.io.base_multitemper.commonmultitemperedmetadataio property)": [[61, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO.ntemps"]], "nwalkers (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.nwalkers"]], "parse_known_args() (pycbc.inference.io.resultsargumentparser method)": [[61, "pycbc.inference.io.ResultsArgumentParser.parse_known_args"]], "parse_parameters() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.parse_parameters"]], "pycbc.inference.io": [[61, "module-pycbc.inference.io"]], "pycbc.inference.io.base_hdf": [[61, "module-pycbc.inference.io.base_hdf"]], "pycbc.inference.io.base_mcmc": [[61, "module-pycbc.inference.io.base_mcmc"]], "pycbc.inference.io.base_multitemper": [[61, "module-pycbc.inference.io.base_multitemper"]], "pycbc.inference.io.base_nested_sampler": [[61, "module-pycbc.inference.io.base_nested_sampler"]], "pycbc.inference.io.base_sampler": [[61, "module-pycbc.inference.io.base_sampler"]], "pycbc.inference.io.dynesty": [[61, "module-pycbc.inference.io.dynesty"]], "pycbc.inference.io.emcee": [[61, "module-pycbc.inference.io.emcee"]], "pycbc.inference.io.emcee_pt": [[61, "module-pycbc.inference.io.emcee_pt"]], "pycbc.inference.io.epsie": [[61, "module-pycbc.inference.io.epsie"]], "pycbc.inference.io.multinest": [[61, "module-pycbc.inference.io.multinest"]], "pycbc.inference.io.posterior": [[61, "module-pycbc.inference.io.posterior"]], "pycbc.inference.io.ptemcee": [[61, "module-pycbc.inference.io.ptemcee"]], "pycbc.inference.io.txt": [[61, "module-pycbc.inference.io.txt"]], "pycbc.inference.io.ultranest": [[61, "module-pycbc.inference.io.ultranest"]], "raw_acls (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.raw_acls"]], "raw_acts (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.raw_acts"]], "read_acceptance_fraction() (pycbc.inference.io.emcee.emceefile method)": [[61, "pycbc.inference.io.emcee.EmceeFile.read_acceptance_fraction"]], "read_acceptance_fraction() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile.read_acceptance_fraction"]], "read_acceptance_fraction() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.read_acceptance_fraction"]], "read_acceptance_rate() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.read_acceptance_rate"]], "read_acceptance_ratio() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.read_acceptance_ratio"]], "read_betas() (pycbc.inference.io.ptemcee.ptemceefile method)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.read_betas"]], "read_config_file() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_config_file"]], "read_data() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_data"]], "read_ensemble_attrs() (pycbc.inference.io.ptemcee.ptemceefile method)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.read_ensemble_attrs"]], "read_injections() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_injections"]], "read_pickled_data_from_checkpoint_file() (pycbc.inference.io.dynesty.dynestyfile method)": [[61, "pycbc.inference.io.dynesty.DynestyFile.read_pickled_data_from_checkpoint_file"]], "read_psds() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_psds"]], "read_random_state() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_random_state"]], "read_raw_samples() (in module pycbc.inference.io.base_multitemper)": [[61, "pycbc.inference.io.base_multitemper.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[61, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.dynesty.dynestyfile method)": [[61, "pycbc.inference.io.dynesty.DynestyFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.emcee.emceefile method)": [[61, "pycbc.inference.io.emcee.EmceeFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.multinest.multinestfile method)": [[61, "pycbc.inference.io.multinest.MultinestFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.posterior.posteriorfile method)": [[61, "pycbc.inference.io.posterior.PosteriorFile.read_raw_samples"]], "read_raw_samples() (pycbc.inference.io.ptemcee.ptemceefile method)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.read_raw_samples"]], "read_raw_samples_from_file() (in module pycbc.inference.io.posterior)": [[61, "pycbc.inference.io.posterior.read_raw_samples_from_file"]], "read_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.read_samples"]], "results_from_cli() (in module pycbc.inference.io)": [[61, "pycbc.inference.io.results_from_cli"]], "run_end_time (pycbc.inference.io.base_sampler.basesamplerfile property)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.run_end_time"]], "run_start_time (pycbc.inference.io.base_sampler.basesamplerfile property)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.run_start_time"]], "sampler_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.sampler_group"]], "samples_from_cli() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.samples_from_cli"]], "samples_group (pycbc.inference.io.base_hdf.baseinferencefile attribute)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.samples_group"]], "seed (pycbc.inference.io.epsie.epsiefile property)": [[61, "pycbc.inference.io.epsie.EpsieFile.seed"]], "starting_betas (pycbc.inference.io.ptemcee.ptemceefile property)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.starting_betas"]], "static_params (pycbc.inference.io.base_hdf.baseinferencefile property)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.static_params"]], "swap_interval (pycbc.inference.io.epsie.epsiefile property)": [[61, "pycbc.inference.io.epsie.EpsieFile.swap_interval"]], "thin() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.thin"]], "thin() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.thin"]], "thin_end (pycbc.inference.io.base_hdf.baseinferencefile property)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.thin_end"]], "thin_interval (pycbc.inference.io.base_hdf.baseinferencefile property)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.thin_interval"]], "thin_interval (pycbc.inference.io.base_mcmc.ensemblemcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO.thin_interval"]], "thin_interval (pycbc.inference.io.base_mcmc.mcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.MCMCMetadataIO.thin_interval"]], "thin_samples_for_writing() (in module pycbc.inference.io.base_mcmc)": [[61, "pycbc.inference.io.base_mcmc.thin_samples_for_writing"]], "thin_start (pycbc.inference.io.base_hdf.baseinferencefile property)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.thin_start"]], "thin_start (pycbc.inference.io.base_mcmc.ensemblemcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.EnsembleMCMCMetadataIO.thin_start"]], "thin_start (pycbc.inference.io.base_mcmc.mcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.MCMCMetadataIO.thin_start"]], "thinned_by (pycbc.inference.io.base_mcmc.commonmcmcmetadataio property)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.thinned_by"]], "update_checkpoint_history() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.update_checkpoint_history"]], "validate() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.validate"]], "validate() (pycbc.inference.io.dynesty.dynestyfile method)": [[61, "pycbc.inference.io.dynesty.DynestyFile.validate"]], "validate() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.validate"]], "validate_checkpoint_files() (in module pycbc.inference.io)": [[61, "pycbc.inference.io.validate_checkpoint_files"]], "write() (pycbc.inference.io.txt.inferencetxtfile class method)": [[61, "pycbc.inference.io.txt.InferenceTXTFile.write"]], "write_acceptance_fraction() (pycbc.inference.io.emcee.emceefile method)": [[61, "pycbc.inference.io.emcee.EmceeFile.write_acceptance_fraction"]], "write_acceptance_fraction() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile.write_acceptance_fraction"]], "write_acceptance_ratio() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.write_acceptance_ratio"]], "write_betas() (pycbc.inference.io.ptemcee.ptemceefile method)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.write_betas"]], "write_command_line() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_command_line"]], "write_config_file() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_config_file"]], "write_data() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_data"]], "write_effective_nsamples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_effective_nsamples"]], "write_ensemble_attrs() (pycbc.inference.io.ptemcee.ptemceefile method)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.write_ensemble_attrs"]], "write_injections() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_injections"]], "write_kwargs_to_attrs() (pycbc.inference.io.base_hdf.baseinferencefile class method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_kwargs_to_attrs"]], "write_logevidence() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_logevidence"]], "write_logevidence() (pycbc.inference.io.multinest.multinestfile method)": [[61, "pycbc.inference.io.multinest.MultinestFile.write_logevidence"]], "write_niterations() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.write_niterations"]], "write_niterations() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[61, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_niterations"]], "write_niterations() (pycbc.inference.io.multinest.multinestfile method)": [[61, "pycbc.inference.io.multinest.MultinestFile.write_niterations"]], "write_pickled_data_into_checkpoint_file() (pycbc.inference.io.dynesty.dynestyfile method)": [[61, "pycbc.inference.io.dynesty.DynestyFile.write_pickled_data_into_checkpoint_file"]], "write_psd() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_psd"]], "write_random_state() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_random_state"]], "write_raw_samples() (pycbc.inference.io.dynesty.dynestyfile method)": [[61, "pycbc.inference.io.dynesty.DynestyFile.write_raw_samples"]], "write_resume_point() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.write_resume_point"]], "write_resume_point() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[61, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_resume_point"]], "write_resume_point() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_resume_point"]], "write_resume_point() (pycbc.inference.io.multinest.multinestfile method)": [[61, "pycbc.inference.io.multinest.MultinestFile.write_resume_point"]], "write_resume_point() (pycbc.inference.io.posterior.posteriorfile method)": [[61, "pycbc.inference.io.posterior.PosteriorFile.write_resume_point"]], "write_run_end_time() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_run_end_time"]], "write_run_end_time() (pycbc.inference.io.posterior.posteriorfile method)": [[61, "pycbc.inference.io.posterior.PosteriorFile.write_run_end_time"]], "write_run_start_time() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_run_start_time"]], "write_run_start_time() (pycbc.inference.io.posterior.posteriorfile method)": [[61, "pycbc.inference.io.posterior.PosteriorFile.write_run_start_time"]], "write_sampler_metadata() (pycbc.inference.io.base_mcmc.commonmcmcmetadataio method)": [[61, "pycbc.inference.io.base_mcmc.CommonMCMCMetadataIO.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.base_multitemper.commonmultitemperedmetadataio method)": [[61, "pycbc.inference.io.base_multitemper.CommonMultiTemperedMetadataIO.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[61, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.base_sampler.basesamplerfile method)": [[61, "pycbc.inference.io.base_sampler.BaseSamplerFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.multinest.multinestfile method)": [[61, "pycbc.inference.io.multinest.MultinestFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.posterior.posteriorfile method)": [[61, "pycbc.inference.io.posterior.PosteriorFile.write_sampler_metadata"]], "write_sampler_metadata() (pycbc.inference.io.ptemcee.ptemceefile method)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.write_sampler_metadata"]], "write_samples() (in module pycbc.inference.io.base_mcmc)": [[61, "pycbc.inference.io.base_mcmc.write_samples"]], "write_samples() (in module pycbc.inference.io.base_multitemper)": [[61, "pycbc.inference.io.base_multitemper.write_samples"]], "write_samples() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_samples"]], "write_samples() (pycbc.inference.io.base_nested_sampler.basenestedsamplerfile method)": [[61, "pycbc.inference.io.base_nested_sampler.BaseNestedSamplerFile.write_samples"]], "write_samples() (pycbc.inference.io.emcee.emceefile method)": [[61, "pycbc.inference.io.emcee.EmceeFile.write_samples"]], "write_samples() (pycbc.inference.io.emcee_pt.emceeptfile method)": [[61, "pycbc.inference.io.emcee_pt.EmceePTFile.write_samples"]], "write_samples() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.write_samples"]], "write_samples() (pycbc.inference.io.multinest.multinestfile method)": [[61, "pycbc.inference.io.multinest.MultinestFile.write_samples"]], "write_samples() (pycbc.inference.io.posterior.posteriorfile method)": [[61, "pycbc.inference.io.posterior.PosteriorFile.write_samples"]], "write_samples() (pycbc.inference.io.ptemcee.ptemceefile method)": [[61, "pycbc.inference.io.ptemcee.PTEmceeFile.write_samples"]], "write_samples_to_file() (in module pycbc.inference.io.posterior)": [[61, "pycbc.inference.io.posterior.write_samples_to_file"]], "write_stilde() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_stilde"]], "write_strain() (pycbc.inference.io.base_hdf.baseinferencefile method)": [[61, "pycbc.inference.io.base_hdf.BaseInferenceFile.write_strain"]], "write_temperature_data() (pycbc.inference.io.epsie.epsiefile method)": [[61, "pycbc.inference.io.epsie.EpsieFile.write_temperature_data"]], "epsieatadaptiveangular (class in pycbc.inference.jump.angular)": [[62, "pycbc.inference.jump.angular.EpsieATAdaptiveAngular"]], "epsieatadaptiveboundednormal (class in pycbc.inference.jump.bounded_normal)": [[62, "pycbc.inference.jump.bounded_normal.EpsieATAdaptiveBoundedNormal"]], "epsieatadaptivenormal (class in pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.EpsieATAdaptiveNormal"]], "epsieadaptiveangular (class in pycbc.inference.jump.angular)": [[62, "pycbc.inference.jump.angular.EpsieAdaptiveAngular"]], "epsieadaptiveboundeddiscrete (class in pycbc.inference.jump.discrete)": [[62, "pycbc.inference.jump.discrete.EpsieAdaptiveBoundedDiscrete"]], "epsieadaptiveboundednormal (class in pycbc.inference.jump.bounded_normal)": [[62, "pycbc.inference.jump.bounded_normal.EpsieAdaptiveBoundedNormal"]], "epsieadaptivenormal (class in pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.EpsieAdaptiveNormal"]], "epsieadaptivenormaldiscrete (class in pycbc.inference.jump.discrete)": [[62, "pycbc.inference.jump.discrete.EpsieAdaptiveNormalDiscrete"]], "epsieangular (class in pycbc.inference.jump.angular)": [[62, "pycbc.inference.jump.angular.EpsieAngular"]], "epsieboundeddiscrete (class in pycbc.inference.jump.discrete)": [[62, "pycbc.inference.jump.discrete.EpsieBoundedDiscrete"]], "epsieboundednormal (class in pycbc.inference.jump.bounded_normal)": [[62, "pycbc.inference.jump.bounded_normal.EpsieBoundedNormal"]], "epsienormal (class in pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.EpsieNormal"]], "epsienormaldiscrete (class in pycbc.inference.jump.discrete)": [[62, "pycbc.inference.jump.discrete.EpsieNormalDiscrete"]], "epsie_adaptive_from_config() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.epsie_adaptive_from_config"]], "epsie_at_adaptive_from_config() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.epsie_at_adaptive_from_config"]], "epsie_from_config() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.epsie_from_config"]], "epsie_proposals_from_config() (in module pycbc.inference.jump)": [[62, "pycbc.inference.jump.epsie_proposals_from_config"]], "from_config() (pycbc.inference.jump.angular.epsieatadaptiveangular class method)": [[62, "pycbc.inference.jump.angular.EpsieATAdaptiveAngular.from_config"]], "from_config() (pycbc.inference.jump.angular.epsieadaptiveangular class method)": [[62, "pycbc.inference.jump.angular.EpsieAdaptiveAngular.from_config"]], "from_config() (pycbc.inference.jump.angular.epsieangular class method)": [[62, "pycbc.inference.jump.angular.EpsieAngular.from_config"]], "from_config() (pycbc.inference.jump.bounded_normal.epsieatadaptiveboundednormal class method)": [[62, "pycbc.inference.jump.bounded_normal.EpsieATAdaptiveBoundedNormal.from_config"]], "from_config() (pycbc.inference.jump.bounded_normal.epsieadaptiveboundednormal class method)": [[62, "pycbc.inference.jump.bounded_normal.EpsieAdaptiveBoundedNormal.from_config"]], "from_config() (pycbc.inference.jump.bounded_normal.epsieboundednormal class method)": [[62, "pycbc.inference.jump.bounded_normal.EpsieBoundedNormal.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsieadaptiveboundeddiscrete class method)": [[62, "pycbc.inference.jump.discrete.EpsieAdaptiveBoundedDiscrete.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsieadaptivenormaldiscrete class method)": [[62, "pycbc.inference.jump.discrete.EpsieAdaptiveNormalDiscrete.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsieboundeddiscrete class method)": [[62, "pycbc.inference.jump.discrete.EpsieBoundedDiscrete.from_config"]], "from_config() (pycbc.inference.jump.discrete.epsienormaldiscrete class method)": [[62, "pycbc.inference.jump.discrete.EpsieNormalDiscrete.from_config"]], "from_config() (pycbc.inference.jump.normal.epsieatadaptivenormal class method)": [[62, "pycbc.inference.jump.normal.EpsieATAdaptiveNormal.from_config"]], "from_config() (pycbc.inference.jump.normal.epsieadaptivenormal class method)": [[62, "pycbc.inference.jump.normal.EpsieAdaptiveNormal.from_config"]], "from_config() (pycbc.inference.jump.normal.epsienormal class method)": [[62, "pycbc.inference.jump.normal.EpsieNormal.from_config"]], "get_epsie_adaptation_settings() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.get_epsie_adaptation_settings"]], "get_epsie_discrete_successive_settings() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.get_epsie_discrete_successive_settings"]], "get_param_boundaries() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.get_param_boundaries"]], "get_variance() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.get_variance"]], "load_opts() (in module pycbc.inference.jump.normal)": [[62, "pycbc.inference.jump.normal.load_opts"]], "pycbc.inference.jump": [[62, "module-pycbc.inference.jump"]], "pycbc.inference.jump.angular": [[62, "module-pycbc.inference.jump.angular"]], "pycbc.inference.jump.bounded_normal": [[62, "module-pycbc.inference.jump.bounded_normal"]], "pycbc.inference.jump.discrete": [[62, "module-pycbc.inference.jump.discrete"]], "pycbc.inference.jump.normal": [[62, "module-pycbc.inference.jump.normal"]], "basedatamodel (class in pycbc.inference.models.base_data)": [[63, "pycbc.inference.models.base_data.BaseDataModel"]], "basegatedgaussian (class in pycbc.inference.models.gated_gaussian_noise)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian"]], "basegaussiannoise (class in pycbc.inference.models.gaussian_noise)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise"]], "basemodel (class in pycbc.inference.models.base)": [[63, "pycbc.inference.models.base.BaseModel"]], "brutelisaskymodesmarginalize (class in pycbc.inference.models.brute_marg)": [[63, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize"]], "bruteparallelgaussianmarginalize (class in pycbc.inference.models.brute_marg)": [[63, "pycbc.inference.models.brute_marg.BruteParallelGaussianMarginalize"]], "callmodel (class in pycbc.inference.models)": [[63, "pycbc.inference.models.CallModel"]], "distmarg (class in pycbc.inference.models.tools)": [[63, "pycbc.inference.models.tools.DistMarg"]], "gatedgaussianmargpol (class in pycbc.inference.models.gated_gaussian_noise)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol"]], "gatedgaussiannoise (class in pycbc.inference.models.gated_gaussian_noise)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise"]], "gaussiannoise (class in pycbc.inference.models.gaussian_noise)": [[63, "pycbc.inference.models.gaussian_noise.GaussianNoise"]], "hierarchicalmodel (class in pycbc.inference.models.hierarchical)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel"]], "hierarchicalparam (class in pycbc.inference.models.hierarchical)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam"]], "marginalizedhmpolphase (class in pycbc.inference.models.marginalized_gaussian_noise)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase"]], "marginalizedphasegaussiannoise (class in pycbc.inference.models.marginalized_gaussian_noise)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPhaseGaussianNoise"]], "marginalizedpolarization (class in pycbc.inference.models.marginalized_gaussian_noise)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPolarization"]], "marginalizedtime (class in pycbc.inference.models.marginalized_gaussian_noise)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedTime"]], "modelstats (class in pycbc.inference.models.base)": [[63, "pycbc.inference.models.base.ModelStats"]], "multisignalmodel (class in pycbc.inference.models.hierarchical)": [[63, "pycbc.inference.models.hierarchical.MultiSignalModel"]], "novaliddataerror": [[63, "pycbc.inference.models.data_utils.NoValidDataError"]], "relative (class in pycbc.inference.models.relbin)": [[63, "pycbc.inference.models.relbin.Relative"]], "relativetime (class in pycbc.inference.models.relbin)": [[63, "pycbc.inference.models.relbin.RelativeTime"]], "relativetimedom (class in pycbc.inference.models.relbin)": [[63, "pycbc.inference.models.relbin.RelativeTimeDom"]], "samplingtransforms (class in pycbc.inference.models.base)": [[63, "pycbc.inference.models.base.SamplingTransforms"]], "singletemplate (class in pycbc.inference.models.single_template)": [[63, "pycbc.inference.models.single_template.SingleTemplate"]], "testeggbox (class in pycbc.inference.models.analytic)": [[63, "pycbc.inference.models.analytic.TestEggbox"]], "testnormal (class in pycbc.inference.models.analytic)": [[63, "pycbc.inference.models.analytic.TestNormal"]], "testposterior (class in pycbc.inference.models.analytic)": [[63, "pycbc.inference.models.analytic.TestPosterior"]], "testprior (class in pycbc.inference.models.analytic)": [[63, "pycbc.inference.models.analytic.TestPrior"]], "testrosenbrock (class in pycbc.inference.models.analytic)": [[63, "pycbc.inference.models.analytic.TestRosenbrock"]], "testvolcano (class in pycbc.inference.models.analytic)": [[63, "pycbc.inference.models.analytic.TestVolcano"]], "apply() (pycbc.inference.models.base.samplingtransforms method)": [[63, "pycbc.inference.models.base.SamplingTransforms.apply"]], "available_models() (in module pycbc.inference.models)": [[63, "pycbc.inference.models.available_models"]], "calculate_hihjs() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.calculate_hihjs"]], "calculate_hihjs() (pycbc.inference.models.single_template.singletemplate method)": [[63, "pycbc.inference.models.single_template.SingleTemplate.calculate_hihjs"]], "check_for_cartesian_spins() (in module pycbc.inference.models.base)": [[63, "pycbc.inference.models.base.check_for_cartesian_spins"]], "check_for_nans() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.check_for_nans"]], "check_validtimes() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.check_validtimes"]], "combine_layout() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.combine_layout"]], "create_data_parser() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.create_data_parser"]], "create_waveform_generator() (in module pycbc.inference.models.gaussian_noise)": [[63, "pycbc.inference.models.gaussian_noise.create_waveform_generator"]], "current_params (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.current_params"]], "current_params (pycbc.inference.models.tools.distmarg property)": [[63, "pycbc.inference.models.tools.DistMarg.current_params"]], "current_stats (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.current_stats"]], "data (pycbc.inference.models.base_data.basedatamodel property)": [[63, "pycbc.inference.models.base_data.BaseDataModel.data"]], "data (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.data"]], "data_from_cli() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.data_from_cli"]], "data_opts_from_config() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.data_opts_from_config"]], "default_stats (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.default_stats"]], "delim (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam.delim"]], "det_cplx_loglr() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.GaussianNoise.det_cplx_loglr"]], "det_lognl() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.det_lognl"]], "det_lognl() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.det_lognl"]], "det_lognorm() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.det_lognorm"]], "det_lognorm() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.det_lognorm"]], "det_optimal_snrsq() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.GaussianNoise.det_optimal_snrsq"]], "detectors (pycbc.inference.models.base_data.basedatamodel property)": [[63, "pycbc.inference.models.base_data.BaseDataModel.detectors"]], "detectors_with_valid_data() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.detectors_with_valid_data"]], "distance_interpolator (pycbc.inference.models.tools.distmarg attribute)": [[63, "pycbc.inference.models.tools.DistMarg.distance_interpolator"]], "distance_marginalization (pycbc.inference.models.tools.distmarg attribute)": [[63, "pycbc.inference.models.tools.DistMarg.distance_marginalization"]], "draw_ifos() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.draw_ifos"]], "draw_sample() (in module pycbc.inference.models.tools)": [[63, "pycbc.inference.models.tools.draw_sample"]], "draw_sky_times() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.draw_sky_times"]], "draw_times() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.draw_times"]], "extra_args_from_config() (pycbc.inference.models.base.basemodel static method)": [[63, "pycbc.inference.models.base.BaseModel.extra_args_from_config"]], "extra_args_from_config() (pycbc.inference.models.relbin.relative static method)": [[63, "pycbc.inference.models.relbin.Relative.extra_args_from_config"]], "fd_data_from_strain_dict() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.fd_data_from_strain_dict"]], "from_config() (pycbc.inference.models.base.basemodel class method)": [[63, "pycbc.inference.models.base.BaseModel.from_config"]], "from_config() (pycbc.inference.models.base.samplingtransforms class method)": [[63, "pycbc.inference.models.base.SamplingTransforms.from_config"]], "from_config() (pycbc.inference.models.brute_marg.brutelisaskymodesmarginalize class method)": [[63, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize.from_config"]], "from_config() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian class method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.from_config"]], "from_config() (pycbc.inference.models.gaussian_noise.basegaussiannoise class method)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.from_config"]], "from_config() (pycbc.inference.models.hierarchical.hierarchicalmodel class method)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel.from_config"]], "from_subname() (pycbc.inference.models.hierarchical.hierarchicalparam class method)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam.from_subname"]], "fullname (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam.fullname"]], "gate_overwhitened_data() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.gate_overwhitened_data"]], "get_current_stats() (pycbc.inference.models.base.basemodel method)": [[63, "pycbc.inference.models.base.BaseModel.get_current_stats"]], "get_data() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_data"]], "get_gate_times() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gate_times"]], "get_gate_times_hmeco() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gate_times_hmeco"]], "get_gated_data() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gated_data"]], "get_gated_residuals() (pycbc.inference.models.gated_gaussian_noise.gatedgaussiannoise method)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise.get_gated_residuals"]], "get_gated_waveforms() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_gated_waveforms"]], "get_gated_waveforms() (pycbc.inference.models.gated_gaussian_noise.gatedgaussianmargpol method)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol.get_gated_waveforms"]], "get_gated_waveforms() (pycbc.inference.models.gated_gaussian_noise.gatedgaussiannoise method)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise.get_gated_waveforms"]], "get_model() (in module pycbc.inference.models)": [[63, "pycbc.inference.models.get_model"]], "get_models() (in module pycbc.inference.models)": [[63, "pycbc.inference.models.get_models"]], "get_precalc_antenna_factors() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.get_precalc_antenna_factors"]], "get_residuals() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_residuals"]], "get_snr() (pycbc.inference.models.relbin.relativetime method)": [[63, "pycbc.inference.models.relbin.RelativeTime.get_snr"]], "get_snr() (pycbc.inference.models.relbin.relativetimedom method)": [[63, "pycbc.inference.models.relbin.RelativeTimeDom.get_snr"]], "get_values_from_injection() (in module pycbc.inference.models.gaussian_noise)": [[63, "pycbc.inference.models.gaussian_noise.get_values_from_injection"]], "get_waveforms() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.get_waveforms"]], "get_waveforms() (pycbc.inference.models.gated_gaussian_noise.gatedgaussianmargpol method)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol.get_waveforms"]], "get_waveforms() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.GaussianNoise.get_waveforms"]], "get_waveforms() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.get_waveforms"]], "getstats() (pycbc.inference.models.base.modelstats method)": [[63, "pycbc.inference.models.base.ModelStats.getstats"]], "getstatsdict() (pycbc.inference.models.base.modelstats method)": [[63, "pycbc.inference.models.base.ModelStats.getstatsdict"]], "high_frequency_cutoff (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.high_frequency_cutoff"]], "hpiter() (in module pycbc.inference.models.hierarchical)": [[63, "pycbc.inference.models.hierarchical.hpiter"]], "hstatic_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel.hstatic_params"]], "hvariable_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel.hvariable_params"]], "ignore_failed_waveforms (pycbc.inference.models.gaussian_noise.basegaussiannoise attribute)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.ignore_failed_waveforms"]], "init_from_frequencies() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.init_from_frequencies"]], "kmax (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.kmax"]], "kmin (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.kmin"]], "likelihood_function (pycbc.inference.models.relbin.relative property)": [[63, "pycbc.inference.models.relbin.Relative.likelihood_function"]], "likelihood_parts() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts"]], "likelihood_parts_det() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_det"]], "likelihood_parts_multi() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_multi"]], "likelihood_parts_multi_v() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_multi_v"]], "likelihood_parts_v() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_v"]], "likelihood_parts_v_pol() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_v_pol"]], "likelihood_parts_v_pol_time() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_v_pol_time"]], "likelihood_parts_v_time() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_v_time"]], "likelihood_parts_vector() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_vector"]], "likelihood_parts_vectorp() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_vectorp"]], "likelihood_parts_vectort() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.likelihood_parts_vectort"]], "likelihood_wrapper (class in pycbc.inference.models.brute_marg)": [[63, "pycbc.inference.models.brute_marg.likelihood_wrapper"]], "logjacobian (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.logjacobian"]], "logjacobian() (pycbc.inference.models.base.samplingtransforms method)": [[63, "pycbc.inference.models.base.SamplingTransforms.logjacobian"]], "loglikelihood (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.loglikelihood"]], "loglr (pycbc.inference.models.base_data.basedatamodel property)": [[63, "pycbc.inference.models.base_data.BaseDataModel.loglr"]], "lognl (pycbc.inference.models.base_data.basedatamodel property)": [[63, "pycbc.inference.models.base_data.BaseDataModel.lognl"]], "lognorm (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.lognorm"]], "logplr (pycbc.inference.models.base_data.basedatamodel property)": [[63, "pycbc.inference.models.base_data.BaseDataModel.logplr"]], "logposterior (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.logposterior"]], "logprior (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.logprior"]], "low_frequency_cutoff (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.low_frequency_cutoff"]], "map_params() (in module pycbc.inference.models.hierarchical)": [[63, "pycbc.inference.models.hierarchical.map_params"]], "marginalize_likelihood() (in module pycbc.inference.models.tools)": [[63, "pycbc.inference.models.tools.marginalize_likelihood"]], "marginalize_loglr() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.marginalize_loglr"]], "marginalize_phase (pycbc.inference.models.tools.distmarg attribute)": [[63, "pycbc.inference.models.tools.DistMarg.marginalize_phase"]], "max_curvature_from_reference() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.max_curvature_from_reference"]], "model_delim (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam.model_delim"]], "models (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam.models"]], "multi_loglikelihood() (pycbc.inference.models.gaussian_noise.gaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.GaussianNoise.multi_loglikelihood"]], "multi_loglikelihood() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.multi_loglikelihood"]], "multi_loglikelihood() (pycbc.inference.models.single_template.singletemplate method)": [[63, "pycbc.inference.models.single_template.SingleTemplate.multi_loglikelihood"]], "multi_signal_support (pycbc.inference.models.gaussian_noise.gaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.GaussianNoise.multi_signal_support"]], "multi_signal_support (pycbc.inference.models.relbin.relative property)": [[63, "pycbc.inference.models.relbin.Relative.multi_signal_support"]], "multi_signal_support (pycbc.inference.models.single_template.singletemplate property)": [[63, "pycbc.inference.models.single_template.SingleTemplate.multi_signal_support"]], "name (pycbc.inference.models.analytic.testeggbox attribute)": [[63, "pycbc.inference.models.analytic.TestEggbox.name"]], "name (pycbc.inference.models.analytic.testnormal attribute)": [[63, "pycbc.inference.models.analytic.TestNormal.name"]], "name (pycbc.inference.models.analytic.testposterior attribute)": [[63, "pycbc.inference.models.analytic.TestPosterior.name"]], "name (pycbc.inference.models.analytic.testprior attribute)": [[63, "pycbc.inference.models.analytic.TestPrior.name"]], "name (pycbc.inference.models.analytic.testrosenbrock attribute)": [[63, "pycbc.inference.models.analytic.TestRosenbrock.name"]], "name (pycbc.inference.models.analytic.testvolcano attribute)": [[63, "pycbc.inference.models.analytic.TestVolcano.name"]], "name (pycbc.inference.models.base.basemodel attribute)": [[63, "pycbc.inference.models.base.BaseModel.name"]], "name (pycbc.inference.models.brute_marg.brutelisaskymodesmarginalize attribute)": [[63, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize.name"]], "name (pycbc.inference.models.brute_marg.bruteparallelgaussianmarginalize attribute)": [[63, "pycbc.inference.models.brute_marg.BruteParallelGaussianMarginalize.name"]], "name (pycbc.inference.models.gated_gaussian_noise.gatedgaussianmargpol attribute)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianMargPol.name"]], "name (pycbc.inference.models.gated_gaussian_noise.gatedgaussiannoise attribute)": [[63, "pycbc.inference.models.gated_gaussian_noise.GatedGaussianNoise.name"]], "name (pycbc.inference.models.gaussian_noise.gaussiannoise attribute)": [[63, "pycbc.inference.models.gaussian_noise.GaussianNoise.name"]], "name (pycbc.inference.models.hierarchical.hierarchicalmodel attribute)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel.name"]], "name (pycbc.inference.models.hierarchical.multisignalmodel attribute)": [[63, "pycbc.inference.models.hierarchical.MultiSignalModel.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedhmpolphase attribute)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedphasegaussiannoise attribute)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPhaseGaussianNoise.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedpolarization attribute)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedPolarization.name"]], "name (pycbc.inference.models.marginalized_gaussian_noise.marginalizedtime attribute)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedTime.name"]], "name (pycbc.inference.models.relbin.relative attribute)": [[63, "pycbc.inference.models.relbin.Relative.name"]], "name (pycbc.inference.models.relbin.relativetime attribute)": [[63, "pycbc.inference.models.relbin.RelativeTime.name"]], "name (pycbc.inference.models.relbin.relativetimedom attribute)": [[63, "pycbc.inference.models.relbin.RelativeTimeDom.name"]], "name (pycbc.inference.models.single_template.singletemplate attribute)": [[63, "pycbc.inference.models.single_template.SingleTemplate.name"]], "normalize (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.normalize"]], "normalize (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.normalize"]], "parse() (pycbc.inference.models.hierarchical.hierarchicalparam class method)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam.parse"]], "phase_fac() (pycbc.inference.models.marginalized_gaussian_noise.marginalizedhmpolphase method)": [[63, "pycbc.inference.models.marginalized_gaussian_noise.MarginalizedHMPolPhase.phase_fac"]], "premarg_draw() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.premarg_draw"]], "prior_from_config() (pycbc.inference.models.base.basemodel static method)": [[63, "pycbc.inference.models.base.BaseModel.prior_from_config"]], "prior_rvs() (pycbc.inference.models.base.basemodel method)": [[63, "pycbc.inference.models.base.BaseModel.prior_rvs"]], "psd_segments (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.psd_segments"]], "psds (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.psds"]], "psds (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.psds"]], "pycbc.inference.models": [[63, "module-pycbc.inference.models"]], "pycbc.inference.models.analytic": [[63, "module-pycbc.inference.models.analytic"]], "pycbc.inference.models.base": [[63, "module-pycbc.inference.models.base"]], "pycbc.inference.models.base_data": [[63, "module-pycbc.inference.models.base_data"]], "pycbc.inference.models.brute_marg": [[63, "module-pycbc.inference.models.brute_marg"]], "pycbc.inference.models.data_utils": [[63, "module-pycbc.inference.models.data_utils"]], "pycbc.inference.models.gated_gaussian_noise": [[63, "module-pycbc.inference.models.gated_gaussian_noise"]], "pycbc.inference.models.gaussian_noise": [[63, "module-pycbc.inference.models.gaussian_noise"]], "pycbc.inference.models.hierarchical": [[63, "module-pycbc.inference.models.hierarchical"]], "pycbc.inference.models.marginalized_gaussian_noise": [[63, "module-pycbc.inference.models.marginalized_gaussian_noise"]], "pycbc.inference.models.relbin": [[63, "module-pycbc.inference.models.relbin"]], "pycbc.inference.models.relbin_cpu": [[63, "module-pycbc.inference.models.relbin_cpu"]], "pycbc.inference.models.single_template": [[63, "module-pycbc.inference.models.single_template"]], "pycbc.inference.models.tools": [[63, "module-pycbc.inference.models.tools"]], "read_from_config() (in module pycbc.inference.models)": [[63, "pycbc.inference.models.read_from_config"]], "read_sampling_params_from_config() (in module pycbc.inference.models.base)": [[63, "pycbc.inference.models.base.read_sampling_params_from_config"]], "reconstruct() (pycbc.inference.models.brute_marg.brutelisaskymodesmarginalize method)": [[63, "pycbc.inference.models.brute_marg.BruteLISASkyModesMarginalize.reconstruct"]], "reconstruct() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.reconstruct"]], "ref_snr (pycbc.inference.models.relbin.relativetime property)": [[63, "pycbc.inference.models.relbin.RelativeTime.ref_snr"]], "register_model() (in module pycbc.inference.models)": [[63, "pycbc.inference.models.register_model"]], "reset_vector_params() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.reset_vector_params"]], "sampling_params (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.sampling_params"]], "set_psd_segments() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.set_psd_segments"]], "setup_antenna() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.setup_antenna"]], "setup_bins() (in module pycbc.inference.models.relbin)": [[63, "pycbc.inference.models.relbin.setup_bins"]], "setup_distance_marg_interpolant() (in module pycbc.inference.models.tools)": [[63, "pycbc.inference.models.tools.setup_distance_marg_interpolant"]], "setup_marginalization() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.setup_marginalization"]], "setup_peak_lock() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.setup_peak_lock"]], "snr_draw() (pycbc.inference.models.tools.distmarg method)": [[63, "pycbc.inference.models.tools.DistMarg.snr_draw"]], "snr_predictor() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.snr_predictor"]], "snr_predictor_dom() (in module pycbc.inference.models.relbin_cpu)": [[63, "pycbc.inference.models.relbin_cpu.snr_predictor_dom"]], "static_params (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.static_params"]], "static_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel.static_params"]], "statnames (pycbc.inference.models.base.modelstats property)": [[63, "pycbc.inference.models.base.ModelStats.statnames"]], "str_to_bool() (in module pycbc.inference.models.tools)": [[63, "pycbc.inference.models.tools.str_to_bool"]], "str_to_tuple() (in module pycbc.inference.models.tools)": [[63, "pycbc.inference.models.tools.str_to_tuple"]], "strain_from_cli_multi_ifos() (in module pycbc.inference.models.data_utils)": [[63, "pycbc.inference.models.data_utils.strain_from_cli_multi_ifos"]], "subname (pycbc.inference.models.hierarchical.hierarchicalparam attribute)": [[63, "pycbc.inference.models.hierarchical.HierarchicalParam.subname"]], "summary_product() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.summary_product"]], "td_data (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian property)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.td_data"]], "update() (pycbc.inference.models.base.basemodel method)": [[63, "pycbc.inference.models.base.BaseModel.update"]], "update() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.update"]], "variable_params (pycbc.inference.models.base.basemodel property)": [[63, "pycbc.inference.models.base.BaseModel.variable_params"]], "variable_params (pycbc.inference.models.hierarchical.hierarchicalmodel property)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel.variable_params"]], "weight (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.weight"]], "whiten() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.whiten"]], "whitened_data (pycbc.inference.models.gaussian_noise.basegaussiannoise property)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.whitened_data"]], "write_metadata() (pycbc.inference.models.base.basemodel method)": [[63, "pycbc.inference.models.base.BaseModel.write_metadata"]], "write_metadata() (pycbc.inference.models.base_data.basedatamodel method)": [[63, "pycbc.inference.models.base_data.BaseDataModel.write_metadata"]], "write_metadata() (pycbc.inference.models.gated_gaussian_noise.basegatedgaussian method)": [[63, "pycbc.inference.models.gated_gaussian_noise.BaseGatedGaussian.write_metadata"]], "write_metadata() (pycbc.inference.models.gaussian_noise.basegaussiannoise method)": [[63, "pycbc.inference.models.gaussian_noise.BaseGaussianNoise.write_metadata"]], "write_metadata() (pycbc.inference.models.hierarchical.hierarchicalmodel method)": [[63, "pycbc.inference.models.hierarchical.HierarchicalModel.write_metadata"]], "write_metadata() (pycbc.inference.models.hierarchical.multisignalmodel method)": [[63, "pycbc.inference.models.hierarchical.MultiSignalModel.write_metadata"]], "write_metadata() (pycbc.inference.models.relbin.relative method)": [[63, "pycbc.inference.models.relbin.Relative.write_metadata"]], "basemcmc (class in pycbc.inference.sampler.base_mcmc)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC"]], "basesampler (class in pycbc.inference.sampler.base)": [[64, "pycbc.inference.sampler.base.BaseSampler"]], "cubemodel (class in pycbc.inference.sampler.base_cube)": [[64, "pycbc.inference.sampler.base_cube.CubeModel"]], "dummysampler (class in pycbc.inference.sampler.dummy)": [[64, "pycbc.inference.sampler.dummy.DummySampler"]], "dynestysampler (class in pycbc.inference.sampler.dynesty)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler"]], "emceeensemblesampler (class in pycbc.inference.sampler.emcee)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler"]], "emceeptsampler (class in pycbc.inference.sampler.emcee_pt)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler"]], "ensemblesupport (class in pycbc.inference.sampler.base_mcmc)": [[64, "pycbc.inference.sampler.base_mcmc.EnsembleSupport"]], "epsiesampler (class in pycbc.inference.sampler.epsie)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler"]], "multitemperedsupport (class in pycbc.inference.sampler.base_multitemper)": [[64, "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport"]], "multinestsampler (class in pycbc.inference.sampler.multinest)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler"]], "ptemceesampler (class in pycbc.inference.sampler.ptemcee)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler"]], "ultranestsampler (class in pycbc.inference.sampler.ultranest)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler"]], "acl (pycbc.inference.sampler.base_mcmc.ensemblesupport property)": [[64, "pycbc.inference.sampler.base_mcmc.EnsembleSupport.acl"]], "acl (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.acl"]], "acl() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.acl"]], "acl_from_raw_acls() (in module pycbc.inference.sampler.base_multitemper)": [[64, "pycbc.inference.sampler.base_multitemper.acl_from_raw_acls"]], "act (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.act"]], "adaptation_lag (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.adaptation_lag"]], "adaptation_time (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.adaptation_time"]], "adaptive (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.adaptive"]], "base_shape (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.base_shape"]], "base_shape (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.base_shape"]], "base_shape (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.base_shape"]], "base_shape (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.base_shape"]], "base_shape (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.base_shape"]], "betas (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.betas"]], "betas (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.betas"]], "betas (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.betas"]], "betas_from_config() (pycbc.inference.sampler.base_multitemper.multitemperedsupport static method)": [[64, "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport.betas_from_config"]], "blob_data_to_dict() (in module pycbc.inference.sampler.base_mcmc)": [[64, "pycbc.inference.sampler.base_mcmc.blob_data_to_dict"]], "burn_in (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.burn_in"]], "burn_in_class (pycbc.inference.sampler.emcee.emceeensemblesampler attribute)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.burn_in_class"]], "burn_in_class (pycbc.inference.sampler.emcee_pt.emceeptsampler attribute)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.burn_in_class"]], "burn_in_class (pycbc.inference.sampler.epsie.epsiesampler attribute)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.burn_in_class"]], "burn_in_class (pycbc.inference.sampler.ptemcee.ptemceesampler attribute)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.burn_in_class"]], "calculate_logevidence() (pycbc.inference.sampler.emcee_pt.emceeptsampler class method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.calculate_logevidence"]], "calculate_logevidence() (pycbc.inference.sampler.ptemcee.ptemceesampler class method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.calculate_logevidence"]], "call_global_loglikelihood() (in module pycbc.inference.sampler.base_cube)": [[64, "pycbc.inference.sampler.base_cube.call_global_loglikelihood"]], "call_global_logprior() (in module pycbc.inference.sampler.base_cube)": [[64, "pycbc.inference.sampler.base_cube.call_global_logprior"]], "call_reconstruct() (in module pycbc.inference.sampler.dummy)": [[64, "pycbc.inference.sampler.dummy.call_reconstruct"]], "chain (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.chain"]], "check_if_finished() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.check_if_finished"]], "checkpoint() (pycbc.inference.sampler.base.basesampler method)": [[64, "pycbc.inference.sampler.base.BaseSampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint"]], "checkpoint() (pycbc.inference.sampler.dummy.dummysampler method)": [[64, "pycbc.inference.sampler.dummy.DummySampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.checkpoint"]], "checkpoint() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.checkpoint"]], "checkpoint_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc static method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint_from_config"]], "checkpoint_interval (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint_interval"]], "checkpoint_interval (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.checkpoint_interval"]], "checkpoint_signal (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.checkpoint_signal"]], "ckpt_signal_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc static method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.ckpt_signal_from_config"]], "clear_samples() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.clear_samples"]], "clear_samples() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.clear_samples"]], "clear_samples() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.clear_samples"]], "clear_samples() (pycbc.inference.sampler.epsie.epsiesampler method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.clear_samples"]], "clear_samples() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.clear_samples"]], "compute_acf() (in module pycbc.inference.sampler.base_multitemper)": [[64, "pycbc.inference.sampler.base_multitemper.compute_acf"]], "compute_acf() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.compute_acf"]], "compute_acf() (pycbc.inference.sampler.emcee.emceeensemblesampler static method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.compute_acf"]], "compute_acf() (pycbc.inference.sampler.emcee_pt.emceeptsampler static method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.compute_acf"]], "compute_acf() (pycbc.inference.sampler.epsie.epsiesampler static method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.compute_acf"]], "compute_acf() (pycbc.inference.sampler.ptemcee.ptemceesampler static method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.compute_acf"]], "compute_acl() (in module pycbc.inference.sampler.base_multitemper)": [[64, "pycbc.inference.sampler.base_multitemper.compute_acl"]], "compute_acl() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.compute_acl"]], "compute_acl() (pycbc.inference.sampler.emcee.emceeensemblesampler static method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.compute_acl"]], "compute_acl() (pycbc.inference.sampler.emcee_pt.emceeptsampler static method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.compute_acl"]], "compute_acl() (pycbc.inference.sampler.epsie.epsiesampler static method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.compute_acl"]], "compute_acl() (pycbc.inference.sampler.ptemcee.ptemceesampler static method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.compute_acl"]], "create_new_output_file() (in module pycbc.inference.sampler.base)": [[64, "pycbc.inference.sampler.base.create_new_output_file"]], "dlogz (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.dlogz"]], "effective_nsamples (pycbc.inference.sampler.base_mcmc.ensemblesupport property)": [[64, "pycbc.inference.sampler.base_mcmc.EnsembleSupport.effective_nsamples"]], "effective_nsamples (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.effective_nsamples"]], "effective_nsamples() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.effective_nsamples"]], "ensemble (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.ensemble"]], "ensemble_compute_acf() (in module pycbc.inference.sampler.base_mcmc)": [[64, "pycbc.inference.sampler.base_mcmc.ensemble_compute_acf"]], "ensemble_compute_acf() (in module pycbc.inference.sampler.base_multitemper)": [[64, "pycbc.inference.sampler.base_multitemper.ensemble_compute_acf"]], "ensemble_compute_acl() (in module pycbc.inference.sampler.base_mcmc)": [[64, "pycbc.inference.sampler.base_mcmc.ensemble_compute_acl"]], "ensemble_compute_acl() (in module pycbc.inference.sampler.base_multitemper)": [[64, "pycbc.inference.sampler.base_multitemper.ensemble_compute_acl"]], "estimate_nmcmc() (in module pycbc.inference.sampler.dynesty)": [[64, "pycbc.inference.sampler.dynesty.estimate_nmcmc"]], "finalize() (pycbc.inference.sampler.base.basesampler method)": [[64, "pycbc.inference.sampler.base.BaseSampler.finalize"]], "finalize() (pycbc.inference.sampler.dummy.dummysampler method)": [[64, "pycbc.inference.sampler.dummy.DummySampler.finalize"]], "finalize() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.finalize"]], "finalize() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.finalize"]], "finalize() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.finalize"]], "finalize() (pycbc.inference.sampler.epsie.epsiesampler method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.finalize"]], "finalize() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.finalize"]], "finalize() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.finalize"]], "finalize() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.finalize"]], "from_config() (pycbc.inference.sampler.base.basesampler method)": [[64, "pycbc.inference.sampler.base.BaseSampler.from_config"]], "from_config() (pycbc.inference.sampler.dummy.dummysampler class method)": [[64, "pycbc.inference.sampler.dummy.DummySampler.from_config"]], "from_config() (pycbc.inference.sampler.dynesty.dynestysampler class method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.from_config"]], "from_config() (pycbc.inference.sampler.emcee.emceeensemblesampler class method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.from_config"]], "from_config() (pycbc.inference.sampler.emcee_pt.emceeptsampler class method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.from_config"]], "from_config() (pycbc.inference.sampler.epsie.epsiesampler class method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.from_config"]], "from_config() (pycbc.inference.sampler.multinest.multinestsampler class method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.from_config"]], "from_config() (pycbc.inference.sampler.ptemcee.ptemceesampler class method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.from_config"]], "from_config() (pycbc.inference.sampler.ultranest.ultranestsampler class method)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.from_config"]], "get_optional_arg_from_config() (in module pycbc.inference.sampler.base_mcmc)": [[64, "pycbc.inference.sampler.base_mcmc.get_optional_arg_from_config"]], "get_posterior_samples() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.get_posterior_samples"]], "get_thin_interval() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.get_thin_interval"]], "importance_dlogz (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.importance_dlogz"]], "importance_logz (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.importance_logz"]], "initial_dist_from_config() (in module pycbc.inference.sampler.base)": [[64, "pycbc.inference.sampler.base.initial_dist_from_config"]], "io (pycbc.inference.sampler.base.basesampler property)": [[64, "pycbc.inference.sampler.base.BaseSampler.io"]], "io (pycbc.inference.sampler.dummy.dummysampler property)": [[64, "pycbc.inference.sampler.dummy.DummySampler.io"]], "io (pycbc.inference.sampler.dynesty.dynestysampler property)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.io"]], "io (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.io"]], "io (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.io"]], "io (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.io"]], "io (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.io"]], "io (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.io"]], "io (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.io"]], "load_from_config() (in module pycbc.inference.sampler)": [[64, "pycbc.inference.sampler.load_from_config"]], "log_likelihood() (pycbc.inference.sampler.base_cube.cubemodel method)": [[64, "pycbc.inference.sampler.base_cube.CubeModel.log_likelihood"]], "loglikelihood() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.loglikelihood"]], "logz (pycbc.inference.sampler.dynesty.dynestysampler property)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.logz"]], "logz (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.logz"]], "logz (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.logz"]], "logz_err (pycbc.inference.sampler.dynesty.dynestysampler property)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.logz_err"]], "logz_err (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.logz_err"]], "max_samples_per_chain (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.max_samples_per_chain"]], "model_stats (pycbc.inference.sampler.base.basesampler property)": [[64, "pycbc.inference.sampler.base.BaseSampler.model_stats"]], "model_stats (pycbc.inference.sampler.dummy.dummysampler property)": [[64, "pycbc.inference.sampler.dummy.DummySampler.model_stats"]], "model_stats (pycbc.inference.sampler.dynesty.dynestysampler property)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.model_stats"]], "model_stats (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.model_stats"]], "model_stats (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.model_stats"]], "model_stats (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.model_stats"]], "model_stats (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.model_stats"]], "model_stats (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.model_stats"]], "model_stats (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.model_stats"]], "name (pycbc.inference.sampler.base.basesampler attribute)": [[64, "pycbc.inference.sampler.base.BaseSampler.name"]], "name (pycbc.inference.sampler.dummy.dummysampler attribute)": [[64, "pycbc.inference.sampler.dummy.DummySampler.name"]], "name (pycbc.inference.sampler.dynesty.dynestysampler attribute)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.name"]], "name (pycbc.inference.sampler.emcee.emceeensemblesampler attribute)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.name"]], "name (pycbc.inference.sampler.emcee_pt.emceeptsampler attribute)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.name"]], "name (pycbc.inference.sampler.epsie.epsiesampler attribute)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.name"]], "name (pycbc.inference.sampler.multinest.multinestsampler attribute)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.name"]], "name (pycbc.inference.sampler.ptemcee.ptemceesampler attribute)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.name"]], "name (pycbc.inference.sampler.ultranest.ultranestsampler attribute)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.name"]], "nchains (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.nchains"]], "niterations (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.niterations"]], "niterations (pycbc.inference.sampler.dynesty.dynestysampler property)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.niterations"]], "niterations (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.niterations"]], "niterations (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.niterations"]], "nlivepoints (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.nlivepoints"]], "ntemps (pycbc.inference.sampler.base_multitemper.multitemperedsupport property)": [[64, "pycbc.inference.sampler.base_multitemper.MultiTemperedSupport.ntemps"]], "ntemps (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.ntemps"]], "nwalkers (pycbc.inference.sampler.base_mcmc.ensemblesupport property)": [[64, "pycbc.inference.sampler.base_mcmc.EnsembleSupport.nwalkers"]], "p0 (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.p0"]], "pos (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.pos"]], "pos (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.pos"]], "prior_transform() (pycbc.inference.sampler.base_cube.cubemodel method)": [[64, "pycbc.inference.sampler.base_cube.CubeModel.prior_transform"]], "pycbc.inference.sampler": [[64, "module-pycbc.inference.sampler"]], "pycbc.inference.sampler.base": [[64, "module-pycbc.inference.sampler.base"]], "pycbc.inference.sampler.base_cube": [[64, "module-pycbc.inference.sampler.base_cube"]], "pycbc.inference.sampler.base_mcmc": [[64, "module-pycbc.inference.sampler.base_mcmc"]], "pycbc.inference.sampler.base_multitemper": [[64, "module-pycbc.inference.sampler.base_multitemper"]], "pycbc.inference.sampler.dummy": [[64, "module-pycbc.inference.sampler.dummy"]], "pycbc.inference.sampler.dynesty": [[64, "module-pycbc.inference.sampler.dynesty"]], "pycbc.inference.sampler.emcee": [[64, "module-pycbc.inference.sampler.emcee"]], "pycbc.inference.sampler.emcee_pt": [[64, "module-pycbc.inference.sampler.emcee_pt"]], "pycbc.inference.sampler.epsie": [[64, "module-pycbc.inference.sampler.epsie"]], "pycbc.inference.sampler.multinest": [[64, "module-pycbc.inference.sampler.multinest"]], "pycbc.inference.sampler.ptemcee": [[64, "module-pycbc.inference.sampler.ptemcee"]], "pycbc.inference.sampler.ultranest": [[64, "module-pycbc.inference.sampler.ultranest"]], "raw_acls (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.raw_acls"]], "raw_acts (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.raw_acts"]], "raw_samples_to_dict() (in module pycbc.inference.sampler.base_mcmc)": [[64, "pycbc.inference.sampler.base_mcmc.raw_samples_to_dict"]], "read_betas_from_hdf() (in module pycbc.inference.sampler.base_multitemper)": [[64, "pycbc.inference.sampler.base_multitemper.read_betas_from_hdf"]], "resume_from_checkpoint() (pycbc.inference.sampler.base.basesampler method)": [[64, "pycbc.inference.sampler.base.BaseSampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.dummy.dummysampler method)": [[64, "pycbc.inference.sampler.dummy.DummySampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.resume_from_checkpoint"]], "resume_from_checkpoint() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.resume_from_checkpoint"]], "run() (pycbc.inference.sampler.base.basesampler method)": [[64, "pycbc.inference.sampler.base.BaseSampler.run"]], "run() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.run"]], "run() (pycbc.inference.sampler.dummy.dummysampler method)": [[64, "pycbc.inference.sampler.dummy.DummySampler.run"]], "run() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.run"]], "run() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.run"]], "run() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.run"]], "run_mcmc() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.epsie.epsiesampler method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.run_mcmc"]], "run_mcmc() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.run_mcmc"]], "sample_rwalk_mod() (in module pycbc.inference.sampler.dynesty)": [[64, "pycbc.inference.sampler.dynesty.sample_rwalk_mod"]], "samples (pycbc.inference.sampler.base.basesampler property)": [[64, "pycbc.inference.sampler.base.BaseSampler.samples"]], "samples (pycbc.inference.sampler.dummy.dummysampler property)": [[64, "pycbc.inference.sampler.dummy.DummySampler.samples"]], "samples (pycbc.inference.sampler.dynesty.dynestysampler property)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.samples"]], "samples (pycbc.inference.sampler.emcee.emceeensemblesampler property)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.samples"]], "samples (pycbc.inference.sampler.emcee_pt.emceeptsampler property)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.samples"]], "samples (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.samples"]], "samples (pycbc.inference.sampler.multinest.multinestsampler property)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.samples"]], "samples (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.samples"]], "samples (pycbc.inference.sampler.ultranest.ultranestsampler property)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.samples"]], "sampling_params (pycbc.inference.sampler.base.basesampler property)": [[64, "pycbc.inference.sampler.base.BaseSampler.sampling_params"]], "scale_factor (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.scale_factor"]], "seed (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.seed"]], "set_burn_in() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_burn_in"]], "set_burn_in_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_burn_in_from_config"]], "set_initial_conditions() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.set_initial_conditions"]], "set_initial_conditions() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.set_initial_conditions"]], "set_p0() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_p0"]], "set_p0() (pycbc.inference.sampler.epsie.epsiesampler method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.set_p0"]], "set_start_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_start_from_config"]], "set_state_from_file() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.epsie.epsiesampler method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.set_state_from_file"]], "set_state_from_file() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.set_state_from_file"]], "set_target() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_target"]], "set_target_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_target_from_config"]], "set_thin_interval_from_config() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.set_thin_interval_from_config"]], "setup_calls() (in module pycbc.inference.sampler.base_cube)": [[64, "pycbc.inference.sampler.base_cube.setup_calls"]], "setup_output() (in module pycbc.inference.sampler.base)": [[64, "pycbc.inference.sampler.base.setup_output"]], "setup_output() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.setup_output"]], "starting_betas (pycbc.inference.sampler.ptemcee.ptemceesampler property)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.starting_betas"]], "static_params (pycbc.inference.sampler.base.basesampler property)": [[64, "pycbc.inference.sampler.base.BaseSampler.static_params"]], "swap_interval (pycbc.inference.sampler.epsie.epsiesampler property)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.swap_interval"]], "target_eff_nsamples (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.target_eff_nsamples"]], "target_niterations (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.target_niterations"]], "thin_interval (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.thin_interval"]], "thin_safety_factor (pycbc.inference.sampler.base_mcmc.basemcmc property)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.thin_safety_factor"]], "transform_prior() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.transform_prior"]], "variable_params (pycbc.inference.sampler.base.basesampler property)": [[64, "pycbc.inference.sampler.base.BaseSampler.variable_params"]], "write_results() (pycbc.inference.sampler.base_mcmc.basemcmc method)": [[64, "pycbc.inference.sampler.base_mcmc.BaseMCMC.write_results"]], "write_results() (pycbc.inference.sampler.dynesty.dynestysampler method)": [[64, "pycbc.inference.sampler.dynesty.DynestySampler.write_results"]], "write_results() (pycbc.inference.sampler.emcee.emceeensemblesampler method)": [[64, "pycbc.inference.sampler.emcee.EmceeEnsembleSampler.write_results"]], "write_results() (pycbc.inference.sampler.emcee_pt.emceeptsampler method)": [[64, "pycbc.inference.sampler.emcee_pt.EmceePTSampler.write_results"]], "write_results() (pycbc.inference.sampler.epsie.epsiesampler method)": [[64, "pycbc.inference.sampler.epsie.EpsieSampler.write_results"]], "write_results() (pycbc.inference.sampler.multinest.multinestsampler method)": [[64, "pycbc.inference.sampler.multinest.MultinestSampler.write_results"]], "write_results() (pycbc.inference.sampler.ptemcee.ptemceesampler method)": [[64, "pycbc.inference.sampler.ptemcee.PTEmceeSampler.write_results"]], "write_results() (pycbc.inference.sampler.ultranest.ultranestsampler method)": [[64, "pycbc.inference.sampler.ultranest.UltranestSampler.write_results"]], "cbchdfinjectionset (class in pycbc.inject.inject)": [[65, "pycbc.inject.inject.CBCHDFInjectionSet"]], "incoherentfromfilehdfinjectionset (class in pycbc.inject.inject)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet"]], "injfilterrejector (class in pycbc.inject.injfilterrejector)": [[65, "pycbc.inject.injfilterrejector.InjFilterRejector"]], "injectionset (class in pycbc.inject.inject)": [[65, "pycbc.inject.inject.InjectionSet"]], "ringdownhdfinjectionset (class in pycbc.inject.inject)": [[65, "pycbc.inject.inject.RingdownHDFInjectionSet"]], "sgburstinjectionset (class in pycbc.inject.inject)": [[65, "pycbc.inject.inject.SGBurstInjectionSet"]], "apply() (pycbc.inject.inject.cbchdfinjectionset method)": [[65, "pycbc.inject.inject.CBCHDFInjectionSet.apply"]], "apply() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.apply"]], "apply() (pycbc.inject.inject.ringdownhdfinjectionset method)": [[65, "pycbc.inject.inject.RingdownHDFInjectionSet.apply"]], "apply() (pycbc.inject.inject.sgburstinjectionset method)": [[65, "pycbc.inject.inject.SGBurstInjectionSet.apply"]], "end_times() (pycbc.inject.inject.cbchdfinjectionset method)": [[65, "pycbc.inject.inject.CBCHDFInjectionSet.end_times"]], "end_times() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.end_times"]], "end_times() (pycbc.inject.inject.ringdownhdfinjectionset method)": [[65, "pycbc.inject.inject.RingdownHDFInjectionSet.end_times"]], "from_cli() (pycbc.inject.inject.injectionset static method)": [[65, "pycbc.inject.inject.InjectionSet.from_cli"]], "from_cli() (pycbc.inject.injfilterrejector.injfilterrejector class method)": [[65, "pycbc.inject.injfilterrejector.InjFilterRejector.from_cli"]], "from_cli_multi_ifos() (pycbc.inject.injfilterrejector.injfilterrejector class method)": [[65, "pycbc.inject.injfilterrejector.InjFilterRejector.from_cli_multi_ifos"]], "from_cli_single_ifo() (pycbc.inject.injfilterrejector.injfilterrejector class method)": [[65, "pycbc.inject.injfilterrejector.InjFilterRejector.from_cli_single_ifo"]], "generate_short_inj_from_inj() (pycbc.inject.injfilterrejector.injfilterrejector method)": [[65, "pycbc.inject.injfilterrejector.InjFilterRejector.generate_short_inj_from_inj"]], "get_hdf_injtype() (in module pycbc.inject.inject)": [[65, "pycbc.inject.inject.get_hdf_injtype"]], "hdf_injtype_from_approximant() (in module pycbc.inject.inject)": [[65, "pycbc.inject.inject.hdf_injtype_from_approximant"]], "indoc (pycbc.inject.inject.sgburstinjectionset attribute)": [[65, "pycbc.inject.inject.SGBurstInjectionSet.indoc"]], "injtype (pycbc.inject.inject.cbchdfinjectionset attribute)": [[65, "pycbc.inject.inject.CBCHDFInjectionSet.injtype"]], "injtype (pycbc.inject.inject.incoherentfromfilehdfinjectionset attribute)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.injtype"]], "injtype (pycbc.inject.inject.ringdownhdfinjectionset attribute)": [[65, "pycbc.inject.inject.RingdownHDFInjectionSet.injtype"]], "insert_injfilterrejector_option_group() (in module pycbc.inject.injfilterrejector)": [[65, "pycbc.inject.injfilterrejector.insert_injfilterrejector_option_group"]], "insert_injfilterrejector_option_group_multi_ifo() (in module pycbc.inject.injfilterrejector)": [[65, "pycbc.inject.injfilterrejector.insert_injfilterrejector_option_group_multi_ifo"]], "legacy_approximant_name() (in module pycbc.inject.inject)": [[65, "pycbc.inject.inject.legacy_approximant_name"]], "loadts() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.loadts"]], "make_strain_from_inj_object() (pycbc.inject.inject.cbchdfinjectionset method)": [[65, "pycbc.inject.inject.CBCHDFInjectionSet.make_strain_from_inj_object"]], "make_strain_from_inj_object() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.make_strain_from_inj_object"]], "make_strain_from_inj_object() (pycbc.inject.inject.ringdownhdfinjectionset method)": [[65, "pycbc.inject.inject.RingdownHDFInjectionSet.make_strain_from_inj_object"]], "projector() (in module pycbc.inject.inject)": [[65, "pycbc.inject.inject.projector"]], "pycbc.inject": [[65, "module-pycbc.inject"]], "pycbc.inject.inject": [[65, "module-pycbc.inject.inject"]], "pycbc.inject.injfilterrejector": [[65, "module-pycbc.inject.injfilterrejector"]], "required_params (pycbc.inject.inject.cbchdfinjectionset attribute)": [[65, "pycbc.inject.inject.CBCHDFInjectionSet.required_params"]], "required_params (pycbc.inject.inject.incoherentfromfilehdfinjectionset attribute)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.required_params"]], "required_params (pycbc.inject.inject.ringdownhdfinjectionset attribute)": [[65, "pycbc.inject.inject.RingdownHDFInjectionSet.required_params"]], "set_ref_time() (pycbc.inject.inject.incoherentfromfilehdfinjectionset method)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.set_ref_time"]], "set_sim_data() (in module pycbc.inject.inject)": [[65, "pycbc.inject.inject.set_sim_data"]], "slice_and_taper() (pycbc.inject.inject.incoherentfromfilehdfinjectionset static method)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.slice_and_taper"]], "supported_approximants() (pycbc.inject.inject.cbchdfinjectionset static method)": [[65, "pycbc.inject.inject.CBCHDFInjectionSet.supported_approximants"]], "supported_approximants() (pycbc.inject.inject.incoherentfromfilehdfinjectionset static method)": [[65, "pycbc.inject.inject.IncoherentFromFileHDFInjectionSet.supported_approximants"]], "supported_approximants() (pycbc.inject.inject.ringdownhdfinjectionset static method)": [[65, "pycbc.inject.inject.RingdownHDFInjectionSet.supported_approximants"]], "table (pycbc.inject.inject.injectionset attribute)": [[65, "pycbc.inject.inject.InjectionSet.table"]], "table (pycbc.inject.inject.sgburstinjectionset attribute)": [[65, "pycbc.inject.inject.SGBurstInjectionSet.table"]], "template_segment_checker() (pycbc.inject.injfilterrejector.injfilterrejector method)": [[65, "pycbc.inject.injfilterrejector.InjFilterRejector.template_segment_checker"]], "write() (pycbc.inject.inject.injectionset static method)": [[65, "pycbc.inject.inject.InjectionSet.write"]], "candidateforgracedb (class in pycbc.io.live)": [[66, "pycbc.io.live.CandidateForGraceDB"]], "datafromfiles (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.DataFromFiles"]], "dictarray (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.DictArray"]], "fieldarray (class in pycbc.io.record)": [[66, "pycbc.io.record.FieldArray"]], "filedata (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.FileData"]], "foregroundtriggers (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.ForegroundTriggers"]], "hfile (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.HFile"]], "ligolwcontenthandler (class in pycbc.io.ligolw)": [[66, "pycbc.io.ligolw.LIGOLWContentHandler"]], "multiifostatmapdata (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.MultiifoStatmapData"]], "readbytemplate (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.ReadByTemplate"]], "singledettriggers (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.SingleDetTriggers"]], "statmapdata (class in pycbc.io.hdf)": [[66, "pycbc.io.hdf.StatmapData"]], "waveformarray (class in pycbc.io.record)": [[66, "pycbc.io.record.WaveformArray"]], "add_fields() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.add_fields"]], "add_functions() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.add_functions"]], "add_methods() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.add_methods"]], "add_properties() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.add_properties"]], "add_virtualfields() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.add_virtualfields"]], "addattr() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.addattr"]], "aliases (pycbc.io.record.fieldarray property)": [[66, "pycbc.io.record.FieldArray.aliases"]], "append() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.append"]], "apply_mask() (pycbc.io.hdf.singledettriggers method)": [[66, "pycbc.io.hdf.SingleDetTriggers.apply_mask"]], "approximant (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.approximant"]], "checkbank() (pycbc.io.hdf.singledettriggers method)": [[66, "pycbc.io.hdf.SingleDetTriggers.checkbank"]], "chi_eff (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.chi_eff"]], "close() (pycbc.io.hdf.filedata method)": [[66, "pycbc.io.hdf.FileData.close"]], "cluster() (pycbc.io.hdf.multiifostatmapdata method)": [[66, "pycbc.io.hdf.MultiifoStatmapData.cluster"]], "cluster() (pycbc.io.hdf.statmapdata method)": [[66, "pycbc.io.hdf.StatmapData.cluster"]], "combine_and_copy() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.combine_and_copy"]], "create_process_table() (in module pycbc.io.ligolw)": [[66, "pycbc.io.ligolw.create_process_table"]], "default_null_value() (in module pycbc.io.ligolw)": [[66, "pycbc.io.ligolw.default_null_value"]], "del_functions() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.del_functions"]], "dump_pickle_to_hdf() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.dump_pickle_to_hdf"]], "dump_state() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.dump_state"]], "effective_spin (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.effective_spin"]], "endelementns() (pycbc.io.ligolw.ligolwcontenthandler method)": [[66, "pycbc.io.ligolw.LIGOLWContentHandler.endElementNS"]], "end_time (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.end_time"]], "eta (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.eta"]], "eta (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.eta"]], "f_lower (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.f_lower"]], "f_seobnrv2_peak (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.f_seobnrv2_peak"]], "f_seobnrv4_peak (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.f_seobnrv4_peak"]], "fieldnames (pycbc.io.record.fieldarray property)": [[66, "pycbc.io.record.FieldArray.fieldnames"]], "fields (pycbc.io.record.fieldarray property)": [[66, "pycbc.io.record.FieldArray.fields"]], "from_arrays() (pycbc.io.record.fieldarray class method)": [[66, "pycbc.io.record.FieldArray.from_arrays"]], "from_kwargs() (pycbc.io.record.fieldarray class method)": [[66, "pycbc.io.record.FieldArray.from_kwargs"]], "from_ligolw_table() (pycbc.io.record.fieldarray class method)": [[66, "pycbc.io.record.FieldArray.from_ligolw_table"]], "from_records() (pycbc.io.record.fieldarray class method)": [[66, "pycbc.io.record.FieldArray.from_records"]], "functionlib (pycbc.io.record.fieldarray property)": [[66, "pycbc.io.record.FieldArray.functionlib"]], "get_active_segments() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.get_active_segments"]], "get_all_subkeys() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.get_all_subkeys"]], "get_bankfile_array() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.get_bankfile_array"]], "get_chisq_from_file_choice() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.get_chisq_from_file_choice"]], "get_coincfile_array() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.get_coincfile_array"]], "get_column() (pycbc.io.hdf.datafromfiles method)": [[66, "pycbc.io.hdf.DataFromFiles.get_column"]], "get_column() (pycbc.io.hdf.filedata method)": [[66, "pycbc.io.hdf.FileData.get_column"]], "get_column() (pycbc.io.hdf.singledettriggers method)": [[66, "pycbc.io.hdf.SingleDetTriggers.get_column"]], "get_data() (pycbc.io.hdf.readbytemplate method)": [[66, "pycbc.io.hdf.ReadByTemplate.get_data"]], "get_end_time() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.get_end_time"]], "get_file() (in module pycbc.io)": [[66, "pycbc.io.get_file"]], "get_ifos() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.get_ifos"]], "get_param_names() (pycbc.io.hdf.singledettriggers class method)": [[66, "pycbc.io.hdf.SingleDetTriggers.get_param_names"]], "get_ranking() (pycbc.io.hdf.singledettriggers method)": [[66, "pycbc.io.hdf.SingleDetTriggers.get_ranking"]], "get_snglfile_array_dict() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.get_snglfile_array_dict"]], "get_table_columns() (in module pycbc.io.ligolw)": [[66, "pycbc.io.ligolw.get_table_columns"]], "gracedb_tag_with_version() (in module pycbc.io.live)": [[66, "pycbc.io.live.gracedb_tag_with_version"]], "inclination (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.inclination"]], "legacy_row_id_converter() (in module pycbc.io.ligolw)": [[66, "pycbc.io.ligolw.legacy_row_id_converter"]], "load_hdf5_to_dict() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.load_hdf5_to_dict"]], "load_state() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.load_state"]], "mask (pycbc.io.hdf.filedata property)": [[66, "pycbc.io.hdf.FileData.mask"]], "mask_to_n_loudest_clustered_events() (pycbc.io.hdf.singledettriggers method)": [[66, "pycbc.io.hdf.SingleDetTriggers.mask_to_n_loudest_clustered_events"]], "mass1 (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.mass1"]], "mass2 (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.mass2"]], "mchirp (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.mchirp"]], "mchirp (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.mchirp"]], "mtotal (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.mtotal"]], "mtotal (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.mtotal"]], "name (pycbc.io.record.fieldarray attribute)": [[66, "pycbc.io.record.FieldArray.name"]], "name_all_datasets() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.name_all_datasets"]], "newsnr (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.newsnr"]], "newsnr_sgveto (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.newsnr_sgveto"]], "newsnr_sgveto_psdvar (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.newsnr_sgveto_psdvar"]], "newsnr_sgveto_psdvar_threshold (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.newsnr_sgveto_psdvar_threshold"]], "parse_boolargs() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.parse_boolargs"]], "parse_parameters() (pycbc.io.record.fieldarray class method)": [[66, "pycbc.io.record.FieldArray.parse_parameters"]], "primary_mass (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.primary_mass"]], "psd_var_val (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.psd_var_val"]], "pycbc.io": [[66, "module-pycbc.io"]], "pycbc.io.hdf": [[66, "module-pycbc.io.hdf"]], "pycbc.io.ligolw": [[66, "module-pycbc.io.ligolw"]], "pycbc.io.live": [[66, "module-pycbc.io.live"]], "pycbc.io.record": [[66, "module-pycbc.io.record"]], "q (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.q"]], "rchisq (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.rchisq"]], "recursively_save_dict_contents_to_group() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.recursively_save_dict_contents_to_group"]], "remnant_mass (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.remnant_mass"]], "remove() (pycbc.io.hdf.dictarray method)": [[66, "pycbc.io.hdf.DictArray.remove"]], "return_empty_sngl() (in module pycbc.io.ligolw)": [[66, "pycbc.io.ligolw.return_empty_sngl"]], "return_search_summary() (in module pycbc.io.ligolw)": [[66, "pycbc.io.ligolw.return_search_summary"]], "save() (pycbc.io.hdf.dictarray method)": [[66, "pycbc.io.hdf.DictArray.save"]], "save() (pycbc.io.hdf.statmapdata method)": [[66, "pycbc.io.hdf.StatmapData.save"]], "save() (pycbc.io.live.candidateforgracedb method)": [[66, "pycbc.io.live.CandidateForGraceDB.save"]], "save_dict_to_hdf5() (in module pycbc.io.hdf)": [[66, "pycbc.io.hdf.save_dict_to_hdf5"]], "secondary_mass (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.secondary_mass"]], "select() (pycbc.io.hdf.dictarray method)": [[66, "pycbc.io.hdf.DictArray.select"]], "select() (pycbc.io.hdf.hfile method)": [[66, "pycbc.io.hdf.HFile.select"]], "set_template() (pycbc.io.hdf.readbytemplate method)": [[66, "pycbc.io.hdf.ReadByTemplate.set_template"]], "sgchisq (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.sgchisq"]], "snr (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.snr"]], "sort() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.sort"]], "sort_arr (pycbc.io.hdf.foregroundtriggers property)": [[66, "pycbc.io.hdf.ForegroundTriggers.sort_arr"]], "spin1_a (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin1_a"]], "spin1_azimuthal (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin1_azimuthal"]], "spin1_polar (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin1_polar"]], "spin1x (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.spin1x"]], "spin1y (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.spin1y"]], "spin1z (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.spin1z"]], "spin2_a (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin2_a"]], "spin2_azimuthal (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin2_azimuthal"]], "spin2_polar (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin2_polar"]], "spin2x (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.spin2x"]], "spin2y (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.spin2y"]], "spin2z (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.spin2z"]], "spin_px (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin_px"]], "spin_py (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin_py"]], "spin_pz (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin_pz"]], "spin_sx (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin_sx"]], "spin_sy (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin_sy"]], "spin_sz (pycbc.io.record.waveformarray property)": [[66, "pycbc.io.record.WaveformArray.spin_sz"]], "startcolumn() (pycbc.io.ligolw.ligolwcontenthandler method)": [[66, "pycbc.io.ligolw.LIGOLWContentHandler.startColumn"]], "startstream() (pycbc.io.ligolw.ligolwcontenthandler method)": [[66, "pycbc.io.ligolw.LIGOLWContentHandler.startStream"]], "starttable() (pycbc.io.ligolw.ligolwcontenthandler method)": [[66, "pycbc.io.ligolw.LIGOLWContentHandler.startTable"]], "template_duration (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.template_duration"]], "template_id (pycbc.io.hdf.foregroundtriggers property)": [[66, "pycbc.io.hdf.ForegroundTriggers.template_id"]], "template_id (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.template_id"]], "to_array() (pycbc.io.record.fieldarray method)": [[66, "pycbc.io.record.FieldArray.to_array"]], "to_coinc_hdf_object() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.to_coinc_hdf_object"]], "to_coinc_xml_object() (pycbc.io.hdf.foregroundtriggers method)": [[66, "pycbc.io.hdf.ForegroundTriggers.to_coinc_xml_object"]], "trig_dict() (pycbc.io.hdf.singledettriggers method)": [[66, "pycbc.io.hdf.SingleDetTriggers.trig_dict"]], "trig_id (pycbc.io.hdf.foregroundtriggers property)": [[66, "pycbc.io.hdf.ForegroundTriggers.trig_id"]], "u_vals (pycbc.io.hdf.singledettriggers property)": [[66, "pycbc.io.hdf.SingleDetTriggers.u_vals"]], "upload() (pycbc.io.live.candidateforgracedb method)": [[66, "pycbc.io.live.CandidateForGraceDB.upload"]], "virtualfields (pycbc.io.record.fieldarray property)": [[66, "pycbc.io.record.FieldArray.virtualfields"]], "isco_solution() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.ISCO_solution"]], "isso_eq_at_pole() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.ISSO_eq_at_pole"]], "isso_eq_at_pole_dr() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.ISSO_eq_at_pole_dr"]], "isso_eq_at_pole_dr2() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.ISSO_eq_at_pole_dr2"]], "pg_isso_eq() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_eq"]], "pg_isso_eq_dr() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_eq_dr"]], "pg_isso_eq_dr2() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_eq_dr2"]], "pg_isso_solver() (in module pycbc.neutron_stars.pg_isso_solver)": [[67, "pycbc.neutron_stars.pg_isso_solver.PG_ISSO_solver"]], "foucart18() (in module pycbc.neutron_stars.eos_utils)": [[67, "pycbc.neutron_stars.eos_utils.foucart18"]], "initialize_eos() (in module pycbc.neutron_stars.eos_utils)": [[67, "pycbc.neutron_stars.eos_utils.initialize_eos"]], "interp_grav_mass_to_baryon_mass() (in module pycbc.neutron_stars.eos_utils)": [[67, "pycbc.neutron_stars.eos_utils.interp_grav_mass_to_baryon_mass"]], "interp_grav_mass_to_compactness() (in module pycbc.neutron_stars.eos_utils)": [[67, "pycbc.neutron_stars.eos_utils.interp_grav_mass_to_compactness"]], "load_ns_sequence() (in module pycbc.neutron_stars.eos_utils)": [[67, "pycbc.neutron_stars.eos_utils.load_ns_sequence"]], "pycbc.neutron_stars": [[67, "module-pycbc.neutron_stars"]], "pycbc.neutron_stars.eos_utils": [[67, "module-pycbc.neutron_stars.eos_utils"]], "pycbc.neutron_stars.pg_isso_solver": [[67, "module-pycbc.neutron_stars.pg_isso_solver"]], "block() (in module pycbc.noise.reproduceable)": [[68, "pycbc.noise.reproduceable.block"]], "colored_noise() (in module pycbc.noise.reproduceable)": [[68, "pycbc.noise.reproduceable.colored_noise"]], "frequency_noise_from_psd() (in module pycbc.noise.gaussian)": [[68, "pycbc.noise.gaussian.frequency_noise_from_psd"]], "noise_from_psd() (in module pycbc.noise.gaussian)": [[68, "pycbc.noise.gaussian.noise_from_psd"]], "noise_from_string() (in module pycbc.noise.gaussian)": [[68, "pycbc.noise.gaussian.noise_from_string"]], "noise_from_string() (in module pycbc.noise.reproduceable)": [[68, "pycbc.noise.reproduceable.noise_from_string"]], "normal() (in module pycbc.noise.reproduceable)": [[68, "pycbc.noise.reproduceable.normal"]], "pycbc.noise": [[68, "module-pycbc.noise"]], "pycbc.noise.gaussian": [[68, "module-pycbc.noise.gaussian"]], "pycbc.noise.reproduceable": [[68, "module-pycbc.noise.reproduceable"]], "backgroundeventrate (class in pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.BackgroundEventRate"]], "eventrate (class in pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.EventRate"]], "foregroundevents (class in pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.ForegroundEvents"]], "pastrodata (class in pycbc.population.live_pastro_utils)": [[69, "pycbc.population.live_pastro_utils.PAstroData"]], "signaleventrate (class in pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.SignalEventRate"]], "add_background() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[69, "pycbc.population.fgmc_functions.BackgroundEventRate.add_background"]], "add_bank() (pycbc.population.fgmc_functions.eventrate method)": [[69, "pycbc.population.fgmc_functions.EventRate.add_bank"]], "add_injections() (pycbc.population.fgmc_functions.signaleventrate method)": [[69, "pycbc.population.fgmc_functions.SignalEventRate.add_injections"]], "add_zerolag() (pycbc.population.fgmc_functions.foregroundevents method)": [[69, "pycbc.population.fgmc_functions.ForegroundEvents.add_zerolag"]], "alltimes() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.alltimes"]], "apply_significance_limits() (pycbc.population.live_pastro_utils.pastrodata method)": [[69, "pycbc.population.live_pastro_utils.PAstroData.apply_significance_limits"]], "astro_redshifts() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.astro_redshifts"]], "augmented_rv_continuous (class in pycbc.population.fgmc_laguerre)": [[69, "pycbc.population.fgmc_laguerre.augmented_rv_continuous"]], "average_time_between_signals() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.average_time_between_signals"]], "check_template_param_bin_data() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.check_template_param_bin_data"]], "coalescence_rate() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.coalescence_rate"]], "contracted_dvdc() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.contracted_dVdc"]], "count_posterior (class in pycbc.population.fgmc_laguerre)": [[69, "pycbc.population.fgmc_laguerre.count_posterior"]], "diff_lookback_time() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.diff_lookback_time"]], "dist_summary() (in module pycbc.population.fgmc_plots)": [[69, "pycbc.population.fgmc_plots.dist_summary"]], "distance_from_rate() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.distance_from_rate"]], "dlum_to_z() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.dlum_to_z"]], "do_pastro_calc() (pycbc.population.live_pastro_utils.pastrodata method)": [[69, "pycbc.population.live_pastro_utils.PAstroData.do_pastro_calc"]], "draw_flat_samples() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.draw_flat_samples"]], "draw_imf_samples() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.draw_imf_samples"]], "draw_lnm_samples() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.draw_lnm_samples"]], "estimate_vt() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.estimate_vt"]], "eval_pdf() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[69, "pycbc.population.fgmc_functions.BackgroundEventRate.eval_pdf"]], "eval_pdf() (pycbc.population.fgmc_functions.signaleventrate method)": [[69, "pycbc.population.fgmc_functions.SignalEventRate.eval_pdf"]], "expect() (pycbc.population.fgmc_laguerre.count_posterior method)": [[69, "pycbc.population.fgmc_laguerre.count_posterior.expect"]], "fgmc() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.fgmc"]], "filter_bin_lo_hi() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.filter_bin_lo_hi"]], "filter_templates() (pycbc.population.fgmc_functions.eventrate method)": [[69, "pycbc.population.fgmc_functions.EventRate.filter_templates"]], "filter_tmplt_mchirp() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.filter_tmplt_mchirp"]], "fit() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.fit"]], "get_bg_pdf() (pycbc.population.fgmc_functions.foregroundevents method)": [[69, "pycbc.population.fgmc_functions.ForegroundEvents.get_bg_pdf"]], "get_ctypes() (pycbc.population.fgmc_functions.eventrate method)": [[69, "pycbc.population.fgmc_functions.EventRate.get_ctypes"]], "get_livetimes() (pycbc.population.fgmc_functions.eventrate method)": [[69, "pycbc.population.fgmc_functions.EventRate.get_livetimes"]], "get_norms() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[69, "pycbc.population.fgmc_functions.BackgroundEventRate.get_norms"]], "get_norms() (pycbc.population.fgmc_functions.signaleventrate method)": [[69, "pycbc.population.fgmc_functions.SignalEventRate.get_norms"]], "get_sg_pdf() (pycbc.population.fgmc_functions.foregroundevents method)": [[69, "pycbc.population.fgmc_functions.ForegroundEvents.get_sg_pdf"]], "get_start_dur() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.get_start_dur"]], "hpd_interval() (pycbc.population.fgmc_laguerre.augmented_rv_continuous method)": [[69, "pycbc.population.fgmc_laguerre.augmented_rv_continuous.hpd_interval"]], "ifos_from_combo() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.ifos_from_combo"]], "in_coinc_time_excl() (pycbc.population.fgmc_functions.eventrate method)": [[69, "pycbc.population.fgmc_functions.EventRate.in_coinc_time_excl"]], "in_coinc_time_incl() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.in_coinc_time_incl"]], "inj_distance_pdf() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.inj_distance_pdf"]], "inj_mass_pdf() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.inj_mass_pdf"]], "inj_spin_pdf() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.inj_spin_pdf"]], "insert_live_pastro_option_group() (in module pycbc.population.live_pastro_utils)": [[69, "pycbc.population.live_pastro_utils.insert_live_pastro_option_group"]], "log_rho_bg() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.log_rho_bg"]], "log_rho_fg() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.log_rho_fg"]], "log_rho_fg_analytic() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.log_rho_fg_analytic"]], "log_rho_fgmc() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.log_rho_fgmc"]], "make_all_bins() (pycbc.population.fgmc_functions.signaleventrate method)": [[69, "pycbc.population.fgmc_functions.SignalEventRate.make_all_bins"]], "make_bins() (pycbc.population.fgmc_functions.eventrate method)": [[69, "pycbc.population.fgmc_functions.EventRate.make_bins"]], "mchirp_sampler_flat() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.mchirp_sampler_flat"]], "mchirp_sampler_imf() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.mchirp_sampler_imf"]], "mchirp_sampler_lnm() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.mchirp_sampler_lnm"]], "merger_rate_density() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.merger_rate_density"]], "moreifotimes() (pycbc.population.fgmc_functions.eventrate method)": [[69, "pycbc.population.fgmc_functions.EventRate.moreifotimes"]], "noise_density_from_far() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.noise_density_from_far"]], "norm_redshift_distribution() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.norm_redshift_distribution"]], "odds_summary() (in module pycbc.population.fgmc_plots)": [[69, "pycbc.population.fgmc_plots.odds_summary"]], "p_bg() (pycbc.population.fgmc_laguerre.count_posterior method)": [[69, "pycbc.population.fgmc_laguerre.count_posterior.p_bg"]], "p_tau() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.p_tau"]], "pdf_z_astro() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.pdf_z_astro"]], "plot_bg() (pycbc.population.fgmc_functions.backgroundeventrate method)": [[69, "pycbc.population.fgmc_functions.BackgroundEventRate.plot_bg"]], "plot_inj() (pycbc.population.fgmc_functions.signaleventrate method)": [[69, "pycbc.population.fgmc_functions.SignalEventRate.plot_inj"]], "plotdist() (in module pycbc.population.fgmc_plots)": [[69, "pycbc.population.fgmc_plots.plotdist"]], "prob_flat() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.prob_flat"]], "prob_imf() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.prob_imf"]], "prob_lnm() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.prob_lnm"]], "process_full_data() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.process_full_data"]], "process_injections() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.process_injections"]], "pycbc.population": [[69, "module-pycbc.population"]], "pycbc.population.fgmc_functions": [[69, "module-pycbc.population.fgmc_functions"]], "pycbc.population.fgmc_laguerre": [[69, "module-pycbc.population.fgmc_laguerre"]], "pycbc.population.fgmc_plots": [[69, "module-pycbc.population.fgmc_plots"]], "pycbc.population.live_pastro": [[69, "module-pycbc.population.live_pastro"]], "pycbc.population.live_pastro_utils": [[69, "module-pycbc.population.live_pastro_utils"]], "pycbc.population.population_models": [[69, "module-pycbc.population.population_models"]], "pycbc.population.rates_functions": [[69, "module-pycbc.population.rates_functions"]], "pycbc.population.scale_injections": [[69, "module-pycbc.population.scale_injections"]], "read_full_data() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.read_full_data"]], "read_full_data_mchirp() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.read_full_data_mchirp"]], "read_injections() (in module pycbc.population.scale_injections)": [[69, "pycbc.population.scale_injections.read_injections"]], "read_template_bank_param() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.read_template_bank_param"]], "save_bkg_falloff() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.save_bkg_falloff"]], "sfr_grb_2008() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.sfr_grb_2008"]], "sfr_madau_dickinson_2014() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.sfr_madau_dickinson_2014"]], "sfr_madau_fragos_2017() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.sfr_madau_fragos_2017"]], "signal_pdf_from_snr() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.signal_pdf_from_snr"]], "signal_rate_rescale() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.signal_rate_rescale"]], "signal_rate_trig_type() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.signal_rate_trig_type"]], "skew_lognormal_samples() (in module pycbc.population.rates_functions)": [[69, "pycbc.population.rates_functions.skew_lognormal_samples"]], "template_param_bin_pa() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.template_param_bin_pa"]], "template_param_bin_types_farlim_pa() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.template_param_bin_types_farlim_pa"]], "template_param_bin_types_pa() (in module pycbc.population.live_pastro)": [[69, "pycbc.population.live_pastro.template_param_bin_types_pa"]], "total_rate_upto_redshift() (in module pycbc.population.population_models)": [[69, "pycbc.population.population_models.total_rate_upto_redshift"]], "type_in_time() (in module pycbc.population.fgmc_functions)": [[69, "pycbc.population.fgmc_functions.type_in_time"]], "advbnsoptimizedsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVBNSOptimizedSensitivityP1200087"]], "advdesignsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVDesignSensitivityP1200087"]], "advearlyhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVEarlyHighSensitivityP1200087"]], "advearlylowsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVEarlyLowSensitivityP1200087"]], "advlatehighsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVLateHighSensitivityP1200087"]], "advlatelowsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVLateLowSensitivityP1200087"]], "advmidhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVMidHighSensitivityP1200087"]], "advmidlowsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVMidLowSensitivityP1200087"]], "advo3lowt1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVO3LowT1800545"]], "advo4intermediatet1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVO4IntermediateT1800545"]], "advo4t1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdVO4T1800545"]], "advvirgo() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.AdvVirgo"]], "cosmicexplorerp1600143() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.CosmicExplorerP1600143"]], "cosmicexplorerpessimisticp1600143() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.CosmicExplorerPessimisticP1600143"]], "cosmicexplorerwidebandp1600143() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.CosmicExplorerWidebandP1600143"]], "einsteintelescopep1600143() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.EinsteinTelescopeP1600143"]], "geo() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.GEO"]], "geohf() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.GEOHF"]], "kagra() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRA"]], "kagra128mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRA128MpcT1800545"]], "kagra25mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRA25MpcT1800545"]], "kagra80mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRA80MpcT1800545"]], "kagradesignsensitivityt1600593() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRADesignSensitivityT1600593"]], "kagraearlysensitivityt1600593() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRAEarlySensitivityT1600593"]], "kagralatesensitivityt1600593() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRALateSensitivityT1600593"]], "kagramidsensitivityt1600593() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRAMidSensitivityT1600593"]], "kagraopeningsensitivityt1600593() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.KAGRAOpeningSensitivityT1600593"]], "tama() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.TAMA"]], "virgo() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.Virgo"]], "aligo140mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGO140MpcT1800545"]], "aligo175mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGO175MpcT1800545"]], "aligoaplusdesignsensitivityt1800042() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOAPlusDesignSensitivityT1800042"]], "aligoadvo3lowt1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOAdVO3LowT1800545"]], "aligoadvo4intermediatet1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOAdVO4IntermediateT1800545"]], "aligoadvo4t1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOAdVO4T1800545"]], "aligobhbh20deg() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOBHBH20Deg"]], "aligobhbh20deggwinc() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOBHBH20DegGWINC"]], "aligobnsoptimizedsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOBNSOptimizedSensitivityP1200087"]], "aligodesignsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGODesignSensitivityP1200087"]], "aligodesignsensitivityt1800044() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGODesignSensitivityT1800044"]], "aligoearlyhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOEarlyHighSensitivityP1200087"]], "aligoearlylowsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOEarlyLowSensitivityP1200087"]], "aligohighfrequency() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOHighFrequency"]], "aligohighfrequencygwinc() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOHighFrequencyGWINC"]], "aligokagra128mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOKAGRA128MpcT1800545"]], "aligokagra25mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOKAGRA25MpcT1800545"]], "aligokagra80mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOKAGRA80MpcT1800545"]], "aligolatehighsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOLateHighSensitivityP1200087"]], "aligolatelowsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOLateLowSensitivityP1200087"]], "aligomidhighsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOMidHighSensitivityP1200087"]], "aligomidlowsensitivityp1200087() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOMidLowSensitivityP1200087"]], "aligonsnsopt() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGONSNSOpt"]], "aligonsnsoptgwinc() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGONSNSOptGWINC"]], "aligonosrmhighpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGONoSRMHighPower"]], "aligonosrmlowpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGONoSRMLowPower"]], "aligonosrmlowpowergwinc() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGONoSRMLowPowerGWINC"]], "aligoo3lowt1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOO3LowT1800545"]], "aligoquantumbhbh20deg() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOQuantumBHBH20Deg"]], "aligoquantumhighfrequency() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOQuantumHighFrequency"]], "aligoquantumnsnsopt() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOQuantumNSNSOpt"]], "aligoquantumnosrmhighpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOQuantumNoSRMHighPower"]], "aligoquantumnosrmlowpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOQuantumNoSRMLowPower"]], "aligoquantumzerodethighpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOQuantumZeroDetHighPower"]], "aligoquantumzerodetlowpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOQuantumZeroDetLowPower"]], "aligothermal() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOThermal"]], "aligozerodethighpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOZeroDetHighPower"]], "aligozerodethighpowergwinc() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOZeroDetHighPowerGWINC"]], "aligozerodetlowpower() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOZeroDetLowPower"]], "aligozerodetlowpowergwinc() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOZeroDetLowPowerGWINC"]], "aligoaligo140mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOaLIGO140MpcT1800545"]], "aligoaligo175mpct1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOaLIGO175MpcT1800545"]], "aligoaligodesignsensitivityt1800044() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOaLIGODesignSensitivityT1800044"]], "aligoaligoo3lowt1800545() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.aLIGOaLIGOO3LowT1800545"]], "analytical_csd_lisa_tdi_1p5_xy() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.analytical_csd_lisa_tdi_1p5_XY"]], "analytical_psd_lisa_tdi_1p5_ae() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_1p5_AE"]], "analytical_psd_lisa_tdi_1p5_t() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_1p5_T"]], "analytical_psd_lisa_tdi_1p5_xyz() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_1p5_XYZ"]], "analytical_psd_lisa_tdi_2p0_xyz() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.analytical_psd_lisa_tdi_2p0_XYZ"]], "associate_psds_to_multi_ifo_segments() (in module pycbc.psd)": [[70, "pycbc.psd.associate_psds_to_multi_ifo_segments"]], "associate_psds_to_segments() (in module pycbc.psd)": [[70, "pycbc.psd.associate_psds_to_segments"]], "associate_psds_to_single_ifo_segments() (in module pycbc.psd)": [[70, "pycbc.psd.associate_psds_to_single_ifo_segments"]], "averaged_lisa_fplus_sq_approx() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.averaged_lisa_fplus_sq_approx"]], "averaged_response_lisa_tdi_1p5() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.averaged_response_lisa_tdi_1p5"]], "averaged_response_lisa_tdi_2p0() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.averaged_response_lisa_tdi_2p0"]], "bandlimited_interpolate() (in module pycbc.psd.estimate)": [[70, "pycbc.psd.estimate.bandlimited_interpolate"]], "calc_filt_psd_variation() (in module pycbc.psd.variation)": [[70, "pycbc.psd.variation.calc_filt_psd_variation"]], "eligomodel() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.eLIGOModel"]], "eligoshot() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.eLIGOShot"]], "find_trigger_value() (in module pycbc.psd.variation)": [[70, "pycbc.psd.variation.find_trigger_value"]], "flat_unity() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.flat_unity"]], "from_cli() (in module pycbc.psd)": [[70, "pycbc.psd.from_cli"]], "from_cli_multi_ifos() (in module pycbc.psd)": [[70, "pycbc.psd.from_cli_multi_ifos"]], "from_cli_single_ifo() (in module pycbc.psd)": [[70, "pycbc.psd.from_cli_single_ifo"]], "from_numpy_arrays() (in module pycbc.psd.read)": [[70, "pycbc.psd.read.from_numpy_arrays"]], "from_string() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.from_string"]], "from_txt() (in module pycbc.psd.read)": [[70, "pycbc.psd.read.from_txt"]], "from_xml() (in module pycbc.psd.read)": [[70, "pycbc.psd.read.from_xml"]], "generate_overlapping_psds() (in module pycbc.psd)": [[70, "pycbc.psd.generate_overlapping_psds"]], "get_lalsim_psd_list() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.get_lalsim_psd_list"]], "get_psd_model_list() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.get_psd_model_list"]], "get_pycbc_psd_list() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.get_pycbc_psd_list"]], "iligomodel() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.iLIGOModel"]], "iligosrd() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.iLIGOSRD"]], "iligoseismic() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.iLIGOSeismic"]], "iligoshot() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.iLIGOShot"]], "iligothermal() (in module pycbc.psd.analytical)": [[70, "pycbc.psd.analytical.iLIGOThermal"]], "insert_psd_option_group() (in module pycbc.psd)": [[70, "pycbc.psd.insert_psd_option_group"]], "insert_psd_option_group_multi_ifo() (in module pycbc.psd)": [[70, "pycbc.psd.insert_psd_option_group_multi_ifo"]], "interpolate() (in module pycbc.psd.estimate)": [[70, "pycbc.psd.estimate.interpolate"]], "inverse_spectrum_truncation() (in module pycbc.psd.estimate)": [[70, "pycbc.psd.estimate.inverse_spectrum_truncation"]], "lisa_psd_components() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.lisa_psd_components"]], "mean_square() (in module pycbc.psd.variation)": [[70, "pycbc.psd.variation.mean_square"]], "median_bias() (in module pycbc.psd.estimate)": [[70, "pycbc.psd.estimate.median_bias"]], "omega_length() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.omega_length"]], "psd_lisa_acc_noise() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.psd_lisa_acc_noise"]], "psd_lisa_oms_noise() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.psd_lisa_oms_noise"]], "pycbc.psd": [[70, "module-pycbc.psd"]], "pycbc.psd.analytical": [[70, "module-pycbc.psd.analytical"]], "pycbc.psd.analytical_space": [[70, "module-pycbc.psd.analytical_space"]], "pycbc.psd.estimate": [[70, "module-pycbc.psd.estimate"]], "pycbc.psd.read": [[70, "module-pycbc.psd.read"]], "pycbc.psd.variation": [[70, "module-pycbc.psd.variation"]], "sensitivity_curve_lisa_scird() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.sensitivity_curve_lisa_SciRD"]], "sensitivity_curve_lisa_confusion() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.sensitivity_curve_lisa_confusion"]], "sensitivity_curve_lisa_semi_analytical() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.sensitivity_curve_lisa_semi_analytical"]], "sh_transformed_psd_lisa_tdi_xyz() (in module pycbc.psd.analytical_space)": [[70, "pycbc.psd.analytical_space.sh_transformed_psd_lisa_tdi_XYZ"]], "verify_psd_options() (in module pycbc.psd)": [[70, "pycbc.psd.verify_psd_options"]], "verify_psd_options_multi_ifo() (in module pycbc.psd)": [[70, "pycbc.psd.verify_psd_options_multi_ifo"]], "welch() (in module pycbc.psd.estimate)": [[70, "pycbc.psd.estimate.welch"]], "clicklink (class in pycbc.results.mpld3_utils)": [[71, "pycbc.results.mpld3_utils.ClickLink"]], "javascript (pycbc.results.mpld3_utils.clicklink attribute)": [[71, "pycbc.results.mpld3_utils.ClickLink.JAVASCRIPT"]], "javascript (pycbc.results.mpld3_utils.linetooltip attribute)": [[71, "pycbc.results.mpld3_utils.LineTooltip.JAVASCRIPT"]], "javascript (pycbc.results.mpld3_utils.mplslide attribute)": [[71, "pycbc.results.mpld3_utils.MPLSlide.JAVASCRIPT"]], "javascript (pycbc.results.mpld3_utils.tooltip attribute)": [[71, "pycbc.results.mpld3_utils.Tooltip.JAVASCRIPT"]], "linetooltip (class in pycbc.results.mpld3_utils)": [[71, "pycbc.results.mpld3_utils.LineTooltip"]], "mplslide (class in pycbc.results.mpld3_utils)": [[71, "pycbc.results.mpld3_utils.MPLSlide"]], "metaparser (class in pycbc.results.metadata)": [[71, "pycbc.results.metadata.MetaParser"]], "sectionnumber (class in pycbc.results.layout)": [[71, "pycbc.results.layout.SectionNumber"]], "tooltip (class in pycbc.results.mpld3_utils)": [[71, "pycbc.results.mpld3_utils.Tooltip"]], "add_style_opt_to_parser() (in module pycbc.results.plot)": [[71, "pycbc.results.plot.add_style_opt_to_parser"]], "axis_max_value() (in module pycbc.results.pygrb_plotting_utils)": [[71, "pycbc.results.pygrb_plotting_utils.axis_max_value"]], "build_segment_filelist() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.build_segment_filelist"]], "build_veto_filelist() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.build_veto_filelist"]], "coinc_timeseries_plot() (in module pycbc.results.followup)": [[71, "pycbc.results.followup.coinc_timeseries_plot"]], "columns_from_file_list() (in module pycbc.results.followup)": [[71, "pycbc.results.followup.columns_from_file_list"]], "construct_kde() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.construct_kde"]], "construct_trials() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.construct_trials"]], "contour_plotter() (in module pycbc.results.pygrb_plotting_utils)": [[71, "pycbc.results.pygrb_plotting_utils.contour_plotter"]], "create_axes_grid() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.create_axes_grid"]], "create_density_plot() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.create_density_plot"]], "create_marginalized_hist() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.create_marginalized_hist"]], "create_multidim_plot() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.create_multidim_plot"]], "create_versioning_page() (in module pycbc.results.versioning)": [[71, "pycbc.results.versioning.create_versioning_page"]], "drop_trailing_zeros() (in module pycbc.results.str_utils)": [[71, "pycbc.results.str_utils.drop_trailing_zeros"]], "extract_basic_trig_properties() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.extract_basic_trig_properties"]], "extract_ifos() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.extract_ifos"]], "extract_ifos_and_vetoes() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.extract_ifos_and_vetoes"]], "extract_vetoes() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.extract_vetoes"]], "format_value() (in module pycbc.results.str_utils)": [[71, "pycbc.results.str_utils.format_value"]], "generate_asd_plot() (in module pycbc.results.psd)": [[71, "pycbc.results.psd.generate_asd_plot"]], "get_antenna_dist_factor() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.get_antenna_dist_factor"]], "get_antenna_factors() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.get_antenna_factors"]], "get_antenna_single_response() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.get_antenna_single_response"]], "get_bestnrs() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.get_bestnrs"]], "get_code_version_numbers() (in module pycbc.results.versioning)": [[71, "pycbc.results.versioning.get_code_version_numbers"]], "get_coinc_snr() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.get_coinc_snr"]], "get_embedded_config() (in module pycbc.results.render)": [[71, "pycbc.results.render.get_embedded_config"]], "get_gracedb_search_link() (in module pycbc.results.followup)": [[71, "pycbc.results.followup.get_gracedb_search_link"]], "get_grb_time() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.get_grb_time"]], "get_id_numbers() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.get_id_numbers"]], "get_library_version_info() (in module pycbc.results.versioning)": [[71, "pycbc.results.versioning.get_library_version_info"]], "get_scale_fac() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.get_scale_fac"]], "get_signum() (in module pycbc.results.str_utils)": [[71, "pycbc.results.str_utils.get_signum"]], "get_summary_page_link() (in module pycbc.results.dq)": [[71, "pycbc.results.dq.get_summary_page_link"]], "group_layout() (in module pycbc.results.layout)": [[71, "pycbc.results.layout.group_layout"]], "grouper() (in module pycbc.results.layout)": [[71, "pycbc.results.layout.grouper"]], "handle_data() (pycbc.results.metadata.metaparser method)": [[71, "pycbc.results.metadata.MetaParser.handle_data"]], "handle_starttag() (pycbc.results.metadata.metaparser method)": [[71, "pycbc.results.metadata.MetaParser.handle_starttag"]], "hist_overflow() (in module pycbc.results.plot)": [[71, "pycbc.results.plot.hist_overflow"]], "html_escape() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.html_escape"]], "html_table() (in module pycbc.results.table_utils)": [[71, "pycbc.results.table_utils.html_table"]], "ifo_color() (in module pycbc.results.color)": [[71, "pycbc.results.color.ifo_color"]], "load_html_metadata() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.load_html_metadata"]], "load_injections() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.load_injections"]], "load_metadata_from_file() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.load_metadata_from_file"]], "load_png_metadata() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.load_png_metadata"]], "load_segment_dict() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.load_segment_dict"]], "load_segments_from_xml() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.load_segments_from_xml"]], "load_time_slides() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.load_time_slides"]], "load_triggers() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.load_triggers"]], "load_xml_table() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.load_xml_table"]], "make_grb_segments_plot() (in module pycbc.results.legacy_grb)": [[71, "pycbc.results.legacy_grb.make_grb_segments_plot"]], "mathjax_html_header() (in module pycbc.results.str_utils)": [[71, "pycbc.results.str_utils.mathjax_html_header"]], "max_median_stat() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.max_median_stat"]], "mc_cal_wf_errs() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.mc_cal_wf_errs"]], "new_snr_chisq() (in module pycbc.results.pygrb_plotting_utils)": [[71, "pycbc.results.pygrb_plotting_utils.new_snr_chisq"]], "pycbc.results": [[71, "module-pycbc.results"]], "pycbc.results.color": [[71, "module-pycbc.results.color"]], "pycbc.results.dq": [[71, "module-pycbc.results.dq"]], "pycbc.results.followup": [[71, "module-pycbc.results.followup"]], "pycbc.results.layout": [[71, "module-pycbc.results.layout"]], "pycbc.results.legacy_grb": [[71, "module-pycbc.results.legacy_grb"]], "pycbc.results.metadata": [[71, "module-pycbc.results.metadata"]], "pycbc.results.mpld3_utils": [[71, "module-pycbc.results.mpld3_utils"]], "pycbc.results.plot": [[71, "module-pycbc.results.plot"]], "pycbc.results.psd": [[71, "module-pycbc.results.psd"]], "pycbc.results.pygrb_plotting_utils": [[71, "module-pycbc.results.pygrb_plotting_utils"]], "pycbc.results.pygrb_postprocessing_utils": [[71, "module-pycbc.results.pygrb_postprocessing_utils"]], "pycbc.results.render": [[71, "module-pycbc.results.render"]], "pycbc.results.scatter_histograms": [[71, "module-pycbc.results.scatter_histograms"]], "pycbc.results.str_utils": [[71, "module-pycbc.results.str_utils"]], "pycbc.results.table_utils": [[71, "module-pycbc.results.table_utils"]], "pycbc.results.versioning": [[71, "module-pycbc.results.versioning"]], "pygrb_add_bestnr_opts() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_bestnr_opts"]], "pygrb_add_injmc_opts() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_injmc_opts"]], "pygrb_add_missed_injs_input_opt() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.pygrb_add_missed_injs_input_opt"]], "pygrb_initialize_plot_parser() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.pygrb_initialize_plot_parser"]], "pygrb_plotter() (in module pycbc.results.pygrb_plotting_utils)": [[71, "pycbc.results.pygrb_plotting_utils.pygrb_plotter"]], "read_multiinspiral_timeslides_from_files() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.read_multiinspiral_timeslides_from_files"]], "read_seg_files() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.read_seg_files"]], "reduce_ticks() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.reduce_ticks"]], "remove_common_offset() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.remove_common_offset"]], "render_default() (in module pycbc.results.render)": [[71, "pycbc.results.render.render_default"]], "render_glitchgram() (in module pycbc.results.render)": [[71, "pycbc.results.render.render_glitchgram"]], "render_ignore() (in module pycbc.results.render)": [[71, "pycbc.results.render.render_ignore"]], "render_text() (in module pycbc.results.render)": [[71, "pycbc.results.render.render_text"]], "render_tmplt() (in module pycbc.results.render)": [[71, "pycbc.results.render.render_tmplt"]], "render_workflow_html_template() (in module pycbc.results.render)": [[71, "pycbc.results.render.render_workflow_html_template"]], "save_fig_with_metadata() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.save_fig_with_metadata"]], "save_html_with_metadata() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.save_html_with_metadata"]], "save_pdf_with_metadata() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.save_pdf_with_metadata"]], "save_png_with_metadata() (in module pycbc.results.metadata)": [[71, "pycbc.results.metadata.save_png_with_metadata"]], "set_marginal_histogram_title() (in module pycbc.results.scatter_histograms)": [[71, "pycbc.results.scatter_histograms.set_marginal_histogram_title"]], "set_style_from_cli() (in module pycbc.results.plot)": [[71, "pycbc.results.plot.set_style_from_cli"]], "setup_template_render() (in module pycbc.results.render)": [[71, "pycbc.results.render.setup_template_render"]], "single_layout() (in module pycbc.results.layout)": [[71, "pycbc.results.layout.single_layout"]], "slide_vetoes() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.slide_vetoes"]], "sort_stat() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.sort_stat"]], "sort_trigs() (in module pycbc.results.pygrb_postprocessing_utils)": [[71, "pycbc.results.pygrb_postprocessing_utils.sort_trigs"]], "source_color() (in module pycbc.results.color)": [[71, "pycbc.results.color.source_color"]], "static_table() (in module pycbc.results.table_utils)": [[71, "pycbc.results.table_utils.static_table"]], "times_to_links() (in module pycbc.results.followup)": [[71, "pycbc.results.followup.times_to_links"]], "times_to_urls() (in module pycbc.results.followup)": [[71, "pycbc.results.followup.times_to_urls"]], "trigger_timeseries_plot() (in module pycbc.results.followup)": [[71, "pycbc.results.followup.trigger_timeseries_plot"]], "two_column_layout() (in module pycbc.results.layout)": [[71, "pycbc.results.layout.two_column_layout"]], "write_code_versions() (in module pycbc.results.versioning)": [[71, "pycbc.results.versioning.write_code_versions"]], "write_library_information() (in module pycbc.results.versioning)": [[71, "pycbc.results.versioning.write_library_information"]], "cubicspline (class in pycbc.strain.calibration)": [[72, "pycbc.strain.calibration.CubicSpline"]], "cubicspline (class in pycbc.strain.recalibrate)": [[72, "pycbc.strain.recalibrate.CubicSpline"]], "physicalmodel (class in pycbc.strain.recalibrate)": [[72, "pycbc.strain.recalibrate.PhysicalModel"]], "recalibrate (class in pycbc.strain.calibration)": [[72, "pycbc.strain.calibration.Recalibrate"]], "recalibrate (class in pycbc.strain.recalibrate)": [[72, "pycbc.strain.recalibrate.Recalibrate"]], "strainbuffer (class in pycbc.strain.strain)": [[72, "pycbc.strain.strain.StrainBuffer"]], "strainsegments (class in pycbc.strain.strain)": [[72, "pycbc.strain.strain.StrainSegments"]], "add_gate_option_group() (in module pycbc.strain.gate)": [[72, "pycbc.strain.gate.add_gate_option_group"]], "add_hard_count() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.add_hard_count"]], "adjust_strain() (pycbc.strain.recalibrate.physicalmodel method)": [[72, "pycbc.strain.recalibrate.PhysicalModel.adjust_strain"]], "advance() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.advance"]], "apply_calibration() (pycbc.strain.calibration.cubicspline method)": [[72, "pycbc.strain.calibration.CubicSpline.apply_calibration"]], "apply_calibration() (pycbc.strain.calibration.recalibrate method)": [[72, "pycbc.strain.calibration.Recalibrate.apply_calibration"]], "apply_calibration() (pycbc.strain.recalibrate.cubicspline method)": [[72, "pycbc.strain.recalibrate.CubicSpline.apply_calibration"]], "apply_calibration() (pycbc.strain.recalibrate.recalibrate method)": [[72, "pycbc.strain.recalibrate.Recalibrate.apply_calibration"]], "apply_gates_to_fd() (in module pycbc.strain.gate)": [[72, "pycbc.strain.gate.apply_gates_to_fd"]], "apply_gates_to_td() (in module pycbc.strain.gate)": [[72, "pycbc.strain.gate.apply_gates_to_td"]], "avg_inner_product() (in module pycbc.strain.lines)": [[72, "pycbc.strain.lines.avg_inner_product"]], "calibration_lines() (in module pycbc.strain.lines)": [[72, "pycbc.strain.lines.calibration_lines"]], "check_psd_dist() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.check_psd_dist"]], "clean_data() (in module pycbc.strain.lines)": [[72, "pycbc.strain.lines.clean_data"]], "complex_median() (in module pycbc.strain.lines)": [[72, "pycbc.strain.lines.complex_median"]], "create_memory_and_engine_for_class_based_fft() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.create_memory_and_engine_for_class_based_fft"]], "detect_loud_glitches() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.detect_loud_glitches"]], "end_time (pycbc.strain.strain.strainbuffer property)": [[72, "pycbc.strain.strain.StrainBuffer.end_time"]], "execute_cached_fft() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.execute_cached_fft"]], "execute_cached_ifft() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.execute_cached_ifft"]], "fourier_segments() (pycbc.strain.strain.strainsegments method)": [[72, "pycbc.strain.strain.StrainSegments.fourier_segments"]], "from_cli() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.from_cli"]], "from_cli() (pycbc.strain.strain.strainbuffer class method)": [[72, "pycbc.strain.strain.StrainBuffer.from_cli"]], "from_cli() (pycbc.strain.strain.strainsegments class method)": [[72, "pycbc.strain.strain.StrainSegments.from_cli"]], "from_cli_multi_ifos() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.from_cli_multi_ifos"]], "from_cli_multi_ifos() (pycbc.strain.strain.strainsegments class method)": [[72, "pycbc.strain.strain.StrainSegments.from_cli_multi_ifos"]], "from_cli_single_ifo() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.from_cli_single_ifo"]], "from_cli_single_ifo() (pycbc.strain.strain.strainsegments class method)": [[72, "pycbc.strain.strain.StrainSegments.from_cli_single_ifo"]], "from_config() (pycbc.strain.calibration.recalibrate class method)": [[72, "pycbc.strain.calibration.Recalibrate.from_config"]], "from_config() (pycbc.strain.recalibrate.physicalmodel class method)": [[72, "pycbc.strain.recalibrate.PhysicalModel.from_config"]], "from_config() (pycbc.strain.recalibrate.recalibrate class method)": [[72, "pycbc.strain.recalibrate.Recalibrate.from_config"]], "gate_and_paint() (in module pycbc.strain.gate)": [[72, "pycbc.strain.gate.gate_and_paint"]], "gate_data() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.gate_data"]], "gates_from_cli() (in module pycbc.strain.gate)": [[72, "pycbc.strain.gate.gates_from_cli"]], "insert_segment_option_group() (pycbc.strain.strain.strainsegments class method)": [[72, "pycbc.strain.strain.StrainSegments.insert_segment_option_group"]], "insert_segment_option_group_multi_ifo() (pycbc.strain.strain.strainsegments class method)": [[72, "pycbc.strain.strain.StrainSegments.insert_segment_option_group_multi_ifo"]], "insert_strain_option_group() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.insert_strain_option_group"]], "insert_strain_option_group_multi_ifo() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.insert_strain_option_group_multi_ifo"]], "invalidate_psd() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.invalidate_psd"]], "line_model() (in module pycbc.strain.lines)": [[72, "pycbc.strain.lines.line_model"]], "map_to_adjust() (pycbc.strain.calibration.recalibrate method)": [[72, "pycbc.strain.calibration.Recalibrate.map_to_adjust"]], "map_to_adjust() (pycbc.strain.recalibrate.physicalmodel method)": [[72, "pycbc.strain.recalibrate.PhysicalModel.map_to_adjust"]], "map_to_adjust() (pycbc.strain.recalibrate.recalibrate method)": [[72, "pycbc.strain.recalibrate.Recalibrate.map_to_adjust"]], "matching_line() (in module pycbc.strain.lines)": [[72, "pycbc.strain.lines.matching_line"]], "name (pycbc.strain.calibration.cubicspline attribute)": [[72, "pycbc.strain.calibration.CubicSpline.name"]], "name (pycbc.strain.calibration.recalibrate attribute)": [[72, "pycbc.strain.calibration.Recalibrate.name"]], "name (pycbc.strain.recalibrate.cubicspline attribute)": [[72, "pycbc.strain.recalibrate.CubicSpline.name"]], "name (pycbc.strain.recalibrate.physicalmodel attribute)": [[72, "pycbc.strain.recalibrate.PhysicalModel.name"]], "name (pycbc.strain.recalibrate.recalibrate attribute)": [[72, "pycbc.strain.recalibrate.Recalibrate.name"]], "near_hwinj() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.near_hwinj"]], "next_power_of_2() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.next_power_of_2"]], "null_advance_strain() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.null_advance_strain"]], "overwhitened_data() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.overwhitened_data"]], "psd_gates_from_cli() (in module pycbc.strain.gate)": [[72, "pycbc.strain.gate.psd_gates_from_cli"]], "pycbc.strain": [[72, "module-pycbc.strain"]], "pycbc.strain.calibration": [[72, "module-pycbc.strain.calibration"]], "pycbc.strain.gate": [[72, "module-pycbc.strain.gate"]], "pycbc.strain.lines": [[72, "module-pycbc.strain.lines"]], "pycbc.strain.recalibrate": [[72, "module-pycbc.strain.recalibrate"]], "pycbc.strain.strain": [[72, "module-pycbc.strain.strain"]], "read_model_from_config() (in module pycbc.strain)": [[72, "pycbc.strain.read_model_from_config"]], "recalculate_psd() (pycbc.strain.strain.strainbuffer method)": [[72, "pycbc.strain.strain.StrainBuffer.recalculate_psd"]], "required_opts_list (pycbc.strain.strain.strainsegments attribute)": [[72, "pycbc.strain.strain.StrainSegments.required_opts_list"]], "start_time (pycbc.strain.strain.strainbuffer property)": [[72, "pycbc.strain.strain.StrainBuffer.start_time"]], "tf_from_file() (pycbc.strain.recalibrate.physicalmodel class method)": [[72, "pycbc.strain.recalibrate.PhysicalModel.tf_from_file"]], "update_c() (pycbc.strain.recalibrate.physicalmodel method)": [[72, "pycbc.strain.recalibrate.PhysicalModel.update_c"]], "update_g() (pycbc.strain.recalibrate.physicalmodel method)": [[72, "pycbc.strain.recalibrate.PhysicalModel.update_g"]], "update_r() (pycbc.strain.recalibrate.physicalmodel method)": [[72, "pycbc.strain.recalibrate.PhysicalModel.update_r"]], "verify_segment_options() (pycbc.strain.strain.strainsegments class method)": [[72, "pycbc.strain.strain.StrainSegments.verify_segment_options"]], "verify_segment_options_multi_ifo() (pycbc.strain.strain.strainsegments class method)": [[72, "pycbc.strain.strain.StrainSegments.verify_segment_options_multi_ifo"]], "verify_strain_options() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.verify_strain_options"]], "verify_strain_options_multi_ifo() (in module pycbc.strain.strain)": [[72, "pycbc.strain.strain.verify_strain_options_multi_ifo"]], "indentedhelpformatterwithnl (class in pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL"]], "partitionedtmpltbank (class in pycbc.tmpltbank.partitioned_bank)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank"]], "add_point_by_chi_coords() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_point_by_chi_coords"]], "add_point_by_masses() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_point_by_masses"]], "add_tmpltbank_from_hdf_file() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_tmpltbank_from_hdf_file"]], "add_tmpltbank_from_xml_table() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.add_tmpltbank_from_xml_table"]], "calc_point_dist() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.calc_point_dist"]], "calc_point_dist_vary() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.calc_point_dist_vary"]], "calc_point_distance() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.calc_point_distance"]], "calc_point_distance_vary() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.calc_point_distance_vary"]], "calculate_ethinca_metric_comps() (in module pycbc.tmpltbank.bank_output_utils)": [[73, "pycbc.tmpltbank.bank_output_utils.calculate_ethinca_metric_comps"]], "calculate_metric() (in module pycbc.tmpltbank.calc_moments)": [[73, "pycbc.tmpltbank.calc_moments.calculate_metric"]], "calculate_metric_comp() (in module pycbc.tmpltbank.calc_moments)": [[73, "pycbc.tmpltbank.calc_moments.calculate_metric_comp"]], "calculate_moment() (in module pycbc.tmpltbank.calc_moments)": [[73, "pycbc.tmpltbank.calc_moments.calculate_moment"]], "check_bin_existence() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.check_bin_existence"]], "check_ethinca_against_bank_params() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.check_ethinca_against_bank_params"]], "convert_to_sngl_inspiral_table() (in module pycbc.tmpltbank.bank_output_utils)": [[73, "pycbc.tmpltbank.bank_output_utils.convert_to_sngl_inspiral_table"]], "default_delta_bh_spin (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[73, "pycbc.tmpltbank.option_utils.massRangeParameters.default_delta_bh_spin"]], "default_delta_ns_mass (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[73, "pycbc.tmpltbank.option_utils.massRangeParameters.default_delta_ns_mass"]], "default_ns_eos (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[73, "pycbc.tmpltbank.option_utils.massRangeParameters.default_ns_eos"]], "default_nsbh_boundary_mass (pycbc.tmpltbank.option_utils.massrangeparameters attribute)": [[73, "pycbc.tmpltbank.option_utils.massRangeParameters.default_nsbh_boundary_mass"]], "determine_eigen_directions() (in module pycbc.tmpltbank.calc_moments)": [[73, "pycbc.tmpltbank.calc_moments.determine_eigen_directions"]], "estimate_mass_range() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.estimate_mass_range"]], "ethincaparameters (class in pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.ethincaParameters"]], "ethinca_order_from_string() (in module pycbc.tmpltbank.lambda_mapping)": [[73, "pycbc.tmpltbank.lambda_mapping.ethinca_order_from_string"]], "evals (pycbc.tmpltbank.option_utils.metricparameters property)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.evals"]], "evecs (pycbc.tmpltbank.option_utils.metricparameters property)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.evecs"]], "evecscv (pycbc.tmpltbank.option_utils.metricparameters property)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.evecsCV"]], "find_closest_calculated_frequencies() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.find_closest_calculated_frequencies"]], "find_max_and_min_frequencies() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.find_max_and_min_frequencies"]], "find_point_bin() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.find_point_bin"]], "find_xi_extrema_brute() (in module pycbc.tmpltbank.brute_force_methods)": [[73, "pycbc.tmpltbank.brute_force_methods.find_xi_extrema_brute"]], "format_description() (pycbc.tmpltbank.option_utils.indentedhelpformatterwithnl method)": [[73, "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL.format_description"]], "format_option() (pycbc.tmpltbank.option_utils.indentedhelpformatterwithnl method)": [[73, "pycbc.tmpltbank.option_utils.IndentedHelpFormatterWithNL.format_option"]], "from_argparse() (pycbc.tmpltbank.option_utils.ethincaparameters class method)": [[73, "pycbc.tmpltbank.option_utils.ethincaParameters.from_argparse"]], "from_argparse() (pycbc.tmpltbank.option_utils.massrangeparameters class method)": [[73, "pycbc.tmpltbank.option_utils.massRangeParameters.from_argparse"]], "from_argparse() (pycbc.tmpltbank.option_utils.metricparameters class method)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.from_argparse"]], "generate_anstar_3d_lattice() (in module pycbc.tmpltbank.lattice_utils)": [[73, "pycbc.tmpltbank.lattice_utils.generate_anstar_3d_lattice"]], "generate_hexagonal_lattice() (in module pycbc.tmpltbank.lattice_utils)": [[73, "pycbc.tmpltbank.lattice_utils.generate_hexagonal_lattice"]], "generate_inverse_mapping() (in module pycbc.tmpltbank.lambda_mapping)": [[73, "pycbc.tmpltbank.lambda_mapping.generate_inverse_mapping"]], "generate_mapping() (in module pycbc.tmpltbank.lambda_mapping)": [[73, "pycbc.tmpltbank.lambda_mapping.generate_mapping"]], "get_bank_property() (in module pycbc.tmpltbank.bank_conversions)": [[73, "pycbc.tmpltbank.bank_conversions.get_bank_property"]], "get_chirp_params() (in module pycbc.tmpltbank.lambda_mapping)": [[73, "pycbc.tmpltbank.lambda_mapping.get_chirp_params"]], "get_conv_params() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.get_conv_params"]], "get_cov_params() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.get_cov_params"]], "get_covaried_params() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.get_covaried_params"]], "get_ethinca_orders() (in module pycbc.tmpltbank.lambda_mapping)": [[73, "pycbc.tmpltbank.lambda_mapping.get_ethinca_orders"]], "get_freq_map_and_normalizations() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.get_freq_map_and_normalizations"]], "get_mass_distribution() (in module pycbc.tmpltbank.brute_force_methods)": [[73, "pycbc.tmpltbank.brute_force_methods.get_mass_distribution"]], "get_moments() (in module pycbc.tmpltbank.calc_moments)": [[73, "pycbc.tmpltbank.calc_moments.get_moments"]], "get_mu_params() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.get_mu_params"]], "get_options_from_group() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.get_options_from_group"]], "get_physical_covaried_masses() (in module pycbc.tmpltbank.brute_force_methods)": [[73, "pycbc.tmpltbank.brute_force_methods.get_physical_covaried_masses"]], "get_point_distance() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.get_point_distance"]], "get_point_from_bins_and_idx() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.get_point_from_bins_and_idx"]], "get_random_mass() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.get_random_mass"]], "get_random_mass_point_particles() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.get_random_mass_point_particles"]], "insert_base_bank_options() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.insert_base_bank_options"]], "insert_ethinca_metric_options() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.insert_ethinca_metric_options"]], "insert_mass_range_option_group() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.insert_mass_range_option_group"]], "insert_metric_calculation_options() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.insert_metric_calculation_options"]], "interpolate_psd() (in module pycbc.tmpltbank.calc_moments)": [[73, "pycbc.tmpltbank.calc_moments.interpolate_psd"]], "is_outside_range() (pycbc.tmpltbank.option_utils.massrangeparameters method)": [[73, "pycbc.tmpltbank.option_utils.massRangeParameters.is_outside_range"]], "massrangeparameters (class in pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.massRangeParameters"]], "metric (pycbc.tmpltbank.option_utils.metricparameters property)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.metric"]], "metricparameters (class in pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.metricParameters"]], "moments (pycbc.tmpltbank.option_utils.metricparameters property)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.moments"]], "output_all_points() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.output_all_points"]], "output_bank_to_file() (in module pycbc.tmpltbank.bank_output_utils)": [[73, "pycbc.tmpltbank.bank_output_utils.output_bank_to_file"]], "output_bank_to_hdf() (in module pycbc.tmpltbank.bank_output_utils)": [[73, "pycbc.tmpltbank.bank_output_utils.output_bank_to_hdf"]], "output_sngl_inspiral_table() (in module pycbc.tmpltbank.bank_output_utils)": [[73, "pycbc.tmpltbank.bank_output_utils.output_sngl_inspiral_table"]], "outspiral_loop() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.outspiral_loop"]], "psd (pycbc.tmpltbank.option_utils.metricparameters property)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.psd"]], "pycbc.tmpltbank": [[73, "module-pycbc.tmpltbank"]], "pycbc.tmpltbank.bank_conversions": [[73, "module-pycbc.tmpltbank.bank_conversions"]], "pycbc.tmpltbank.bank_output_utils": [[73, "module-pycbc.tmpltbank.bank_output_utils"]], "pycbc.tmpltbank.brute_force_methods": [[73, "module-pycbc.tmpltbank.brute_force_methods"]], "pycbc.tmpltbank.calc_moments": [[73, "module-pycbc.tmpltbank.calc_moments"]], "pycbc.tmpltbank.coord_utils": [[73, "module-pycbc.tmpltbank.coord_utils"]], "pycbc.tmpltbank.lambda_mapping": [[73, "module-pycbc.tmpltbank.lambda_mapping"]], "pycbc.tmpltbank.lattice_utils": [[73, "module-pycbc.tmpltbank.lattice_utils"]], "pycbc.tmpltbank.option_utils": [[73, "module-pycbc.tmpltbank.option_utils"]], "pycbc.tmpltbank.partitioned_bank": [[73, "module-pycbc.tmpltbank.partitioned_bank"]], "return_nearest_cutoff() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.return_nearest_cutoff"]], "rotate_vector() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.rotate_vector"]], "stack_xi_direction_brute() (in module pycbc.tmpltbank.brute_force_methods)": [[73, "pycbc.tmpltbank.brute_force_methods.stack_xi_direction_brute"]], "test_point_dist() (in module pycbc.tmpltbank.coord_utils)": [[73, "pycbc.tmpltbank.coord_utils.test_point_dist"]], "test_point_distance() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.test_point_distance"]], "test_point_distance_vary() (pycbc.tmpltbank.partitioned_bank.partitionedtmpltbank method)": [[73, "pycbc.tmpltbank.partitioned_bank.PartitionedTmpltbank.test_point_distance_vary"]], "time_unprojected_metric (pycbc.tmpltbank.option_utils.metricparameters property)": [[73, "pycbc.tmpltbank.option_utils.metricParameters.time_unprojected_metric"]], "verify_ethinca_metric_options() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.verify_ethinca_metric_options"]], "verify_mass_range_options() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.verify_mass_range_options"]], "verify_metric_calculation_options() (in module pycbc.tmpltbank.option_utils)": [[73, "pycbc.tmpltbank.option_utils.verify_metric_calculation_options"]], "array (class in pycbc.types.array)": [[74, "pycbc.types.array.Array"]], "deepcopyableconfigparser (class in pycbc.types.config)": [[74, "pycbc.types.config.DeepCopyableConfigParser"]], "dictoptionaction (class in pycbc.types.optparse)": [[74, "pycbc.types.optparse.DictOptionAction"]], "dictwithdefaultreturn (class in pycbc.types.optparse)": [[74, "pycbc.types.optparse.DictWithDefaultReturn"]], "frequencyseries (class in pycbc.types.frequencyseries)": [[74, "pycbc.types.frequencyseries.FrequencySeries"]], "interpolatingconfigparser (class in pycbc.types.config)": [[74, "pycbc.types.config.InterpolatingConfigParser"]], "multidetdictoptionaction (class in pycbc.types.optparse)": [[74, "pycbc.types.optparse.MultiDetDictOptionAction"]], "multidetmulticolonoptionaction (class in pycbc.types.optparse)": [[74, "pycbc.types.optparse.MultiDetMultiColonOptionAction"]], "multidetoptionaction (class in pycbc.types.optparse)": [[74, "pycbc.types.optparse.MultiDetOptionAction"]], "multidetoptionactionspecial (class in pycbc.types.optparse)": [[74, "pycbc.types.optparse.MultiDetOptionActionSpecial"]], "multidetoptionappendaction (class in pycbc.types.optparse)": [[74, "pycbc.types.optparse.MultiDetOptionAppendAction"]], "timeseries (class in pycbc.types.timeseries)": [[74, "pycbc.types.timeseries.TimeSeries"]], "abs_arg_max() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.abs_arg_max"]], "abs_arg_max() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.abs_arg_max"]], "abs_arg_max_complex() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.abs_arg_max_complex"]], "abs_max_loc() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.abs_max_loc"]], "abs_max_loc() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.abs_max_loc"]], "add_into() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.add_into"]], "add_options_to_section() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.add_options_to_section"]], "almost_equal_elem() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.almost_equal_elem"]], "almost_equal_elem() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.almost_equal_elem"]], "almost_equal_elem() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.almost_equal_elem"]], "almost_equal_norm() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.almost_equal_norm"]], "almost_equal_norm() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.almost_equal_norm"]], "almost_equal_norm() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.almost_equal_norm"]], "append_zeros() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.append_zeros"]], "astype() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.astype"]], "at_frequency() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.at_frequency"]], "at_time() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.at_time"]], "at_times() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.at_times"]], "check_aligned() (in module pycbc.types.aligned)": [[74, "pycbc.types.aligned.check_aligned"]], "check_duplicate_options() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.check_duplicate_options"]], "check_same_len_precision() (in module pycbc.types.array)": [[74, "pycbc.types.array.check_same_len_precision"]], "clear() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.clear"]], "clear() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.clear"]], "common_kind() (in module pycbc.types.array)": [[74, "pycbc.types.array.common_kind"]], "complex_same_precision_as() (in module pycbc.types.array)": [[74, "pycbc.types.array.complex_same_precision_as"]], "conj() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.conj"]], "convert_to_process_params_dict() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.convert_to_process_params_dict"]], "copy() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.copy"]], "copy_opts_for_single_ifo() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.copy_opts_for_single_ifo"]], "crop() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.crop"]], "cumsum() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.cumsum"]], "cumsum() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.cumsum"]], "cyclic_time_shift() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.cyclic_time_shift"]], "cyclic_time_shift() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.cyclic_time_shift"]], "data (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.data"]], "default_set (pycbc.types.optparse.dictwithdefaultreturn attribute)": [[74, "pycbc.types.optparse.DictWithDefaultReturn.default_set"]], "delta_f (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.delta_f"]], "delta_f (pycbc.types.timeseries.timeseries property)": [[74, "pycbc.types.timeseries.TimeSeries.delta_f"]], "delta_t (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.delta_t"]], "delta_t (pycbc.types.timeseries.timeseries property)": [[74, "pycbc.types.timeseries.TimeSeries.delta_t"]], "detrend() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.detrend"]], "dot() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.dot"]], "dot() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.dot"]], "dtype (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.dtype"]], "duration (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.duration"]], "duration (pycbc.types.timeseries.timeseries property)": [[74, "pycbc.types.timeseries.TimeSeries.duration"]], "empty() (in module pycbc.types.aligned)": [[74, "pycbc.types.aligned.empty"]], "empty() (in module pycbc.types.array)": [[74, "pycbc.types.array.empty"]], "empty() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.empty"]], "end_time (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.end_time"]], "end_time (pycbc.types.timeseries.timeseries property)": [[74, "pycbc.types.timeseries.TimeSeries.end_time"]], "ensure_one_opt() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.ensure_one_opt"]], "ensure_one_opt_multi_ifo() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.ensure_one_opt_multi_ifo"]], "epoch (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.epoch"]], "epoch_close() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.epoch_close"]], "fill() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.fill"]], "filter_psd() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.filter_psd"]], "fir_zero_filter() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.fir_zero_filter"]], "force_precision_to_match() (in module pycbc.types.array)": [[74, "pycbc.types.array.force_precision_to_match"]], "from_cli() (pycbc.types.config.interpolatingconfigparser class method)": [[74, "pycbc.types.config.InterpolatingConfigParser.from_cli"]], "gate() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.gate"]], "get_delta_f() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.get_delta_f"]], "get_delta_t() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.get_delta_t"]], "get_duration() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.get_duration"]], "get_end_time() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.get_end_time"]], "get_epoch() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.get_epoch"]], "get_opt_tag() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.get_opt_tag"]], "get_opt_tags() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.get_opt_tags"]], "get_sample_frequencies() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.get_sample_frequencies"]], "get_sample_rate() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.get_sample_rate"]], "get_sample_times() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.get_sample_times"]], "get_subsections() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.get_subsections"]], "has_option_tag() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.has_option_tag"]], "has_option_tags() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.has_option_tags"]], "highpass_fir() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.highpass_fir"]], "ifo_set (pycbc.types.optparse.dictwithdefaultreturn attribute)": [[74, "pycbc.types.optparse.DictWithDefaultReturn.ifo_set"]], "imag() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.imag"]], "inject() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.inject"]], "inner() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.inner"]], "inner() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.inner"]], "inner_real() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.inner_real"]], "interpolate_string() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.interpolate_string"]], "itemsize (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.itemsize"]], "kind (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.kind"]], "lal() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.lal"]], "lal() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.lal"]], "lal() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.lal"]], "load_array() (in module pycbc.types.array)": [[74, "pycbc.types.array.load_array"]], "load_frequencyseries() (in module pycbc.types.frequencyseries)": [[74, "pycbc.types.frequencyseries.load_frequencyseries"]], "load_timeseries() (in module pycbc.types.timeseries)": [[74, "pycbc.types.timeseries.load_timeseries"]], "lowpass_fir() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.lowpass_fir"]], "match() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.match"]], "match() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.match"]], "max() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.max"]], "max() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.max"]], "max_loc() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.max_loc"]], "max_loc() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.max_loc"]], "min() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.min"]], "min() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.min"]], "multiply_and_add() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.multiply_and_add"]], "multiply_and_add() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.multiply_and_add"]], "nbytes (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.nbytes"]], "ndim (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.ndim"]], "nonnegative_float() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.nonnegative_float"]], "nonnegative_int() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.nonnegative_int"]], "notch_fir() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.notch_fir"]], "numpy() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.numpy"]], "numpy() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.numpy"]], "perform_extended_interpolation() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.perform_extended_interpolation"]], "plot() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.plot"]], "plot() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.plot"]], "populate_shared_sections() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.populate_shared_sections"]], "positive_float() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.positive_float"]], "positive_int() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.positive_int"]], "precision (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.precision"]], "prepend_zeros() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.prepend_zeros"]], "psd() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.psd"]], "ptr (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.ptr"]], "ptr() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.ptr"]], "pycbc.types": [[74, "module-pycbc.types"]], "pycbc.types.aligned": [[74, "module-pycbc.types.aligned"]], "pycbc.types.array": [[74, "module-pycbc.types.array"]], "pycbc.types.array_cpu": [[74, "module-pycbc.types.array_cpu"]], "pycbc.types.config": [[74, "module-pycbc.types.config"]], "pycbc.types.frequencyseries": [[74, "module-pycbc.types.frequencyseries"]], "pycbc.types.optparse": [[74, "module-pycbc.types.optparse"]], "pycbc.types.timeseries": [[74, "module-pycbc.types.timeseries"]], "qtransform() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.qtransform"]], "read_ini_file() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.read_ini_file"]], "real() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.real"]], "real_same_precision_as() (in module pycbc.types.array)": [[74, "pycbc.types.array.real_same_precision_as"]], "required_opts() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.required_opts"]], "required_opts_multi_ifo() (in module pycbc.types.optparse)": [[74, "pycbc.types.optparse.required_opts_multi_ifo"]], "resample() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.resample"]], "resize() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.resize"]], "roll() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.roll"]], "sample_frequencies (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.sample_frequencies"]], "sample_rate (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.sample_rate"]], "sample_rate (pycbc.types.timeseries.timeseries property)": [[74, "pycbc.types.timeseries.TimeSeries.sample_rate"]], "sample_rate_close() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.sample_rate_close"]], "sample_times (pycbc.types.timeseries.timeseries property)": [[74, "pycbc.types.timeseries.TimeSeries.sample_times"]], "sanitize_newline() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.sanitize_newline"]], "sanity_check_subsections() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.sanity_check_subsections"]], "save() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.save"]], "save() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.save"]], "save() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.save"]], "save_to_wav() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.save_to_wav"]], "shape (pycbc.types.array.array property)": [[74, "pycbc.types.array.Array.shape"]], "split_multi_sections() (pycbc.types.config.interpolatingconfigparser method)": [[74, "pycbc.types.config.InterpolatingConfigParser.split_multi_sections"]], "squared_norm() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.squared_norm"]], "squared_norm() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.squared_norm"]], "start_time (pycbc.types.frequencyseries.frequencyseries property)": [[74, "pycbc.types.frequencyseries.FrequencySeries.start_time"]], "start_time (pycbc.types.timeseries.timeseries property)": [[74, "pycbc.types.timeseries.TimeSeries.start_time"]], "sum() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.sum"]], "sum() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.sum"]], "take() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.take"]], "take() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.take"]], "time_slice() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.time_slice"]], "to_astropy() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.to_astropy"]], "to_frequencyseries() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.to_frequencyseries"]], "to_frequencyseries() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.to_frequencyseries"]], "to_timeseries() (pycbc.types.frequencyseries.frequencyseries method)": [[74, "pycbc.types.frequencyseries.FrequencySeries.to_timeseries"]], "to_timeseries() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.to_timeseries"]], "trim_zeros() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.trim_zeros"]], "vdot() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.vdot"]], "vdot() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.vdot"]], "view() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.view"]], "weighted_inner() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.weighted_inner"]], "weighted_inner() (pycbc.types.array.array method)": [[74, "pycbc.types.array.Array.weighted_inner"]], "whiten() (pycbc.types.timeseries.timeseries method)": [[74, "pycbc.types.timeseries.TimeSeries.whiten"]], "zeros() (in module pycbc.types.aligned)": [[74, "pycbc.types.aligned.zeros"]], "zeros() (in module pycbc.types.array)": [[74, "pycbc.types.array.zeros"]], "zeros() (in module pycbc.types.array_cpu)": [[74, "pycbc.types.array_cpu.zeros"]], "singledetautochisq (class in pycbc.vetoes.autochisq)": [[75, "pycbc.vetoes.autochisq.SingleDetAutoChisq"]], "singledetbankveto (class in pycbc.vetoes.bank_chisq)": [[75, "pycbc.vetoes.bank_chisq.SingleDetBankVeto"]], "singledetpowerchisq (class in pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.SingleDetPowerChisq"]], "singledetsgchisq (class in pycbc.vetoes.sgchisq)": [[75, "pycbc.vetoes.sgchisq.SingleDetSGChisq"]], "singledetskymaxautochisq (class in pycbc.vetoes.autochisq)": [[75, "pycbc.vetoes.autochisq.SingleDetSkyMaxAutoChisq"]], "singledetskymaxbankveto (class in pycbc.vetoes.bank_chisq)": [[75, "pycbc.vetoes.bank_chisq.SingleDetSkyMaxBankVeto"]], "singledetskymaxpowerchisq (class in pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq"]], "autochisq_from_precomputed() (in module pycbc.vetoes.autochisq)": [[75, "pycbc.vetoes.autochisq.autochisq_from_precomputed"]], "bank_chisq_from_filters() (in module pycbc.vetoes.bank_chisq)": [[75, "pycbc.vetoes.bank_chisq.bank_chisq_from_filters"]], "cache_overlaps() (pycbc.vetoes.bank_chisq.singledetbankveto method)": [[75, "pycbc.vetoes.bank_chisq.SingleDetBankVeto.cache_overlaps"]], "cache_segment_snrs() (pycbc.vetoes.bank_chisq.singledetbankveto method)": [[75, "pycbc.vetoes.bank_chisq.SingleDetBankVeto.cache_segment_snrs"]], "cached_chisq_bins() (pycbc.vetoes.chisq.singledetpowerchisq method)": [[75, "pycbc.vetoes.chisq.SingleDetPowerChisq.cached_chisq_bins"]], "calculate_chisq_bins() (pycbc.vetoes.chisq.singledetskymaxpowerchisq method)": [[75, "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq.calculate_chisq_bins"]], "chisq_accum_bin() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.chisq_accum_bin"]], "chisq_accum_bin() (in module pycbc.vetoes.chisq_cpu)": [[75, "pycbc.vetoes.chisq_cpu.chisq_accum_bin"]], "chisq_accum_bin_cython() (in module pycbc.vetoes.chisq_cpu)": [[75, "pycbc.vetoes.chisq_cpu.chisq_accum_bin_cython"]], "chisq_accum_bin_numpy() (in module pycbc.vetoes.chisq_cpu)": [[75, "pycbc.vetoes.chisq_cpu.chisq_accum_bin_numpy"]], "fastest_power_chisq_at_points() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.fastest_power_chisq_at_points"]], "from_cli() (pycbc.vetoes.sgchisq.singledetsgchisq class method)": [[75, "pycbc.vetoes.sgchisq.SingleDetSGChisq.from_cli"]], "insert_option_group() (pycbc.vetoes.sgchisq.singledetsgchisq static method)": [[75, "pycbc.vetoes.sgchisq.SingleDetSGChisq.insert_option_group"]], "parse_option() (pycbc.vetoes.chisq.singledetpowerchisq static method)": [[75, "pycbc.vetoes.chisq.SingleDetPowerChisq.parse_option"]], "point_chisq_code() (in module pycbc.vetoes.chisq_cpu)": [[75, "pycbc.vetoes.chisq_cpu.point_chisq_code"]], "power_chisq() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.power_chisq"]], "power_chisq_at_points_from_precomputed() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.power_chisq_at_points_from_precomputed"]], "power_chisq_bins() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.power_chisq_bins"]], "power_chisq_bins_from_sigmasq_series() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.power_chisq_bins_from_sigmasq_series"]], "power_chisq_from_precomputed() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.power_chisq_from_precomputed"]], "pycbc.vetoes": [[75, "module-pycbc.vetoes"]], "pycbc.vetoes.autochisq": [[75, "module-pycbc.vetoes.autochisq"]], "pycbc.vetoes.bank_chisq": [[75, "module-pycbc.vetoes.bank_chisq"]], "pycbc.vetoes.chisq": [[75, "module-pycbc.vetoes.chisq"]], "pycbc.vetoes.chisq_cpu": [[75, "module-pycbc.vetoes.chisq_cpu"]], "pycbc.vetoes.sgchisq": [[75, "module-pycbc.vetoes.sgchisq"]], "returns (pycbc.vetoes.sgchisq.singledetsgchisq attribute)": [[75, "pycbc.vetoes.sgchisq.SingleDetSGChisq.returns"]], "segment_snrs() (in module pycbc.vetoes.bank_chisq)": [[75, "pycbc.vetoes.bank_chisq.segment_snrs"]], "shift_sum() (in module pycbc.vetoes.chisq)": [[75, "pycbc.vetoes.chisq.shift_sum"]], "shift_sum() (in module pycbc.vetoes.chisq_cpu)": [[75, "pycbc.vetoes.chisq_cpu.shift_sum"]], "template_overlaps() (in module pycbc.vetoes.bank_chisq)": [[75, "pycbc.vetoes.bank_chisq.template_overlaps"]], "values() (pycbc.vetoes.autochisq.singledetautochisq method)": [[75, "pycbc.vetoes.autochisq.SingleDetAutoChisq.values"]], "values() (pycbc.vetoes.autochisq.singledetskymaxautochisq method)": [[75, "pycbc.vetoes.autochisq.SingleDetSkyMaxAutoChisq.values"]], "values() (pycbc.vetoes.bank_chisq.singledetbankveto method)": [[75, "pycbc.vetoes.bank_chisq.SingleDetBankVeto.values"]], "values() (pycbc.vetoes.bank_chisq.singledetskymaxbankveto method)": [[75, "pycbc.vetoes.bank_chisq.SingleDetSkyMaxBankVeto.values"]], "values() (pycbc.vetoes.chisq.singledetpowerchisq method)": [[75, "pycbc.vetoes.chisq.SingleDetPowerChisq.values"]], "values() (pycbc.vetoes.chisq.singledetskymaxpowerchisq method)": [[75, "pycbc.vetoes.chisq.SingleDetSkyMaxPowerChisq.values"]], "values() (pycbc.vetoes.sgchisq.singledetsgchisq method)": [[75, "pycbc.vetoes.sgchisq.SingleDetSGChisq.values"]], "basecbcgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.BaseCBCGenerator"]], "basefdomaindetframegenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator"]], "basegenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.BaseGenerator"]], "compressedwaveform (class in pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.CompressedWaveform"]], "fdomaincbcgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainCBCGenerator"]], "fdomaincbcmodesgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainCBCModesGenerator"]], "fdomaindetframegenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator"]], "fdomaindetframemodesgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator"]], "fdomaindetframetwopolgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator"]], "fdomaindetframetwopolnorespgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator"]], "fdomainfreqtauringdowngenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainFreqTauRingdownGenerator"]], "fdomainmassspinringdowngenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.FDomainMassSpinRingdownGenerator"]], "failedwaveformerror": [[76, "pycbc.waveform.waveform.FailedWaveformError"]], "filterbank (class in pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.FilterBank"]], "filterbankskymax (class in pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.FilterBankSkyMax"]], "kerr_factor() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.Kerr_factor"]], "livefilterbank (class in pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.LiveFilterBank"]], "nowaveformerror": [[76, "pycbc.waveform.waveform.NoWaveformError"]], "parameter (class in pycbc.waveform.parameters)": [[76, "pycbc.waveform.parameters.Parameter"]], "parameterlist (class in pycbc.waveform.parameters)": [[76, "pycbc.waveform.parameters.ParameterList"]], "tdomaincbcgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.TDomainCBCGenerator"]], "tdomaincbcmodesgenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.TDomainCBCModesGenerator"]], "tdomainfreqtauringdowngenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.TDomainFreqTauRingdownGenerator"]], "tdomainmassspinringdowngenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.TDomainMassSpinRingdownGenerator"]], "tdomainsupernovaegenerator (class in pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.TDomainSupernovaeGenerator"]], "templatebank (class in pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.TemplateBank"]], "add_approximant_arg() (in module pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.add_approximant_arg"]], "add_custom_waveform() (in module pycbc.waveform.plugin)": [[76, "pycbc.waveform.plugin.add_custom_waveform"]], "add_length_estimator() (in module pycbc.waveform.plugin)": [[76, "pycbc.waveform.plugin.add_length_estimator"]], "amplitude (pycbc.waveform.compress.compressedwaveform property)": [[76, "pycbc.waveform.compress.CompressedWaveform.amplitude"]], "amplitude_from_frequencyseries() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.amplitude_from_frequencyseries"]], "amplitude_from_polarizations() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.amplitude_from_polarizations"]], "apply_fd_time_shift() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.apply_fd_time_shift"]], "apply_fseries_time_shift() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.apply_fseries_time_shift"]], "apply_fseries_time_shift() (in module pycbc.waveform.utils_cpu)": [[76, "pycbc.waveform.utils_cpu.apply_fseries_time_shift"]], "approximant() (pycbc.waveform.bank.templatebank method)": [[76, "pycbc.waveform.bank.TemplateBank.approximant"]], "asdict (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.asdict"]], "aslist (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.aslist"]], "boolargs_from_apprxstr() (in module pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.boolargs_from_apprxstr"]], "cbrt_lookup() (in module pycbc.waveform.spa_tmplt_cpu)": [[76, "pycbc.waveform.spa_tmplt_cpu.cbrt_lookup"]], "ceilpow2() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.ceilpow2"]], "clear_cache() (pycbc.waveform.compress.compressedwaveform method)": [[76, "pycbc.waveform.compress.CompressedWaveform.clear_cache"]], "coalign_waveforms() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.coalign_waveforms"]], "compress_waveform() (in module pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.compress_waveform"]], "current_params (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.current_params"]], "current_params (pycbc.waveform.generator.basegenerator attribute)": [[76, "pycbc.waveform.generator.BaseGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.current_params"]], "current_params (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.current_params"]], "decomp_ccode_double() (in module pycbc.waveform.decompress_cpu_cython)": [[76, "pycbc.waveform.decompress_cpu_cython.decomp_ccode_double"]], "decomp_ccode_float() (in module pycbc.waveform.decompress_cpu_cython)": [[76, "pycbc.waveform.decompress_cpu_cython.decomp_ccode_float"]], "decompress() (pycbc.waveform.compress.compressedwaveform method)": [[76, "pycbc.waveform.compress.CompressedWaveform.decompress"]], "default_dict() (pycbc.waveform.parameters.parameterlist method)": [[76, "pycbc.waveform.parameters.ParameterList.default_dict"]], "default_modes() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.default_modes"]], "defaults() (pycbc.waveform.parameters.parameterlist method)": [[76, "pycbc.waveform.parameters.ParameterList.defaults"]], "description_dict (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.description_dict"]], "descriptions (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.descriptions"]], "detector_names (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.detector_names"]], "detector_names (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.detector_names"]], "detectors (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.detectors"]], "detectors (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.detectors"]], "docstr() (pycbc.waveform.parameters.parameter method)": [[76, "pycbc.waveform.parameters.Parameter.docstr"]], "docstr() (pycbc.waveform.parameters.parameterlist method)": [[76, "pycbc.waveform.parameters.ParameterList.docstr"]], "dtype_dict (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.dtype_dict"]], "dtypes (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.dtypes"]], "end_frequency() (pycbc.waveform.bank.templatebank method)": [[76, "pycbc.waveform.bank.TemplateBank.end_frequency"]], "ensure_hash() (pycbc.waveform.bank.templatebank method)": [[76, "pycbc.waveform.bank.TemplateBank.ensure_hash"]], "ensure_standard_filter_columns() (pycbc.waveform.bank.templatebank method)": [[76, "pycbc.waveform.bank.TemplateBank.ensure_standard_filter_columns"]], "epoch (pycbc.waveform.generator.basefdomaindetframegenerator property)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.epoch"]], "epoch (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.epoch"]], "extra_args (pycbc.waveform.bank.templatebank attribute)": [[76, "pycbc.waveform.bank.TemplateBank.extra_args"]], "fd_approximants() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.fd_approximants"]], "fd_damped_sinusoid() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.fd_damped_sinusoid"]], "fd_decompress() (in module pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.fd_decompress"]], "fd_output_vector() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.fd_output_vector"]], "fd_sine_gaussian() (in module pycbc.waveform.sinegauss)": [[76, "pycbc.waveform.sinegauss.fd_sine_gaussian"]], "fd_taper() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.fd_taper"]], "fd_to_td() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.fd_to_td"]], "fd_waveform_mode_approximants() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.fd_waveform_mode_approximants"]], "filehandler (pycbc.waveform.bank.templatebank attribute)": [[76, "pycbc.waveform.bank.TemplateBank.filehandler"]], "filter_approximants() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.filter_approximants"]], "find_variable_start_frequency() (in module pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.find_variable_start_frequency"]], "findchirp_chirptime() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.findchirp_chirptime"]], "format_lmns() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.format_lmns"]], "frequency_from_polarizations() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.frequency_from_polarizations"]], "from_hdf() (pycbc.waveform.compress.compressedwaveform class method)": [[76, "pycbc.waveform.compress.CompressedWaveform.from_hdf"]], "frozen_location_args (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.frozen_location_args"]], "frozen_location_args (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.frozen_location_args"]], "frozen_params (pycbc.waveform.generator.basegenerator attribute)": [[76, "pycbc.waveform.generator.BaseGenerator.frozen_params"]], "fstimeshift() (in module pycbc.waveform.utils_cpu)": [[76, "pycbc.waveform.utils_cpu.fstimeshift"]], "fstimeshift32() (in module pycbc.waveform.utils_cpu)": [[76, "pycbc.waveform.utils_cpu.fstimeshift32"]], "generate() (pycbc.waveform.generator.basefdomaindetframegenerator method)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.generate"]], "generate() (pycbc.waveform.generator.basegenerator method)": [[76, "pycbc.waveform.generator.BaseGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframegenerator method)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframemodesgenerator method)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframetwopolgenerator method)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.generate"]], "generate() (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator method)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.generate"]], "generate_with_delta_f_and_max_freq() (pycbc.waveform.bank.filterbank method)": [[76, "pycbc.waveform.bank.FilterBank.generate_with_delta_f_and_max_freq"]], "generator (pycbc.waveform.generator.basegenerator attribute)": [[76, "pycbc.waveform.generator.BaseGenerator.generator"]], "get_cbrt() (in module pycbc.waveform.spa_tmplt_cpu)": [[76, "pycbc.waveform.spa_tmplt_cpu.get_cbrt"]], "get_corecollapse_bounce() (in module pycbc.waveform.supernovae)": [[76, "pycbc.waveform.supernovae.get_corecollapse_bounce"]], "get_decompressed_waveform() (pycbc.waveform.bank.filterbank method)": [[76, "pycbc.waveform.bank.FilterBank.get_decompressed_waveform"]], "get_fd_det_waveform() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_fd_det_waveform"]], "get_fd_det_waveform_sequence() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_fd_det_waveform_sequence"]], "get_fd_from_final_mass_spin() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.get_fd_from_final_mass_spin"]], "get_fd_from_freqtau() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.get_fd_from_freqtau"]], "get_fd_waveform() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_fd_waveform"]], "get_fd_waveform_from_td() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_fd_waveform_from_td"]], "get_fd_waveform_modes() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.get_fd_waveform_modes"]], "get_fd_waveform_sequence() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_fd_waveform_sequence"]], "get_glm() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.get_glm"]], "get_imrphenomxh_modes() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.get_imrphenomxh_modes"]], "get_log() (in module pycbc.waveform.spa_tmplt_cpu)": [[76, "pycbc.waveform.spa_tmplt_cpu.get_log"]], "get_nrsur_modes() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.get_nrsur_modes"]], "get_sgburst_waveform() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_sgburst_waveform"]], "get_td_det_waveform_from_fd_det() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_td_det_waveform_from_fd_det"]], "get_td_from_final_mass_spin() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.get_td_from_final_mass_spin"]], "get_td_from_freqtau() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.get_td_from_freqtau"]], "get_td_waveform() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_td_waveform"]], "get_td_waveform_from_fd() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_td_waveform_from_fd"]], "get_td_waveform_modes() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.get_td_waveform_modes"]], "get_template() (pycbc.waveform.bank.livefilterbank method)": [[76, "pycbc.waveform.bank.LiveFilterBank.get_template"]], "get_template_amplitude_norm() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_template_amplitude_norm"]], "get_two_pol_waveform_filter() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_two_pol_waveform_filter"]], "get_waveform_end_frequency() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_waveform_end_frequency"]], "get_waveform_filter() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_waveform_filter"]], "get_waveform_filter_length_in_time() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_waveform_filter_length_in_time"]], "get_waveform_filter_norm() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.get_waveform_filter_norm"]], "getslice() (pycbc.waveform.bank.livefilterbank method)": [[76, "pycbc.waveform.bank.LiveFilterBank.getslice"]], "has_compressed_waveforms (pycbc.waveform.bank.templatebank attribute)": [[76, "pycbc.waveform.bank.TemplateBank.has_compressed_waveforms"]], "id_from_param() (pycbc.waveform.bank.livefilterbank method)": [[76, "pycbc.waveform.bank.LiveFilterBank.id_from_param"]], "indoc (pycbc.waveform.bank.templatebank attribute)": [[76, "pycbc.waveform.bank.TemplateBank.indoc"]], "inline_linear_interp() (in module pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.inline_linear_interp"]], "inline_linear_interp() (in module pycbc.waveform.decompress_cpu)": [[76, "pycbc.waveform.decompress_cpu.inline_linear_interp"]], "interpolation (pycbc.waveform.compress.compressedwaveform attribute)": [[76, "pycbc.waveform.compress.CompressedWaveform.interpolation"]], "label_dict (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.label_dict"]], "labels (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.labels"]], "lm_amps_phases() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.lm_amps_phases"]], "lm_arbitrary_harmonics() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.lm_arbitrary_harmonics"]], "lm_deltaf() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.lm_deltaf"]], "lm_deltat() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.lm_deltat"]], "lm_ffinal() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.lm_ffinal"]], "lm_freqs_taus() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.lm_freqs_taus"]], "lm_tfinal() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.lm_tfinal"]], "load_to_memory (pycbc.waveform.compress.compressedwaveform attribute)": [[76, "pycbc.waveform.compress.CompressedWaveform.load_to_memory"]], "location_args (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.location_args"]], "location_args (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.location_args"]], "location_args (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.location_args"]], "location_args (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.location_args"]], "logv_lookup() (in module pycbc.waveform.spa_tmplt_cpu)": [[76, "pycbc.waveform.spa_tmplt_cpu.logv_lookup"]], "mchirp_compression() (in module pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.mchirp_compression"]], "mismatch (pycbc.waveform.compress.compressedwaveform attribute)": [[76, "pycbc.waveform.compress.CompressedWaveform.mismatch"]], "multiband_fd_waveform() (in module pycbc.waveform.multiband)": [[76, "pycbc.waveform.multiband.multiband_fd_waveform"]], "multimode_base() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.multimode_base"]], "names (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.names"]], "nltides_fourier_phase_difference() (in module pycbc.waveform.nltides)": [[76, "pycbc.waveform.nltides.nltides_fourier_phase_difference"]], "nodefaults (pycbc.waveform.parameters.parameterlist property)": [[76, "pycbc.waveform.parameters.ParameterList.nodefaults"]], "nonlinear_tidal_spa() (in module pycbc.waveform.nltides)": [[76, "pycbc.waveform.nltides.nonlinear_tidal_spa"]], "parameters (pycbc.waveform.bank.templatebank property)": [[76, "pycbc.waveform.bank.TemplateBank.parameters"]], "parse_approximant() (pycbc.waveform.bank.templatebank method)": [[76, "pycbc.waveform.bank.TemplateBank.parse_approximant"]], "parse_approximant_arg() (in module pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.parse_approximant_arg"]], "parse_mode() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.parse_mode"]], "phase (pycbc.waveform.compress.compressedwaveform property)": [[76, "pycbc.waveform.compress.CompressedWaveform.phase"]], "phase_from_frequencyseries() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.phase_from_frequencyseries"]], "phase_from_polarizations() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.phase_from_polarizations"]], "possible_args (pycbc.waveform.generator.basecbcgenerator attribute)": [[76, "pycbc.waveform.generator.BaseCBCGenerator.possible_args"]], "precision (pycbc.waveform.compress.compressedwaveform attribute)": [[76, "pycbc.waveform.compress.CompressedWaveform.precision"]], "premerger_taylorf2() (in module pycbc.waveform.premerger)": [[76, "pycbc.waveform.premerger.premerger_taylorf2"]], "print_fd_approximants() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.print_fd_approximants"]], "print_sgburst_approximants() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.print_sgburst_approximants"]], "print_td_approximants() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.print_td_approximants"]], "props() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.props"]], "pycbc.waveform": [[76, "module-pycbc.waveform"]], "pycbc.waveform.bank": [[76, "module-pycbc.waveform.bank"]], "pycbc.waveform.compress": [[76, "module-pycbc.waveform.compress"]], "pycbc.waveform.decompress_cpu": [[76, "module-pycbc.waveform.decompress_cpu"]], "pycbc.waveform.decompress_cpu_cython": [[76, "module-pycbc.waveform.decompress_cpu_cython"]], "pycbc.waveform.generator": [[76, "module-pycbc.waveform.generator"]], "pycbc.waveform.multiband": [[76, "module-pycbc.waveform.multiband"]], "pycbc.waveform.nltides": [[76, "module-pycbc.waveform.nltides"]], "pycbc.waveform.parameters": [[76, "module-pycbc.waveform.parameters"]], "pycbc.waveform.plugin": [[76, "module-pycbc.waveform.plugin"]], "pycbc.waveform.premerger": [[76, "module-pycbc.waveform.premerger"]], "pycbc.waveform.ringdown": [[76, "module-pycbc.waveform.ringdown"]], "pycbc.waveform.sinegauss": [[76, "module-pycbc.waveform.sinegauss"]], "pycbc.waveform.spa_tmplt": [[76, "module-pycbc.waveform.spa_tmplt"]], "pycbc.waveform.spa_tmplt_cpu": [[76, "module-pycbc.waveform.spa_tmplt_cpu"]], "pycbc.waveform.supernovae": [[76, "module-pycbc.waveform.supernovae"]], "pycbc.waveform.utils": [[76, "module-pycbc.waveform.utils"]], "pycbc.waveform.utils_cpu": [[76, "module-pycbc.waveform.utils_cpu"]], "pycbc.waveform.waveform": [[76, "module-pycbc.waveform.waveform"]], "pycbc.waveform.waveform_modes": [[76, "module-pycbc.waveform.waveform_modes"]], "qnm_freq_decay() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.qnm_freq_decay"]], "qnm_time_decay() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.qnm_time_decay"]], "retrieve_waveform_plugins() (in module pycbc.waveform.plugin)": [[76, "pycbc.waveform.plugin.retrieve_waveform_plugins"]], "rframe_generator (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.rframe_generator"]], "rframe_generator (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.rframe_generator"]], "rough_time_estimate() (in module pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.rough_time_estimate"]], "round_up() (pycbc.waveform.bank.livefilterbank method)": [[76, "pycbc.waveform.bank.LiveFilterBank.round_up"]], "sample_points (pycbc.waveform.compress.compressedwaveform property)": [[76, "pycbc.waveform.compress.CompressedWaveform.sample_points"]], "select_rframe_generator() (pycbc.waveform.generator.basefdomaindetframegenerator method)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframegenerator static method)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframemodesgenerator static method)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframetwopolgenerator static method)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.select_rframe_generator"]], "select_rframe_generator() (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator static method)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.select_rframe_generator"]], "select_waveform_generator() (in module pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.select_waveform_generator"]], "select_waveform_modes_generator() (in module pycbc.waveform.generator)": [[76, "pycbc.waveform.generator.select_waveform_modes_generator"]], "set_epoch() (pycbc.waveform.generator.basefdomaindetframegenerator method)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.set_epoch"]], "sgburst_approximants() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.sgburst_approximants"]], "sigma_cached() (in module pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.sigma_cached"]], "spa_amplitude_factor() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_amplitude_factor"]], "spa_compression() (in module pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.spa_compression"]], "spa_distance() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_distance"]], "spa_length_in_time() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_length_in_time"]], "spa_tmplt() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_tmplt"]], "spa_tmplt_end() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_tmplt_end"]], "spa_tmplt_engine() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_tmplt_engine"]], "spa_tmplt_engine() (in module pycbc.waveform.spa_tmplt_cpu)": [[76, "pycbc.waveform.spa_tmplt_cpu.spa_tmplt_engine"]], "spa_tmplt_inline_sequence() (in module pycbc.waveform.spa_tmplt_cpu)": [[76, "pycbc.waveform.spa_tmplt_cpu.spa_tmplt_inline_sequence"]], "spa_tmplt_norm() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_tmplt_norm"]], "spa_tmplt_precondition() (in module pycbc.waveform.spa_tmplt)": [[76, "pycbc.waveform.spa_tmplt.spa_tmplt_precondition"]], "spher_harms() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.spher_harms"]], "static_args (pycbc.waveform.generator.basefdomaindetframegenerator property)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.static_args"]], "static_args (pycbc.waveform.generator.basegenerator property)": [[76, "pycbc.waveform.generator.BaseGenerator.static_args"]], "sum_modes() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.sum_modes"]], "table (pycbc.waveform.bank.templatebank attribute)": [[76, "pycbc.waveform.bank.TemplateBank.table"]], "taper_timeseries() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.taper_timeseries"]], "td_approximants() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.td_approximants"]], "td_damped_sinusoid() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.td_damped_sinusoid"]], "td_output_vector() (in module pycbc.waveform.ringdown)": [[76, "pycbc.waveform.ringdown.td_output_vector"]], "td_taper() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.td_taper"]], "td_waveform_mode_approximants() (in module pycbc.waveform.waveform_modes)": [[76, "pycbc.waveform.waveform_modes.td_waveform_mode_approximants"]], "td_waveform_to_fd_waveform() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.td_waveform_to_fd_waveform"]], "template_thinning() (pycbc.waveform.bank.templatebank method)": [[76, "pycbc.waveform.bank.TemplateBank.template_thinning"]], "time_from_frequencyseries() (in module pycbc.waveform.utils)": [[76, "pycbc.waveform.utils.time_from_frequencyseries"]], "tolerance (pycbc.waveform.compress.compressedwaveform attribute)": [[76, "pycbc.waveform.compress.CompressedWaveform.tolerance"]], "tuple_to_hash() (in module pycbc.waveform.bank)": [[76, "pycbc.waveform.bank.tuple_to_hash"]], "variable_args (pycbc.waveform.generator.basefdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.BaseFDomainDetFrameGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.basegenerator attribute)": [[76, "pycbc.waveform.generator.BaseGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframegenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframemodesgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameModesGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframetwopolgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolGenerator.variable_args"]], "variable_args (pycbc.waveform.generator.fdomaindetframetwopolnorespgenerator attribute)": [[76, "pycbc.waveform.generator.FDomainDetFrameTwoPolNoRespGenerator.variable_args"]], "vecdiff() (in module pycbc.waveform.compress)": [[76, "pycbc.waveform.compress.vecdiff"]], "waveform_norm_exists() (in module pycbc.waveform.waveform)": [[76, "pycbc.waveform.waveform.waveform_norm_exists"]], "write_to_hdf() (pycbc.waveform.bank.templatebank method)": [[76, "pycbc.waveform.bank.TemplateBank.write_to_hdf"]], "write_to_hdf() (pycbc.waveform.compress.compressedwaveform method)": [[76, "pycbc.waveform.compress.CompressedWaveform.write_to_hdf"]], "all_triggers (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.ALL_TRIGGERS"]], "calledprocesserrormod": [[77, "pycbc.workflow.core.CalledProcessErrorMod"]], "censorforeground (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.CensorForeground"]], "executable (class in pycbc.workflow.core)": [[77, "pycbc.workflow.core.Executable"]], "executable (class in pycbc.workflow.pegasus_workflow)": [[77, "pycbc.workflow.pegasus_workflow.Executable"]], "final_result (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.FINAL_RESULT"]], "file (class in pycbc.workflow.core)": [[77, "pycbc.workflow.core.File"]], "file (class in pycbc.workflow.pegasus_workflow)": [[77, "pycbc.workflow.pegasus_workflow.File"]], "filelist (class in pycbc.workflow.core)": [[77, "pycbc.workflow.core.FileList"]], "intermediate_product (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.INTERMEDIATE_PRODUCT"]], "jobsegmenter (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.JobSegmenter"]], "keep_but_raise_warning (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.KEEP_BUT_RAISE_WARNING"]], "lalappsinspinjexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.LalappsInspinjExecutable"]], "ligolwaddexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.LigolwAddExecutable"]], "ligolwcbcaligntotalspinexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.LigolwCBCAlignTotalSpinExecutable"]], "ligolwcbcjitterskylocexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.LigolwCBCJitterSkylocExecutable"]], "merged_triggers (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.MERGED_TRIGGERS"]], "mergeexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.MergeExecutable"]], "node (class in pycbc.workflow.core)": [[77, "pycbc.workflow.core.Node"]], "node (class in pycbc.workflow.pegasus_workflow)": [[77, "pycbc.workflow.pegasus_workflow.Node"]], "plotexecutable (class in pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.PlotExecutable"]], "plotqscanexecutable (class in pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.PlotQScanExecutable"]], "profileshortcuts (class in pycbc.workflow.pegasus_workflow)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts"]], "pycbcaddstatmap (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCAddStatmap"]], "pycbcbank2hdfexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable"]], "pycbcbintriggerratesdqexecutable (class in pycbc.workflow.dq)": [[77, "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable"]], "pycbccalculatedqexecutable (class in pycbc.workflow.dq)": [[77, "pycbc.workflow.dq.PyCBCCalculateDQExecutable"]], "pycbccalculatedqflagexecutable (class in pycbc.workflow.dq)": [[77, "pycbc.workflow.dq.PyCBCCalculateDQFlagExecutable"]], "pycbccombinestatmap (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCCombineStatmap"]], "pycbcdistributebackgroundbins (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins"]], "pycbcexcludezerolag (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCExcludeZerolag"]], "pycbcfindcoincexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCFindCoincExecutable"]], "pycbcfindsnglsexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable"]], "pycbcfitbytemplateexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable"]], "pycbcfitoverparamexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable"]], "pycbchdfinjfindexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable"]], "pycbcinspiralexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable"]], "pycbcmergehdfexecutable (class in pycbc.workflow.injection)": [[77, "pycbc.workflow.injection.PyCBCMergeHDFExecutable"]], "pycbcmultiinspiralexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable"]], "pycbcoptimalsnrexecutable (class in pycbc.workflow.injection)": [[77, "pycbc.workflow.injection.PyCBCOptimalSNRExecutable"]], "pycbcrerankdqexecutable (class in pycbc.workflow.dq)": [[77, "pycbc.workflow.dq.PyCBCRerankDQExecutable"]], "pycbcsnglsstatmapexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable"]], "pycbcsnglsstatmapinjexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable"]], "pycbcstatmapexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCStatMapExecutable"]], "pycbcstatmapinjexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable"]], "pycbctmpltbankexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable"]], "pycbctrig2hdfexecutable (class in pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable"]], "pycbcconditionstrainexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable"]], "pycbccreateinjectionsexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable"]], "pycbcdarkvsbrightinjectionsexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcDarkVsBrightInjectionsExecutable"]], "pycbcgrbinjcombinerexecutable (class in pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable"]], "pycbcgrbinjfinderexecutable (class in pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable"]], "pycbcgrbtrigclusterexecutable (class in pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable"]], "pycbcgrbtrigcombinerexecutable (class in pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable"]], "pycbchdfsplitinjexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable"]], "pycbcinferenceexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcInferenceExecutable"]], "pycbcsplitbankexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable"]], "pycbcsplitbankxmlexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcSplitBankXmlExecutable"]], "pycbcsplitinspinjexecutable (class in pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable"]], "segfile (class in pycbc.workflow.core)": [[77, "pycbc.workflow.core.SegFile"]], "singletemplateexecutable (class in pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.SingleTemplateExecutable"]], "singletimefreqexecutable (class in pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.SingleTimeFreqExecutable"]], "subworkflow (class in pycbc.workflow.pegasus_workflow)": [[77, "pycbc.workflow.pegasus_workflow.SubWorkflow"]], "transformation (class in pycbc.workflow.pegasus_workflow)": [[77, "pycbc.workflow.pegasus_workflow.Transformation"]], "workflow (class in pycbc.workflow.core)": [[77, "pycbc.workflow.core.Workflow"]], "workflow (class in pycbc.workflow.pegasus_workflow)": [[77, "pycbc.workflow.pegasus_workflow.Workflow"]], "workflowconfigparser (class in pycbc.workflow.configuration)": [[77, "pycbc.workflow.configuration.WorkflowConfigParser"]], "add_arg() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_arg"]], "add_condorpool_copy_site() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_condorpool_copy_site"]], "add_condorpool_shared_site() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_condorpool_shared_site"]], "add_condorpool_symlink_site() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_condorpool_symlink_site"]], "add_container() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.add_container"]], "add_explicit_dependancy() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.add_explicit_dependancy"]], "add_ini_profile() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.add_ini_profile"]], "add_ini_site_profile() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_ini_site_profile"]], "add_input() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_input"]], "add_input_arg() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_input_arg"]], "add_input_list_opt() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_input_list_opt"]], "add_input_opt() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_input_opt"]], "add_into_workflow() (pycbc.workflow.pegasus_workflow.subworkflow method)": [[77, "pycbc.workflow.pegasus_workflow.SubWorkflow.add_into_workflow"]], "add_list_opt() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_list_opt"]], "add_local_site() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_local_site"]], "add_metadata() (pycbc.workflow.core.file method)": [[77, "pycbc.workflow.core.File.add_metadata"]], "add_multiifo_input_list_opt() (pycbc.workflow.core.node method)": [[77, "pycbc.workflow.core.Node.add_multiifo_input_list_opt"]], "add_multiifo_output_list_opt() (pycbc.workflow.core.node method)": [[77, "pycbc.workflow.core.Node.add_multiifo_output_list_opt"]], "add_node() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.add_node"]], "add_opt() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.add_opt"]], "add_opt() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_opt"]], "add_options_to_section() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.add_options_to_section"]], "add_osg_site() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_osg_site"]], "add_output() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_output"]], "add_output_arg() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_output_arg"]], "add_output_list_opt() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_output_list_opt"]], "add_output_opt() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_output_opt"]], "add_pfn() (pycbc.workflow.pegasus_workflow.file method)": [[77, "pycbc.workflow.pegasus_workflow.File.add_pfn"]], "add_planner_arg() (pycbc.workflow.pegasus_workflow.subworkflow method)": [[77, "pycbc.workflow.pegasus_workflow.SubWorkflow.add_planner_arg"]], "add_profile() (pycbc.workflow.pegasus_workflow.executable method)": [[77, "pycbc.workflow.pegasus_workflow.Executable.add_profile"]], "add_profile() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_profile"]], "add_raw_arg() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.add_raw_arg"]], "add_site() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_site"]], "add_site_pegasus_profile() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.add_site_pegasus_profile"]], "add_subworkflow_dependancy() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.add_subworkflow_dependancy"]], "add_transformation() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.add_transformation"]], "add_workflow() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.add_workflow"]], "add_workflow_command_line_group() (in module pycbc.workflow.configuration)": [[77, "pycbc.workflow.configuration.add_workflow_command_line_group"]], "add_workflow_settings_cli() (in module pycbc.workflow.core)": [[77, "pycbc.workflow.core.add_workflow_settings_cli"]], "cache_entry (pycbc.workflow.core.file property)": [[77, "pycbc.workflow.core.File.cache_entry"]], "categorize_by_attr() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.categorize_by_attr"]], "check_duplicate_options() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.check_duplicate_options"]], "compute_inj_optimal_snr() (in module pycbc.workflow.injection)": [[77, "pycbc.workflow.injection.compute_inj_optimal_snr"]], "convert_bank_to_hdf() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.convert_bank_to_hdf"]], "convert_cachelist_to_filelist() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.convert_cachelist_to_filelist"]], "convert_to_lal_cache() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.convert_to_lal_cache"]], "convert_trig_to_hdf() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.convert_trig_to_hdf"]], "create_fits_file() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.create_fits_file"]], "create_nodata_node() (pycbc.workflow.jobsetup.pycbctmpltbankexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.create_nodata_node"]], "create_node() (pycbc.workflow.coincidence.pycbcaddstatmap method)": [[77, "pycbc.workflow.coincidence.PyCBCAddStatmap.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcbank2hdfexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbccombinestatmap method)": [[77, "pycbc.workflow.coincidence.PyCBCCombineStatmap.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcdistributebackgroundbins method)": [[77, "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcexcludezerolag method)": [[77, "pycbc.workflow.coincidence.PyCBCExcludeZerolag.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfindcoincexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCFindCoincExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfindsnglsexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfitbytemplateexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcfitoverparamexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbchdfinjfindexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcsnglsstatmapexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcsnglsstatmapinjexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcstatmapexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCStatMapExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbcstatmapinjexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable.create_node"]], "create_node() (pycbc.workflow.coincidence.pycbctrig2hdfexecutable method)": [[77, "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable.create_node"]], "create_node() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.create_node"]], "create_node() (pycbc.workflow.dq.pycbcbintriggerratesdqexecutable method)": [[77, "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable.create_node"]], "create_node() (pycbc.workflow.dq.pycbccalculatedqexecutable method)": [[77, "pycbc.workflow.dq.PyCBCCalculateDQExecutable.create_node"]], "create_node() (pycbc.workflow.dq.pycbccalculatedqflagexecutable method)": [[77, "pycbc.workflow.dq.PyCBCCalculateDQFlagExecutable.create_node"]], "create_node() (pycbc.workflow.dq.pycbcrerankdqexecutable method)": [[77, "pycbc.workflow.dq.PyCBCRerankDQExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbinjcombinerexecutable method)": [[77, "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbinjfinderexecutable method)": [[77, "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbtrigclusterexecutable method)": [[77, "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable.create_node"]], "create_node() (pycbc.workflow.grb_utils.pycbcgrbtrigcombinerexecutable method)": [[77, "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable.create_node"]], "create_node() (pycbc.workflow.injection.pycbcmergehdfexecutable method)": [[77, "pycbc.workflow.injection.PyCBCMergeHDFExecutable.create_node"]], "create_node() (pycbc.workflow.injection.pycbcoptimalsnrexecutable method)": [[77, "pycbc.workflow.injection.PyCBCOptimalSNRExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.lalappsinspinjexecutable method)": [[77, "pycbc.workflow.jobsetup.LalappsInspinjExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.ligolwaddexecutable method)": [[77, "pycbc.workflow.jobsetup.LigolwAddExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.ligolwcbcaligntotalspinexecutable method)": [[77, "pycbc.workflow.jobsetup.LigolwCBCAlignTotalSpinExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.ligolwcbcjitterskylocexecutable method)": [[77, "pycbc.workflow.jobsetup.LigolwCBCJitterSkylocExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcinspiralexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcmultiinspiralexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbctmpltbankexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcconditionstrainexecutable method)": [[77, "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbccreateinjectionsexecutable method)": [[77, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcdarkvsbrightinjectionsexecutable method)": [[77, "pycbc.workflow.jobsetup.PycbcDarkVsBrightInjectionsExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbchdfsplitinjexecutable method)": [[77, "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcinferenceexecutable method)": [[77, "pycbc.workflow.jobsetup.PycbcInferenceExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcsplitbankexecutable method)": [[77, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable.create_node"]], "create_node() (pycbc.workflow.jobsetup.pycbcsplitinspinjexecutable method)": [[77, "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable.create_node"]], "create_node() (pycbc.workflow.plotting.plotexecutable method)": [[77, "pycbc.workflow.plotting.PlotExecutable.create_node"]], "create_posterior_files() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.create_posterior_files"]], "create_transformation() (pycbc.workflow.pegasus_workflow.executable method)": [[77, "pycbc.workflow.pegasus_workflow.Executable.create_transformation"]], "current_retention_level (pycbc.workflow.coincidence.censorforeground attribute)": [[77, "pycbc.workflow.coincidence.CensorForeground.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.mergeexecutable attribute)": [[77, "pycbc.workflow.coincidence.MergeExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcaddstatmap attribute)": [[77, "pycbc.workflow.coincidence.PyCBCAddStatmap.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcbank2hdfexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCBank2HDFExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbccombinestatmap attribute)": [[77, "pycbc.workflow.coincidence.PyCBCCombineStatmap.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcdistributebackgroundbins attribute)": [[77, "pycbc.workflow.coincidence.PyCBCDistributeBackgroundBins.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcexcludezerolag attribute)": [[77, "pycbc.workflow.coincidence.PyCBCExcludeZerolag.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfindcoincexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCFindCoincExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfindsnglsexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfitbytemplateexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCFitByTemplateExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcfitoverparamexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCFitOverParamExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbchdfinjfindexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCHDFInjFindExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcsnglsstatmapexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCSnglsStatMapExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcsnglsstatmapinjexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCSnglsStatMapInjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcstatmapexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCStatMapExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbcstatmapinjexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCStatMapInjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.coincidence.pycbctrig2hdfexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCTrig2HDFExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.current_retention_level"]], "current_retention_level (pycbc.workflow.dq.pycbcbintriggerratesdqexecutable attribute)": [[77, "pycbc.workflow.dq.PyCBCBinTriggerRatesDQExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.dq.pycbccalculatedqexecutable attribute)": [[77, "pycbc.workflow.dq.PyCBCCalculateDQExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.dq.pycbccalculatedqflagexecutable attribute)": [[77, "pycbc.workflow.dq.PyCBCCalculateDQFlagExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.dq.pycbcrerankdqexecutable attribute)": [[77, "pycbc.workflow.dq.PyCBCRerankDQExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbinjcombinerexecutable attribute)": [[77, "pycbc.workflow.grb_utils.PycbcGrbInjCombinerExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbinjfinderexecutable attribute)": [[77, "pycbc.workflow.grb_utils.PycbcGrbInjFinderExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbtrigclusterexecutable attribute)": [[77, "pycbc.workflow.grb_utils.PycbcGrbTrigClusterExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.grb_utils.pycbcgrbtrigcombinerexecutable attribute)": [[77, "pycbc.workflow.grb_utils.PycbcGrbTrigCombinerExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.injection.pycbcmergehdfexecutable attribute)": [[77, "pycbc.workflow.injection.PyCBCMergeHDFExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.injection.pycbcoptimalsnrexecutable attribute)": [[77, "pycbc.workflow.injection.PyCBCOptimalSNRExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.lalappsinspinjexecutable attribute)": [[77, "pycbc.workflow.jobsetup.LalappsInspinjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.ligolwaddexecutable attribute)": [[77, "pycbc.workflow.jobsetup.LigolwAddExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.ligolwcbcaligntotalspinexecutable attribute)": [[77, "pycbc.workflow.jobsetup.LigolwCBCAlignTotalSpinExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.ligolwcbcjitterskylocexecutable attribute)": [[77, "pycbc.workflow.jobsetup.LigolwCBCJitterSkylocExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcinspiralexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcmultiinspiralexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbctmpltbankexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcconditionstrainexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcConditionStrainExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbccreateinjectionsexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcdarkvsbrightinjectionsexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcDarkVsBrightInjectionsExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbchdfsplitinjexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcHDFSplitInjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcinferenceexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcInferenceExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcsplitbankexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.jobsetup.pycbcsplitinspinjexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcSplitInspinjExecutable.current_retention_level"]], "current_retention_level (pycbc.workflow.plotting.plotexecutable attribute)": [[77, "pycbc.workflow.plotting.PlotExecutable.current_retention_level"]], "cut_distant_injections() (in module pycbc.workflow.injection)": [[77, "pycbc.workflow.injection.cut_distant_injections"]], "datafind_keep_unique_backups() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.datafind_keep_unique_backups"]], "dax_repr (pycbc.workflow.pegasus_workflow.file property)": [[77, "pycbc.workflow.pegasus_workflow.File.dax_repr"]], "dump() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.dump"]], "entry_class (pycbc.workflow.core.filelist attribute)": [[77, "pycbc.workflow.core.FileList.entry_class"]], "excludestr() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.excludestr"]], "exec_sites_str (pycbc.workflow.core.workflow property)": [[77, "pycbc.workflow.core.Workflow.exec_sites_str"]], "execute_node() (pycbc.workflow.core.workflow method)": [[77, "pycbc.workflow.core.Workflow.execute_node"]], "extension (pycbc.workflow.jobsetup.lalappsinspinjexecutable attribute)": [[77, "pycbc.workflow.jobsetup.LalappsInspinjExecutable.extension"]], "extension (pycbc.workflow.jobsetup.pycbccreateinjectionsexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcCreateInjectionsExecutable.extension"]], "extension (pycbc.workflow.jobsetup.pycbcsplitbankexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcSplitBankExecutable.extension"]], "extension (pycbc.workflow.jobsetup.pycbcsplitbankxmlexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PycbcSplitBankXmlExecutable.extension"]], "fermi_core_tail_model() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.fermi_core_tail_model"]], "file_input_options (pycbc.workflow.coincidence.pycbcfindsnglsexecutable attribute)": [[77, "pycbc.workflow.coincidence.PyCBCFindSnglsExecutable.file_input_options"]], "file_input_options (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.file_input_options"]], "find_all_output_in_range() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_all_output_in_range"]], "find_injections_in_hdf_coinc() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.find_injections_in_hdf_coinc"]], "find_output() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_output"]], "find_output_at_time() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_output_at_time"]], "find_output_in_range() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_output_in_range"]], "find_output_with_ifo() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_output_with_ifo"]], "find_output_with_tag() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_output_with_tag"]], "find_output_without_tag() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_output_without_tag"]], "find_outputs_in_range() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.find_outputs_in_range"]], "from_multi_segment_list() (pycbc.workflow.core.segfile class method)": [[77, "pycbc.workflow.core.SegFile.from_multi_segment_list"]], "from_path() (pycbc.workflow.core.file class method)": [[77, "pycbc.workflow.core.File.from_path"]], "from_path() (pycbc.workflow.pegasus_workflow.file class method)": [[77, "pycbc.workflow.pegasus_workflow.File.from_path"]], "from_segment_list() (pycbc.workflow.core.segfile class method)": [[77, "pycbc.workflow.core.SegFile.from_segment_list"]], "from_segment_list_dict() (pycbc.workflow.core.segfile class method)": [[77, "pycbc.workflow.core.SegFile.from_segment_list_dict"]], "from_segment_xml() (pycbc.workflow.core.segfile class method)": [[77, "pycbc.workflow.core.SegFile.from_segment_xml"]], "generate_triggered_segment() (in module pycbc.workflow.segment)": [[77, "pycbc.workflow.segment.generate_triggered_segment"]], "get_cli_option() (pycbc.workflow.configuration.workflowconfigparser method)": [[77, "pycbc.workflow.configuration.WorkflowConfigParser.get_cli_option"]], "get_coh_ptf_files() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.get_coh_PTF_files"]], "get_command_line() (pycbc.workflow.core.node method)": [[77, "pycbc.workflow.core.Node.get_command_line"]], "get_data_times_for_job() (pycbc.workflow.jobsetup.jobsegmenter method)": [[77, "pycbc.workflow.jobsetup.JobSegmenter.get_data_times_for_job"]], "get_diagnostic_plots() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.get_diagnostic_plots"]], "get_flag_segments_file() (in module pycbc.workflow.segment)": [[77, "pycbc.workflow.segment.get_flag_segments_file"]], "get_full_analysis_chunk() (in module pycbc.workflow.core)": [[77, "pycbc.workflow.core.get_full_analysis_chunk"]], "get_ifo_combinations() (pycbc.workflow.core.workflow method)": [[77, "pycbc.workflow.core.Workflow.get_ifo_combinations"]], "get_ipn_sky_files() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.get_ipn_sky_files"]], "get_missing_segs_from_frame_file_cache() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.get_missing_segs_from_frame_file_cache"]], "get_opt() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.get_opt"]], "get_ordered_ifo_list() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.get_ordered_ifo_list"]], "get_plot_group() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.get_plot_group"]], "get_random_label() (in module pycbc.workflow.core)": [[77, "pycbc.workflow.core.get_random_label"]], "get_science_segs_from_datafind_outs() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.get_science_segs_from_datafind_outs"]], "get_segment_summary_times() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.get_segment_summary_times"]], "get_segments_file() (in module pycbc.workflow.segment)": [[77, "pycbc.workflow.segment.get_segments_file"]], "get_sky_grid_scale() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.get_sky_grid_scale"]], "get_times_covered_by_files() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.get_times_covered_by_files"]], "get_transformation() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.get_transformation"]], "get_triggered_coherent_segment() (in module pycbc.workflow.segment)": [[77, "pycbc.workflow.segment.get_triggered_coherent_segment"]], "get_valid_times() (pycbc.workflow.jobsetup.pycbcinspiralexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.get_valid_times"]], "get_valid_times() (pycbc.workflow.jobsetup.pycbcmultiinspiralexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCMultiInspiralExecutable.get_valid_times"]], "get_valid_times() (pycbc.workflow.jobsetup.pycbctmpltbankexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCTmpltbankExecutable.get_valid_times"]], "get_valid_times_for_job() (pycbc.workflow.jobsetup.jobsegmenter method)": [[77, "pycbc.workflow.jobsetup.JobSegmenter.get_valid_times_for_job"]], "grouper() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.grouper"]], "has_opt() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.has_opt"]], "has_pfn() (pycbc.workflow.pegasus_workflow.file method)": [[77, "pycbc.workflow.pegasus_workflow.File.has_pfn"]], "id (pycbc.workflow.pegasus_workflow.executable attribute)": [[77, "pycbc.workflow.pegasus_workflow.Executable.id"]], "identify_needed_data() (in module pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.identify_needed_data"]], "ifo (pycbc.workflow.core.executable property)": [[77, "pycbc.workflow.core.Executable.ifo"]], "ifo (pycbc.workflow.core.file property)": [[77, "pycbc.workflow.core.File.ifo"]], "inj_to_hdf() (in module pycbc.workflow.injection)": [[77, "pycbc.workflow.injection.inj_to_hdf"]], "insert_into_dax() (pycbc.workflow.pegasus_workflow.file method)": [[77, "pycbc.workflow.pegasus_workflow.File.insert_into_dax"]], "int_gps_time_to_str() (in module pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.int_gps_time_to_str"]], "interpolate_exe() (pycbc.workflow.configuration.workflowconfigparser method)": [[77, "pycbc.workflow.configuration.WorkflowConfigParser.interpolate_exe"]], "interpolate_string() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.interpolate_string"]], "is_same_as() (pycbc.workflow.pegasus_workflow.transformation method)": [[77, "pycbc.workflow.pegasus_workflow.Transformation.is_same_as"]], "load() (pycbc.workflow.core.filelist class method)": [[77, "pycbc.workflow.core.FileList.load"]], "log_datafind_command() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.log_datafind_command"]], "make_analysis_dir() (in module pycbc.workflow.core)": [[77, "pycbc.workflow.core.make_analysis_dir"]], "make_average_psd() (in module pycbc.workflow.psd)": [[77, "pycbc.workflow.psd.make_average_psd"]], "make_binned_hist() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_binned_hist"]], "make_catalog() (in module pycbc.workflow.pegasus_sites)": [[77, "pycbc.workflow.pegasus_sites.make_catalog"]], "make_coinc_info() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_coinc_info"]], "make_coinc_snrchi_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_coinc_snrchi_plot"]], "make_diagnostic_plots() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_diagnostic_plots"]], "make_dq_percentile_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_dq_percentile_plot"]], "make_dq_trigger_rate_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_dq_trigger_rate_plot"]], "make_external_call() (in module pycbc.workflow.core)": [[77, "pycbc.workflow.core.make_external_call"]], "make_exttrig_file() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.make_exttrig_file"]], "make_foreground_censored_veto() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.make_foreground_censored_veto"]], "make_foreground_table() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_foreground_table"]], "make_foundmissed_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_foundmissed_plot"]], "make_gating_node() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.make_gating_node"]], "make_gating_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_gating_plot"]], "make_ifar_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_ifar_plot"]], "make_inference_acceptance_rate_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_acceptance_rate_plot"]], "make_inference_dynesty_run_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_dynesty_run_plot"]], "make_inference_dynesty_trace_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_dynesty_trace_plot"]], "make_inference_inj_recovery_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_inj_recovery_plot"]], "make_inference_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_plot"]], "make_inference_plot_mcmc_history() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_plot_mcmc_history"]], "make_inference_posterior_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_posterior_plot"]], "make_inference_pp_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_pp_plot"]], "make_inference_pp_table() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_pp_table"]], "make_inference_prior_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_prior_plot"]], "make_inference_samples_plot() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_samples_plot"]], "make_inference_skymap() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_skymap"]], "make_inference_summary_table() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_inference_summary_table"]], "make_inj_info() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_inj_info"]], "make_inj_table() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_inj_table"]], "make_plot_waveform_plot() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_plot_waveform_plot"]], "make_posterior_workflow() (in module pycbc.workflow.inference_followups)": [[77, "pycbc.workflow.inference_followups.make_posterior_workflow"]], "make_psd_file() (in module pycbc.workflow.psd)": [[77, "pycbc.workflow.psd.make_psd_file"]], "make_qscan_plot() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_qscan_plot"]], "make_range_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_range_plot"]], "make_results_web_page() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_results_web_page"]], "make_seg_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_seg_plot"]], "make_seg_table() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_seg_table"]], "make_segments_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_segments_plot"]], "make_sensitivity_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_sensitivity_plot"]], "make_single_hist() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_single_hist"]], "make_single_template_plots() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_single_template_plots"]], "make_singles_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_singles_plot"]], "make_singles_timefreq() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_singles_timefreq"]], "make_skipped_html() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_skipped_html"]], "make_sngl_ifo() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_sngl_ifo"]], "make_snrchi_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_snrchi_plot"]], "make_snrifar_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_snrifar_plot"]], "make_snrratehist_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_snrratehist_plot"]], "make_spectrum_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_spectrum_plot"]], "make_template_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_template_plot"]], "make_throughput_plot() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_throughput_plot"]], "make_trigger_timeseries() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.make_trigger_timeseries"]], "make_veto_table() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.make_veto_table"]], "merge_psds() (in module pycbc.workflow.psd)": [[77, "pycbc.workflow.psd.merge_psds"]], "merge_single_detector_hdf_files() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.merge_single_detector_hdf_files"]], "multi_ifo_coherent_job_setup() (in module pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.multi_ifo_coherent_job_setup"]], "new_multiifo_output_list_opt() (pycbc.workflow.core.node method)": [[77, "pycbc.workflow.core.Node.new_multiifo_output_list_opt"]], "new_output_file_opt() (pycbc.workflow.core.node method)": [[77, "pycbc.workflow.core.Node.new_output_file_opt"]], "new_output_file_opt() (pycbc.workflow.pegasus_workflow.node method)": [[77, "pycbc.workflow.pegasus_workflow.Node.new_output_file_opt"]], "output_file (pycbc.workflow.core.node property)": [[77, "pycbc.workflow.core.Node.output_file"]], "output_files (pycbc.workflow.core.node property)": [[77, "pycbc.workflow.core.Node.output_files"]], "output_map (pycbc.workflow.core.workflow property)": [[77, "pycbc.workflow.core.Workflow.output_map"]], "output_map_str() (pycbc.workflow.pegasus_workflow.file method)": [[77, "pycbc.workflow.pegasus_workflow.File.output_map_str"]], "parse_segdict_key() (pycbc.workflow.core.segfile method)": [[77, "pycbc.workflow.core.SegFile.parse_segdict_key"]], "parse_workflow_ini_file() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.parse_workflow_ini_file"]], "perform_exe_expansion() (pycbc.workflow.configuration.workflowconfigparser method)": [[77, "pycbc.workflow.configuration.WorkflowConfigParser.perform_exe_expansion"]], "perform_extended_interpolation() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.perform_extended_interpolation"]], "pick_tile_size() (pycbc.workflow.jobsetup.jobsegmenter method)": [[77, "pycbc.workflow.jobsetup.JobSegmenter.pick_tile_size"]], "plan_and_submit() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.plan_and_submit"]], "pycbc.workflow": [[77, "module-pycbc.workflow"]], "pycbc.workflow.coincidence": [[77, "module-pycbc.workflow.coincidence"]], "pycbc.workflow.configparser_test": [[77, "module-pycbc.workflow.configparser_test"]], "pycbc.workflow.configuration": [[77, "module-pycbc.workflow.configuration"]], "pycbc.workflow.core": [[77, "module-pycbc.workflow.core"]], "pycbc.workflow.datafind": [[77, "module-pycbc.workflow.datafind"]], "pycbc.workflow.dq": [[77, "module-pycbc.workflow.dq"]], "pycbc.workflow.grb_utils": [[77, "module-pycbc.workflow.grb_utils"]], "pycbc.workflow.inference_followups": [[77, "module-pycbc.workflow.inference_followups"]], "pycbc.workflow.injection": [[77, "module-pycbc.workflow.injection"]], "pycbc.workflow.jobsetup": [[77, "module-pycbc.workflow.jobsetup"]], "pycbc.workflow.matched_filter": [[77, "module-pycbc.workflow.matched_filter"]], "pycbc.workflow.minifollowups": [[77, "module-pycbc.workflow.minifollowups"]], "pycbc.workflow.pegasus_sites": [[77, "module-pycbc.workflow.pegasus_sites"]], "pycbc.workflow.pegasus_workflow": [[77, "module-pycbc.workflow.pegasus_workflow"]], "pycbc.workflow.plotting": [[77, "module-pycbc.workflow.plotting"]], "pycbc.workflow.psd": [[77, "module-pycbc.workflow.psd"]], "pycbc.workflow.psdfiles": [[77, "module-pycbc.workflow.psdfiles"]], "pycbc.workflow.segment": [[77, "module-pycbc.workflow.segment"]], "pycbc.workflow.splittable": [[77, "module-pycbc.workflow.splittable"]], "pycbc.workflow.tmpltbank": [[77, "module-pycbc.workflow.tmpltbank"]], "read_ini_file() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.read_ini_file"]], "remove_short_sci_segs() (pycbc.workflow.core.segfile method)": [[77, "pycbc.workflow.core.SegFile.remove_short_sci_segs"]], "requirestr() (in module pycbc.workflow.plotting)": [[77, "pycbc.workflow.plotting.requirestr"]], "rerank_coinc_followup() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.rerank_coinc_followup"]], "resolve_file_url() (pycbc.workflow.configuration.workflowconfigparser method)": [[77, "pycbc.workflow.configuration.WorkflowConfigParser.resolve_file_url"]], "resolve_td_option() (in module pycbc.workflow.core)": [[77, "pycbc.workflow.core.resolve_td_option"]], "resolve_td_options() (pycbc.workflow.core.node method)": [[77, "pycbc.workflow.core.Node.resolve_td_options"]], "resolve_url() (in module pycbc.workflow.configuration)": [[77, "pycbc.workflow.configuration.resolve_url"]], "resolve_url_to_file() (in module pycbc.workflow.core)": [[77, "pycbc.workflow.core.resolve_url_to_file"]], "resolve_urls() (pycbc.workflow.configuration.workflowconfigparser method)": [[77, "pycbc.workflow.configuration.WorkflowConfigParser.resolve_urls"]], "return_union_seglist() (pycbc.workflow.core.segfile method)": [[77, "pycbc.workflow.core.SegFile.return_union_seglist"]], "run_datafind_instance() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.run_datafind_instance"]], "sanity_check_subsections() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.sanity_check_subsections"]], "save() (pycbc.workflow.core.workflow method)": [[77, "pycbc.workflow.core.Workflow.save"]], "save() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.save"]], "save_config() (pycbc.workflow.core.workflow method)": [[77, "pycbc.workflow.core.Workflow.save_config"]], "save_veto_definer() (in module pycbc.workflow.segment)": [[77, "pycbc.workflow.segment.save_veto_definer"]], "section_to_cli() (pycbc.workflow.configuration.workflowconfigparser method)": [[77, "pycbc.workflow.configuration.WorkflowConfigParser.section_to_cli"]], "segment (pycbc.workflow.core.file property)": [[77, "pycbc.workflow.core.File.segment"]], "select_files_by_ifo_combination() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.select_files_by_ifo_combination"]], "select_generic_executable() (in module pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.select_generic_executable"]], "select_grb_pp_class() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.select_grb_pp_class"]], "select_matchedfilter_class() (in module pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.select_matchedfilter_class"]], "select_splitfilejob_instance() (in module pycbc.workflow.splittable)": [[77, "pycbc.workflow.splittable.select_splitfilejob_instance"]], "select_tmpltbank_class() (in module pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.select_tmpltbank_class"]], "set_category() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_category"]], "set_execution_site() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_execution_site"]], "set_grb_start_end() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.set_grb_start_end"]], "set_memory() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_memory"]], "set_num_cpus() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_num_cpus"]], "set_num_retries() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_num_retries"]], "set_priority() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_priority"]], "set_storage() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_storage"]], "set_subworkflow_properties() (pycbc.workflow.pegasus_workflow.subworkflow method)": [[77, "pycbc.workflow.pegasus_workflow.SubWorkflow.set_subworkflow_properties"]], "set_universe() (pycbc.workflow.pegasus_workflow.profileshortcuts method)": [[77, "pycbc.workflow.pegasus_workflow.ProfileShortcuts.set_universe"]], "setup_combine_statmap() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_combine_statmap"]], "setup_datafind_from_pregenerated_lcf_files() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.setup_datafind_from_pregenerated_lcf_files"]], "setup_datafind_runtime_cache_multi_calls_perifo() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.setup_datafind_runtime_cache_multi_calls_perifo"]], "setup_datafind_runtime_cache_single_call_perifo() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.setup_datafind_runtime_cache_single_call_perifo"]], "setup_datafind_runtime_frames_multi_calls_perifo() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.setup_datafind_runtime_frames_multi_calls_perifo"]], "setup_datafind_runtime_frames_single_call_perifo() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.setup_datafind_runtime_frames_single_call_perifo"]], "setup_datafind_workflow() (in module pycbc.workflow.datafind)": [[77, "pycbc.workflow.datafind.setup_datafind_workflow"]], "setup_dq_reranking() (in module pycbc.workflow.dq)": [[77, "pycbc.workflow.dq.setup_dq_reranking"]], "setup_exclude_zerolag() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_exclude_zerolag"]], "setup_foreground_minifollowups() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.setup_foreground_minifollowups"]], "setup_injection_minifollowups() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.setup_injection_minifollowups"]], "setup_injection_workflow() (in module pycbc.workflow.injection)": [[77, "pycbc.workflow.injection.setup_injection_workflow"]], "setup_interval_coinc() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_interval_coinc"]], "setup_interval_coinc_inj() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_interval_coinc_inj"]], "setup_matchedfltr_dax_generated() (in module pycbc.workflow.matched_filter)": [[77, "pycbc.workflow.matched_filter.setup_matchedfltr_dax_generated"]], "setup_matchedfltr_dax_generated_multi() (in module pycbc.workflow.matched_filter)": [[77, "pycbc.workflow.matched_filter.setup_matchedfltr_dax_generated_multi"]], "setup_matchedfltr_workflow() (in module pycbc.workflow.matched_filter)": [[77, "pycbc.workflow.matched_filter.setup_matchedfltr_workflow"]], "setup_psd_calculate() (in module pycbc.workflow.psd)": [[77, "pycbc.workflow.psd.setup_psd_calculate"]], "setup_psd_pregenerated() (in module pycbc.workflow.psdfiles)": [[77, "pycbc.workflow.psdfiles.setup_psd_pregenerated"]], "setup_psd_workflow() (in module pycbc.workflow.psdfiles)": [[77, "pycbc.workflow.psdfiles.setup_psd_workflow"]], "setup_pygrb_pp_workflow() (in module pycbc.workflow.grb_utils)": [[77, "pycbc.workflow.grb_utils.setup_pygrb_pp_workflow"]], "setup_single_det_minifollowups() (in module pycbc.workflow.minifollowups)": [[77, "pycbc.workflow.minifollowups.setup_single_det_minifollowups"]], "setup_sngls() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_sngls"]], "setup_sngls_inj() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_sngls_inj"]], "setup_sngls_statmap() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_sngls_statmap"]], "setup_sngls_statmap_inj() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_sngls_statmap_inj"]], "setup_splittable_dax_generated() (in module pycbc.workflow.splittable)": [[77, "pycbc.workflow.splittable.setup_splittable_dax_generated"]], "setup_splittable_workflow() (in module pycbc.workflow.splittable)": [[77, "pycbc.workflow.splittable.setup_splittable_workflow"]], "setup_statmap() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_statmap"]], "setup_statmap_inj() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_statmap_inj"]], "setup_tmpltbank_dax_generated() (in module pycbc.workflow.tmpltbank)": [[77, "pycbc.workflow.tmpltbank.setup_tmpltbank_dax_generated"]], "setup_tmpltbank_pregenerated() (in module pycbc.workflow.tmpltbank)": [[77, "pycbc.workflow.tmpltbank.setup_tmpltbank_pregenerated"]], "setup_tmpltbank_without_frames() (in module pycbc.workflow.tmpltbank)": [[77, "pycbc.workflow.tmpltbank.setup_tmpltbank_without_frames"]], "setup_tmpltbank_workflow() (in module pycbc.workflow.tmpltbank)": [[77, "pycbc.workflow.tmpltbank.setup_tmpltbank_workflow"]], "setup_trigger_fitting() (in module pycbc.workflow.coincidence)": [[77, "pycbc.workflow.coincidence.setup_trigger_fitting"]], "sites (pycbc.workflow.core.workflow property)": [[77, "pycbc.workflow.core.Workflow.sites"]], "sngl_ifo_job_setup() (in module pycbc.workflow.jobsetup)": [[77, "pycbc.workflow.jobsetup.sngl_ifo_job_setup"]], "split_multi_sections() (in module pycbc.workflow.configparser_test)": [[77, "pycbc.workflow.configparser_test.split_multi_sections"]], "staging_site (pycbc.workflow.core.workflow property)": [[77, "pycbc.workflow.core.Workflow.staging_site"]], "staging_site_str (pycbc.workflow.core.workflow property)": [[77, "pycbc.workflow.core.Workflow.staging_site_str"]], "time_dependent_options (pycbc.workflow.core.executable attribute)": [[77, "pycbc.workflow.core.Executable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.jobsetup.pycbcinspiralexecutable attribute)": [[77, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.minifollowups.plotqscanexecutable attribute)": [[77, "pycbc.workflow.minifollowups.PlotQScanExecutable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.minifollowups.singletemplateexecutable attribute)": [[77, "pycbc.workflow.minifollowups.SingleTemplateExecutable.time_dependent_options"]], "time_dependent_options (pycbc.workflow.minifollowups.singletimefreqexecutable attribute)": [[77, "pycbc.workflow.minifollowups.SingleTimeFreqExecutable.time_dependent_options"]], "to_file_object() (pycbc.workflow.core.filelist method)": [[77, "pycbc.workflow.core.FileList.to_file_object"]], "to_segment_xml() (pycbc.workflow.core.segfile method)": [[77, "pycbc.workflow.core.SegFile.to_segment_xml"]], "traverse_workflow_io() (pycbc.workflow.pegasus_workflow.workflow method)": [[77, "pycbc.workflow.pegasus_workflow.Workflow.traverse_workflow_io"]], "update_current_retention_level() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.update_current_retention_level"]], "update_current_tags() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.update_current_tags"]], "update_output_directory() (pycbc.workflow.core.executable method)": [[77, "pycbc.workflow.core.Executable.update_output_directory"]], "veto_injections() (in module pycbc.workflow.injection)": [[77, "pycbc.workflow.injection.veto_injections"]], "zero_pad_data_extend() (pycbc.workflow.jobsetup.pycbcinspiralexecutable method)": [[77, "pycbc.workflow.jobsetup.PyCBCInspiralExecutable.zero_pad_data_extend"]]}})